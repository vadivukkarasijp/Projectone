<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/</description>
	<atom:link rel="self" href="http://planeteclipse.org/rss20.xml" type="application/rss+xml"/>

<item>
	<title>Donald Raab: Docendo discimus and Retroactive Interference</title>
	<guid isPermaLink="false">https://medium.com/p/84000f0b3e28</guid>
	<link>https://donraab.medium.com/docendo-discimus-and-retroactive-interference-84000f0b3e28?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;By teaching, we learn and when we learn, we sometimes forget.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*8g9K_r-ksylftg_3&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@kellysikkema?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Kelly Sikkema&lt;/a&gt; onÂ &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote&gt;docendo discimus&lt;/blockquote&gt;&lt;p&gt;This Latin phrase translates to â€œby teaching, we learn.â€� Thanks to Chandra Guntur for teaching this phrase to me, a few days before a talk I gave at QCon New York in 2018. I have used this phrase so many times over the last six years, that I included it in a new category in the &lt;a href=&quot;https://donraab.medium.com/the-desktop-don-reference-5e3299df50d8?source=friends_link&amp;amp;sk=9c4f75c2b44509239093e7f10c7b90f6&quot;&gt;Desktop Don Reference&lt;/a&gt; with the title of â€œCommunicationâ€�Â .&lt;/p&gt;&lt;p&gt;I was reminded about how much I love teaching, by my former colleague &lt;a href=&quot;https://thepeoplessoftwareengineer.substack.com/&quot;&gt;Bhavana Hindupur&lt;/a&gt;, in a &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7189372523585622016/&quot;&gt;LinkedIn post&lt;/a&gt; yesterday. Thank you, Bhavana! I thought I would take some time to share a lesson I learned while teaching the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata&quot;&gt;Eclipse Collections Katas&lt;/a&gt; over theÂ years.&lt;/p&gt;&lt;p&gt;I have taught the Eclipse Collections Katas since 2007. In the early days, there was one kataâ€Šâ€”â€Š&lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata/tree/master/company-kata&quot;&gt;The Company Kata&lt;/a&gt;. This kata was originally developed by John Tobin and later evolved into &lt;a href=&quot;https://eclipse.github.io/eclipse-collections-kata/company-kata/#/&quot;&gt;training materials&lt;/a&gt; developed by &lt;a href=&quot;https://medium.com/u/82b613b921f6&quot;&gt;Craig Motlin&lt;/a&gt;. We would teach the Company Kata in Goldman Sachs as an eight hour training class for Java developers. In 2014, I would write a two part series of InfoQ articles with the title â€œ&lt;a href=&quot;https://www.infoq.com/articles/GS-Collections-by-Example-1/&quot;&gt;GS Collections by Example&lt;/a&gt;â€�. In &lt;a href=&quot;https://www.infoq.com/articles/GS-Collections-by-Example-2/&quot;&gt;Part 2&lt;/a&gt;, I would introduce a set of examples that &lt;a href=&quot;https://medium.com/u/4285d8a2ca86&quot;&gt;Nikhil Nanivadekar&lt;/a&gt; would later convert into the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata/tree/master/pet-kata&quot;&gt;Pet Kata&lt;/a&gt;. We would start teaching the Pet Kata as a four hour class. Spending eight hours on intense focused learning is exhausting and hard to fit in some folks schedules. Four hours proved more manageable.&lt;/p&gt;&lt;p&gt;There were many things I have learned while teaching these katas over the past 17 years. I was reminded of one thing I learned while explaining a â€œfusedâ€� Eclipse Collections method in a tweet earlier today. &lt;strong&gt;One thing I saw every time I taught the Company Kata was how new learning can sometimes obscure old knowledge.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;In &lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata/blob/484419fab0ab059804514cf605469e6ef596d8fb/company-kata-solutions/src/test/java/org/eclipse/collections/companykata/Exercise2Test.java#L72&quot;&gt;exercise two&lt;/a&gt; of the Company Kata, developers would learn how to use anySatisfy with a Predicate to determine if any Customers lived in â€œLondonâ€�. In &lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata/blob/484419fab0ab059804514cf605469e6ef596d8fb/company-kata-solutions/src/test/java/org/eclipse/collections/companykata/Exercise4Test.java#L89&quot;&gt;exercise four&lt;/a&gt; of the Company kata, they would need to find a way of finding a Supplier who supplies a â€œsandwich toasterâ€�. After a bit of a struggle, most of the developers would figure out how to use anySatisfy to solve the problem. The better solution is to use contains. The method named contains is part of the standard Java Collection protocol. Unfortunately, in the exercise, the data structure that developers would need use contains on is not a Collection, it is an array. An array in Java has no behavior. Developers had learned in the class how to use ArrayIterate&lt;/p&gt;&lt;p&gt;When I would explain my solutions to the developers in the class, I would explain that contains can be implemented in terms of anySatisfy, using an â€œequalsâ€� Predicate. The developers had good intuition, but in the midst of learning new things (anySatisfy), had forgotten about old things they knew (contains).&lt;/p&gt;&lt;blockquote&gt;Retroactive Interference&lt;/blockquote&gt;&lt;p&gt;Chandra taught me the Psychology term for this phenomenon today. He said it is called â€œ&lt;a href=&quot;https://www.simplypsychology.org/proactive-and-retroactive-interference.html&quot;&gt;retroactive inhibition/interference&lt;/a&gt;â€�.&lt;/p&gt;&lt;p&gt;Most Java developers will learn Java Stream anyMatch after learning Collection contains first. I wouldnâ€™t be surprised if some Java developers are using anyMatch instead of contains to solve some problems. This would be unfortunate, as contains is optimized for Set andÂ Bag.&lt;/p&gt;&lt;p&gt;We have to learn and remember a lot as developers. The more we practice, the more we can remember. It is helpful to learn basic patterns like anySatisfy, and then fused patterns like contains (anySatisfy + Equals Predicate).&lt;/p&gt;&lt;p&gt;The tweet I mentioned earlier in this blog that I shared today described another fused pattern, which combines map + anyMatch + Equals Predicate. When you see anyMatch + Equals Predicate, you should now immediately think â€œcontains!â€�. The rest of the info on the other fused method is in the â€œFusing methods for productivityâ€� blogÂ below.&lt;/p&gt;&lt;p&gt;Enjoy! ğŸ™�&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/javarevisited/fusing-methods-for-productivity-c15c9eb2d666&quot;&gt;Fusing methods for productivity&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=84000f0b3e28&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 27 Apr 2024 01:58:52 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Nuanced String Joining in Java</title>
	<guid isPermaLink="false">https://medium.com/p/7db547c331d0</guid>
	<link>https://medium.com/javarevisited/nuanced-string-joining-in-java-7db547c331d0?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Subtle differences sometimes make a big difference&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*fuCE9o8wmUiHoMep&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@anja_hb?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Anja Bauermann&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Starting with an Integer array&lt;/h3&gt;&lt;p&gt;I opened up my IntelliJ IDE and created an Integer array. I don’t usually like boxing primitives but wanted to see what interesting things I could discover about &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; and Java Stream without immediately jumping into primitive types.&lt;/p&gt;&lt;pre&gt;Integer[] numbers = {1, 2, 3, 4, 5};&lt;/pre&gt;&lt;p&gt;The first question I asked is “What can we do with this that is simple but interesting?“.” We can easily adapt this array in Java as a Stream.&lt;/p&gt;&lt;pre&gt;Stream&amp;lt;Integer&amp;gt; stream = Stream.of(numbers);&lt;/pre&gt;&lt;p&gt;We can also adapt it as an ArrayAdapter in Eclipse Collections.&lt;/p&gt;&lt;pre&gt;ArrayAdapter&amp;lt;Integer&amp;gt; adapted = ArrayAdapter.adapt(numbers);&lt;/pre&gt;&lt;p&gt;But what next? This is where our fun begins.&lt;/p&gt;&lt;h3&gt;Let’s make a String&lt;/h3&gt;&lt;p&gt;I wrote an article for &lt;a href=&quot;https://www.oreilly.com/library/view/97-things-every/9781491952689/&quot;&gt;97 Things Every Java Programmer Should Know&lt;/a&gt; with the title “&lt;a href=&quot;https://medium.com/97-things/learn-to-kata-and-kata-to-learn-73c98a69e44c?source=friends_link&amp;amp;sk=db77a42b37789576e285cd2e530be53c&quot;&gt;Learn to Kata and Kata to Learn&lt;/a&gt;.” In this article, I iterate through some example Java code using Collectors.joining() and String.join() to create a comma separated list of names. Then I turn the exercise into a code kata. I started with a List&amp;lt;String&amp;gt; and asserted some derived result of a joined String would equal the names in the List separated by commas.&lt;/p&gt;&lt;p&gt;This is a trivial example for both Collectors.joining and String.join. The example only involved a delimiter. It did not involve a prefix and a suffix. It also started off with String instances, which as we will see, is the perfect scenario for both Collectors.joining and String.join. Unfortunately, in the many classed world of object oriented programming, not everything starts out as a String.&lt;/p&gt;&lt;p&gt;Our problem today will start with the array of Integers values from 1 to 5 and converted them to a String starting with a “*”, separating elements with “*, *” and then finishing with a “*”.&lt;/p&gt;&lt;h3&gt;For Loop&lt;/h3&gt;&lt;p&gt;Joining an Integer array into a String with a for loop is a good exercise for us to start with.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void loopArrayOfIntegerIntoAString()&lt;br /&gt;{&lt;br /&gt;    Integer[] numbers = {1, 2, 3, 4, 5};&lt;br /&gt;&lt;br /&gt;    StringBuilder builder = new StringBuilder(&quot;*&quot;);&lt;br /&gt;    for (int i = 0; i &amp;lt; numbers.length; i++)&lt;br /&gt;    {&lt;br /&gt;        if (i &amp;gt; 0)&lt;br /&gt;        {&lt;br /&gt;            builder.append(&quot;*, *&quot;);&lt;br /&gt;        }&lt;br /&gt;        builder.append(numbers[i]);&lt;br /&gt;    }&lt;br /&gt;    String string = builder.append(&quot;*&quot;).toString();&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(&quot;*1*, *2*, *3*, *4*, *5*&quot;, string);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;We use StringBuilder here, but I started off with simple String concatenation. IntelliJ recommending applying an automated refactoring to convert the String concatentation to StringBuilder. So I did. The code is fairly simple here to understand. We iterate over the array using indexed access, so that we can check if we are not on the first (0th) element. Only the first element element will not have the “*, *” delimiter before it. A prefix of “*” and a suffix of “*” are added to the StringBuilder before and after iteration begins. The append method in StringBuilder is nice enough to call String.valueOf on each Integer value for us so we don’t have to. In the end, we assert we wind up with a String that matches this string “*1*, *2*, *3*, *4*, *5*”.&lt;/p&gt;&lt;h3&gt;Stream.map, collect, and Collectors.joining&lt;/h3&gt;&lt;p&gt;For the next implementation, we will use a Stream and Collectors.joining to create the String. Collectors.joining requires that elements are an instance of CharSequence (a parent interface of String). We will map each Integer to a String using String.valueOf before calling Collectors.joining.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void streamAnArrayOfIntegerAndMapCollectorsJoining()&lt;br /&gt;{&lt;br /&gt;    Integer[] numbers = {1, 2, 3, 4, 5};&lt;br /&gt;&lt;br /&gt;    // Collectors.joining requires elements to be CharSequence&lt;br /&gt;    // delimiter is first, followed by prefix and then suffix&lt;br /&gt;    Stream&amp;lt;Integer&amp;gt; stream = Stream.of(numbers);&lt;br /&gt;    String streamedJoining = stream&lt;br /&gt;            .map(String::valueOf)&lt;br /&gt;            .collect(Collectors.joining(&quot;*, *&quot;, &quot;*&quot;, &quot;*&quot;));&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(&quot;*1*, *2*, *3*, *4*, *5*&quot;, streamedJoining);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;This code looks more concise than the for loop. However, it is rather annoying that StringBuilder append calls String.valueOf for us, and Collectors.joining does not. I also found it surprising that we see that joining takes the delimiter first, followed by the prefix and then the suffix. This does not mirror the output of the String.&lt;/p&gt;&lt;h3&gt;String.join&lt;/h3&gt;&lt;p&gt;For this implementation, we will used String.join. The String.join static method takes a CharSequence delimiter and either an array of CharSequence for the elements, or some kind of Iterable&amp;lt;CharSequence&amp;gt;. We can use the ArrayAdapter class from Eclipse Collections to convert the Integer array to an Iterable&amp;lt;CharSequence&amp;gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void adaptAnArrayOfIntegerAndStringJoin()&lt;br /&gt;{&lt;br /&gt;    Integer[] numbers = {1, 2, 3, 4, 5};&lt;br /&gt;&lt;br /&gt;    Iterable&amp;lt;CharSequence&amp;gt; iterable = ArrayAdapter.adapt(numbers)&lt;br /&gt;            .asLazy()&lt;br /&gt;            .collect(String::valueOf);&lt;br /&gt;&lt;br /&gt;    // String.join only supports delimiter. Prefix and suffix are concatenated&lt;br /&gt;    // Requires elements to be a CharSequence[] or Iterable&amp;lt;CharSequence&amp;gt;&lt;br /&gt;    String stringJoin = &quot;*&quot; + String.join(&quot;*, *&quot;, iterable) + &quot;*&quot;;&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(&quot;*1*, *2*, *3*, *4*, *5*&quot;, stringJoin);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Here we use the ArrayAdapter, convert it to a LazyIterable (which is an Iterable) and collect String instances using String::valueOf. The most surprising thing I didn’t know about String.join is that there are no public overloads that take a prefix and suffix, like Collectors.joining has.&lt;/p&gt;&lt;p&gt;We can also use Stream to turn the Integer array into an Iterable&amp;lt;String&amp;gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void streamAnArrayOfIntegerAndStringJoin()&lt;br /&gt;{&lt;br /&gt;    Integer[] numbers = {1, 2, 3, 4, 5};&lt;br /&gt;&lt;br /&gt;    Iterable&amp;lt;String&amp;gt; iterable = &lt;br /&gt;            Stream.of(numbers).map(String::valueOf)::iterator;&lt;br /&gt;&lt;br /&gt;    String stringJoin = &quot;*&quot; + String.join(&quot;*, *&quot;, iterable) + &quot;*&quot;;&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(&quot;*1*, *2*, *3*, *4*, *5*&quot;, stringJoin);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;We use a method reference here of ::iterator on the Stream to convert it to an Iterable. This is a neat trick since Iterable only requires one method to be implemented, which is iterator.&lt;/p&gt;&lt;h3&gt;ArrayAdapter.makeString&lt;/h3&gt;&lt;p&gt;In the 97 Things article, I did not include a refactoring to use Eclipse Collections makeString. We will see how to use makeString, which is available on all RichIterable subtypes, below.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void adaptAnArrayOfIntegerAndMakeString()&lt;br /&gt;{&lt;br /&gt;    Integer[] numbers = {1, 2, 3, 4, 5};&lt;br /&gt;&lt;br /&gt;    ArrayAdapter&amp;lt;Integer&amp;gt; adapted = ArrayAdapter.adapt(numbers);&lt;br /&gt;&lt;br /&gt;    // makeString does not require elements to be CharSequence&lt;br /&gt;    // prefix is first, then delimiter and then suffix&lt;br /&gt;    String makeString = adapted.makeString(&quot;*&quot;, &quot;*, *&quot;,&quot;*&quot;);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(&quot;*1*, *2*, *3*, *4*, *5*&quot;, makeString);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Similar to StringBuilder append, makeString applies the call to String.valueOf for us. The order of String parameters here is prefix, delimiter, suffix, which more closely mirrors the expected output.&lt;/p&gt;&lt;h3&gt;ArrayIterate.makeString&lt;/h3&gt;&lt;p&gt;The simplest solution we will see is using ArrayIterate.makeString from Eclipse Collections. Eclipse Collections has utility classes with the suffix of Iterate. There are Iterate, MapIterate, StringIterate, and ArrayIterate utility classes, that work with Iterable, Map, String, and Object array types respectively.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void iterateAnArrayOfIntegerAndMakeString()&lt;br /&gt;{&lt;br /&gt;    Integer[] numbers = {1, 2, 3, 4, 5};&lt;br /&gt;&lt;br /&gt;    String makeString = &lt;br /&gt;            ArrayIterate.makeString(numbers, &quot;*&quot;, &quot;*, *&quot;,&quot;*&quot;);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(&quot;*1*, *2*, *3*, *4*, *5*&quot;, makeString);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The makeString method on the utility classes behaves the same as on RichIterable subtypes. The method does not require the elements in the array to be some type of String or CharSequence already. The prefix comes first after the array parameter, followed by delimiter and then by suffix.&lt;/p&gt;&lt;h3&gt;Looking for more nuance? Let’s get primitive.&lt;/h3&gt;&lt;p&gt;Instead of an array of Integer, let’s switch to an array of int, and see what options we have to convert to a delimited String.&lt;/p&gt;&lt;h4&gt;MutableIntList.makeString&lt;/h4&gt;&lt;p&gt;We can convert an int array to a MutableIntList and use makeString on a primitive List.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void mutableIntListMakeString()&lt;br /&gt;{&lt;br /&gt;    int[] numbers = {1, 2, 3, 4, 5};&lt;br /&gt;&lt;br /&gt;    MutableIntList adapted = IntLists.mutable.with(numbers);&lt;br /&gt;&lt;br /&gt;    String makeString = adapted.makeString(&quot;*&quot;, &quot;*, *&quot;, &quot;*&quot;);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(&quot;*1*, *2*, *3*, *4*, *5*&quot;, makeString);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;IntStream.of, boxed and mapToObject&lt;/h4&gt;&lt;p&gt;We can create an IntStream using the int array with the static of method, and then box it to Integer using the method boxed. There are no primitive Collectors for primitive Streams, so boxing is our only option.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void intStreamBoxedCollectorsJoining()&lt;br /&gt;{&lt;br /&gt;    int[] numbers = {1, 2, 3, 4, 5};&lt;br /&gt;&lt;br /&gt;    Stream&amp;lt;Integer&amp;gt; boxed = IntStream.of(numbers).boxed();&lt;br /&gt;    String streamedJoining = boxed&lt;br /&gt;            .map(String::valueOf)&lt;br /&gt;            .collect(Collectors.joining(&quot;*, *&quot;, &quot;*&quot;, &quot;*&quot;));&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(&quot;*1*, *2*, *3*, *4*, *5*&quot;, streamedJoining);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;We can also get rid of the boxing to Integer, and box straight from int to String using mapToObj with String.valueOf.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void intStreamMapToStringCollectorsJoining()&lt;br /&gt;{&lt;br /&gt;    int[] numbers = {1, 2, 3, 4, 5};&lt;br /&gt;&lt;br /&gt;    String string = IntStream.of(numbers)&lt;br /&gt;            .mapToObj(String::valueOf)&lt;br /&gt;            .collect(Collectors.joining(&quot;*, *&quot;, &quot;*&quot;, &quot;*&quot;));&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(&quot;*1*, *2*, *3*, *4*, *5*&quot;, string);&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Update: Some Benchmarks&lt;/h3&gt;&lt;p&gt;A reader commented that they would be interested in seeing some benchmarks. I was not really interested in spending time writing or running any benchmarks for these method comparisons, but I did find a set of benchmarks that already existed in the Eclipse Collections repo comparing Collectors.joining() on a Stream with makeString() in Eclipse Collections object and primitive types. So I decided to run the benchmarks while drinking some coffee today.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/jmh-tests/src/main/java/org/eclipse/collections/impl/jmh/CollectorJoiningTest.java&quot;&gt;eclipse-collections/jmh-tests/src/main/java/org/eclipse/collections/impl/jmh/CollectorJoiningTest.java at master · eclipse/eclipse-collections&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I set the SIZE of the collections to 100. I changed the TimeUnit to MILLISECONDS, so the measurements are in Operations per Millisecond.&lt;/p&gt;&lt;p&gt;I limited the tests to the following methods.&lt;/p&gt;&lt;pre&gt;@Benchmark&lt;br /&gt;public String serial_lazy_mapToStringJoining_jdk()&lt;br /&gt;{&lt;br /&gt;    // Stream with an ArrayList&amp;lt;Integer&amp;gt; of size 100&lt;br /&gt;    return this.integersJDK.stream()&lt;br /&gt;            .map(Object::toString)&lt;br /&gt;            .collect(Collectors.joining(&quot;,&quot;));&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;@Benchmark&lt;br /&gt;public String serial_lazy_mapToStringJoining_ec()&lt;br /&gt;{&lt;br /&gt;    // Stream with a FastList&amp;lt;Integer&amp;gt; of size 100&lt;br /&gt;    return this.integersEC.stream()&lt;br /&gt;            .map(Object::toString)&lt;br /&gt;            .collect(Collectors.joining(&quot;,&quot;));&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;@Benchmark&lt;br /&gt;public String serial_eager_makeString_ec()&lt;br /&gt;{&lt;br /&gt;    // makeString with a FastList&amp;lt;Integer&amp;gt; of size 100&lt;br /&gt;    return this.integersEC.makeString(&quot;,&quot;);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;@Benchmark&lt;br /&gt;public String serial_eager_primitiveMakeString_ec()&lt;br /&gt;{&lt;br /&gt;    // makeString with IntArrayList of size 100    &lt;br /&gt;    return this.intList.makeString(&quot;,&quot;);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The results were obtained on my MacBook Pro M2 Max on Sonoma 14.4.1 using Azul Zulu JDK 21 and were as follows.&lt;/p&gt;&lt;pre&gt;Benchmark                             Mode  Cnt    Score    Error   Units&lt;br /&gt;serial_eager_makeString_ec           thrpt   20  739.087 ± 17.148  ops/ms&lt;br /&gt;serial_eager_primitiveMakeString_ec  thrpt   20  828.930 ±  5.360  ops/ms&lt;br /&gt;serial_lazy_mapToStringJoining_ec    thrpt   20  433.049 ±  5.491  ops/ms&lt;br /&gt;serial_lazy_mapToStringJoining_jdk   thrpt   20  424.496 ±  7.619  ops/ms&lt;/pre&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*SIvSA2hq3nPmg7w7MmWXjQ.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;The bigger the numbers, the better the performance. I do not personally find these kind of microbenchmark comparisons interesting. All the code examples here are extremely fast, and would only be a bottleneck in a system generating a million calls to these methods per second, or possibly from generating Strings from very large collections. More likely, there will be some other bottleneck in the code.&lt;/p&gt;&lt;p&gt;I prefer makeString because it requires less code and arguably makes the code easier to read. I hope folks would prefer makeString because it takes less code and is more readable, not because makeString is faster in this benchmark run than Collectors.joining(). If anyone finds these isolated microbenchmarks useful and wants to take the time to investigate to understand why the numbers are different, you have the source. Enjoy!&lt;/p&gt;&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this blog we saw how to use several approaches to convert the elements of an Integer array to a delimited String with a prefix and a suffix. The following are the methods we explored.&lt;/p&gt;&lt;p&gt;✅ for loop&lt;br /&gt;✅ Stream.map, collect, and Collectors.joining&lt;br /&gt;✅ String.join&lt;br /&gt;✅ ArrayAdapter.makeString&lt;br /&gt;✅ ArrayIterate.makeString&lt;/p&gt;&lt;p&gt;We then explored converting the Integer array to an int array, and looked at how we can convert that to a delimited String.&lt;/p&gt;&lt;p&gt;✅ MutableIntList.makeString&lt;br /&gt;✅ IntStream.of, boxed and mapToObj&lt;/p&gt;&lt;p&gt;There are nuances to each of these methods. The ArrayIterate approach wound up being the most concise for this particular use case.&lt;/p&gt;&lt;p&gt;Thank you for reading this blog and I hope you find the solutions I shared to this problem informative.&lt;/p&gt;&lt;p&gt;Enjoy!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=7db547c331d0&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/javarevisited/nuanced-string-joining-in-java-7db547c331d0&quot;&gt;Nuanced String Joining in Java&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/javarevisited&quot;&gt;Javarevisited&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Tue, 23 Apr 2024 06:03:47 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Call for Papers: eSAAM 2024</title>
	<guid isPermaLink="false">40158 at https://newsroom.eclipse.org</guid>
	<link>https://newsroom.eclipse.org/news/announcements/call-papers-esaam-2024</link>
	<description>&lt;span&gt;Call for Papers: eSAAM 2024&lt;/span&gt;

&lt;span&gt;&lt;span&gt;Shanda Giacomoni&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-04-22T09:05:00-04:00&quot; title=&quot;Monday, April 22, 2024 - 09:05&quot;&gt;Mon, 2024-04-22 09:05&lt;/time&gt;
&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;Submit your papers for Eclipse SAAM on Data Spaces, a conference that will bring together practitioners and researchers working on innovative software and systems solutions for next-generation mobility. This year the conference is co-located with Open Community Experience and will focus on Security and Privacy, Artificial Intelligence, Architecture, Modelling and related challenges.&lt;/p&gt;&lt;/div&gt;
      
  &lt;div class=&quot;field field--name-field-news-url field--type-link field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;URL&lt;/div&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://www.ocxconf.org/event/2024/websitePage:a42770e9-b32c-418b-8c08-a86d5c57ca61&quot;&gt;https://www.ocxconf.org/event/2024/websitePage:a42770e9-b32c-418b-8c08-a86d5c57â€¦&lt;/a&gt;&lt;/div&gt;
          &lt;/div&gt;</description>
	<pubDate>Mon, 22 Apr 2024 13:05:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Haiku Kata using String transform, Text Blocks, and Switch Expressions</title>
	<guid isPermaLink="false">https://medium.com/p/0397d42033a8</guid>
	<link>https://medium.com/javarevisited/haiku-kata-using-string-transform-text-blocks-and-switch-expressions-0397d42033a8?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;I solved the Haiku Kata again using more features added since Java 12&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*hpeb5Okh00QlEATp&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@jchristian406?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Jordan Christian&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Finding String transform&lt;/h3&gt;&lt;p&gt;I found a method on the Java String class I hadn’t seen before. I discovered it while running the String class through my &lt;a href=&quot;https://medium.com/javarevisited/looking-at-a-java-class-and-its-methods-through-a-kaleidoscope-998b510e39ac?source=friends_link&amp;amp;sk=cb82dfd203d6d6a49f04180344e9dd7a&quot;&gt;Java class kaleidoscope&lt;/a&gt;. There is a method that was added in Java 12 named transform.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*ztDipb6ELiPGlJqx7e5dSQ.png&quot; /&gt;&lt;figcaption&gt;One of the views in my Java class kaleidoscope&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The transform method makes it possible to pass a Function to a String and have any type returned. In Java, the more popular name for this method is map on Stream and Optional.&lt;/p&gt;&lt;p&gt;I couldn’t understand why this method was added to the String class. This is the only method on String that takes a &lt;em&gt;Functional Interface&lt;/em&gt; like Function.&lt;/p&gt;&lt;p&gt;What is the purpose of this method on String?&lt;/p&gt;&lt;p&gt;Instead of scratching my head wondering, I decided to see what I could do with this method.&lt;/p&gt;&lt;h3&gt;Haiku Kata&lt;/h3&gt;&lt;p&gt;I created a kata for a set of eleven Haiku I wrote during a self-enforced writing detox period I went through in September 2021. I turned my haiku into a Java kata and blogged about it &lt;a href=&quot;https://medium.com/javarevisited/haiku-for-java-using-text-blocks-6b7862ccd067?source=friends_link&amp;amp;sk=b52fc20b49e4cd062a85ddc03cf5b385&quot;&gt;here&lt;/a&gt;. José Paumard turned my Haiku Kata into an amazing YouTube tutorial in JEP Café #9.&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/d954992e8ffb899b6ebe8ff504c2facc/href&quot;&gt;https://medium.com/media/d954992e8ffb899b6ebe8ff504c2facc/href&lt;/a&gt;&lt;p&gt;José’s JEP Café #9 is currently one of the Top 10 most popular videos on the Java YouTube channel based on views. Congrats José!&lt;/p&gt;&lt;p&gt;Paul King also implemented the Haiku Kata in Groovy last year.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://groovy.apache.org/blog/groovy-haiku-processing&quot;&gt;Groovy Haiku processing&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The Haiku Kata was intended to be a way for me to experiment with Java’s Text Block feature. Text Blocks were added as a standard feature in Java 15, and were in preview in Java 13 and 14.&lt;/p&gt;&lt;p&gt;In the Haiku Kata, I adapt a String stored as a Text Block into a CharAdapter class from Eclipse Collections. The code I write to do this looks like this.&lt;/p&gt;&lt;pre&gt;CharAdapter chars = Strings.asChars(&quot;Hello!&quot;);&lt;/pre&gt;&lt;p&gt;The equivalent using the Java chars method looks like this.&lt;/p&gt;&lt;pre&gt;IntStream chars = &quot;Hello!&quot;.chars();&lt;/pre&gt;&lt;p&gt;With the new transform method on the String class, it is possible to flip this code.&lt;/p&gt;&lt;pre&gt;CharAdapter chars = &quot;Hello!&quot;.transform(Strings::asChars);&lt;/pre&gt;&lt;p&gt;There is something subtle that happens with this inversion of behavior, other than requiring a few more characters. To see the effect, it helps to have bigger String instances than “Hello!”. This is why I went back to the Haiku Kata to try the transform method.&lt;/p&gt;&lt;h4&gt;Distinct Letters&lt;/h4&gt;&lt;p&gt;One of the first tests to implement in the Haiku Kata is finding the distinct letters in the Tex Block. Using the String transform method, it is possible to inline all of the code to look as follows.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void distinctLettersEclipseCollections()&lt;br /&gt;{&lt;br /&gt;    String distinctLetters = &quot;&quot;&quot;&lt;br /&gt;            Breaking Through                  Pavement                  Wakin' with Bacon        Homeward Found&lt;br /&gt;            ----------------                  --------                  -----------------        --------------&lt;br /&gt;            The wall disappears               Beautiful pavement!       Wakin' with Bacon        House is where I am&lt;br /&gt;            As soon as you break through the  Imperfect path before me  On a Saturday morning    Home is where I want to be&lt;br /&gt;            Intimidation                      Thank you for the ride    Life’s little pleasures  Both may be the same&lt;br /&gt;&lt;br /&gt;            Winter Slip and Slide              Simple Nothings                With Deepest Regrets&lt;br /&gt;            ---------------------              ---------------                --------------------&lt;br /&gt;            Run up the ladder                  A simple flower                With deepest regrets&lt;br /&gt;            Swoosh down the slide in the snow  Petals shine vibrant and pure  That which you have yet to write&lt;br /&gt;            Winter slip and slide              Stares into the void           At death, won't be wrote&lt;br /&gt;&lt;br /&gt;            Caffeinated Coding Rituals  Finding Solace               Curious Cat                Eleven&lt;br /&gt;            --------------------------  --------------               -----------                ------&lt;br /&gt;            I arrange my desk,          Floating marshmallows        I see something move       This is how many&lt;br /&gt;            refactor some ugly code,    Cocoa brewed hot underneath  What it is, I am not sure  Haiku I write before I&lt;br /&gt;            and drink my coffee.        Comfort in a cup             Should I pounce or not?    Write a new tech blog.&lt;br /&gt;            &quot;&quot;&quot;&lt;br /&gt;            .transform(Strings::asChars)&lt;br /&gt;            .select(Character::isAlphabetic)&lt;br /&gt;            .collectChar(Character::toLowerCase)&lt;br /&gt;            .distinct()&lt;br /&gt;            .toString();&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(&quot;breakingthoupvmwcdflsy&quot;, distinctLetters);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The transform method works better here than the original form which would require wrapping the entire text block in a method call to Strings.asChars().&lt;/p&gt;&lt;p&gt;This is what it would have looked like without the transform method.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void distinctLettersEclipseCollectionsWithoutTransform()&lt;br /&gt;{&lt;br /&gt;    String distinctLetters = Strings.asChars(&quot;&quot;&quot;&lt;br /&gt;            Breaking Through                  Pavement                  Wakin' with Bacon        Homeward Found&lt;br /&gt;            ----------------                  --------                  -----------------        --------------&lt;br /&gt;            The wall disappears               Beautiful pavement!       Wakin' with Bacon        House is where I am&lt;br /&gt;            As soon as you break through the  Imperfect path before me  On a Saturday morning    Home is where I want to be&lt;br /&gt;            Intimidation                      Thank you for the ride    Life’s little pleasures  Both may be the same&lt;br /&gt;&lt;br /&gt;            Winter Slip and Slide              Simple Nothings                With Deepest Regrets&lt;br /&gt;            ---------------------              ---------------                --------------------&lt;br /&gt;            Run up the ladder                  A simple flower                With deepest regrets&lt;br /&gt;            Swoosh down the slide in the snow  Petals shine vibrant and pure  That which you have yet to write&lt;br /&gt;            Winter slip and slide              Stares into the void           At death, won't be wrote&lt;br /&gt;&lt;br /&gt;            Caffeinated Coding Rituals  Finding Solace               Curious Cat                Eleven&lt;br /&gt;            --------------------------  --------------               -----------                ------&lt;br /&gt;            I arrange my desk,          Floating marshmallows        I see something move       This is how many&lt;br /&gt;            refactor some ugly code,    Cocoa brewed hot underneath  What it is, I am not sure  Haiku I write before I&lt;br /&gt;            and drink my coffee.        Comfort in a cup             Should I pounce or not?    Write a new tech blog.&lt;br /&gt;            &quot;&quot;&quot;)&lt;br /&gt;            .select(Character::isAlphabetic)&lt;br /&gt;            .collectChar(Character::toLowerCase)&lt;br /&gt;            .distinct()&lt;br /&gt;            .toString();&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(&quot;breakingthoupvmwcdflsy&quot;, distinctLetters);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;It is harder to determine what type the select method is being applied to as you have to scan up to the top of the text block to see the String.asChars( opening.&lt;/p&gt;&lt;h4&gt;Top Three Letters&lt;/h4&gt;&lt;p&gt;The test to find the top three letters in the haiku can be rewritten using a single fluent line of code, by using the Switch Expressions feature of Java to make the test Assertions part of a call to forEachWithindex.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void topLettersEclipseCollections()&lt;br /&gt;{&lt;br /&gt;    &quot;&quot;&quot;&lt;br /&gt;    Breaking Through                  Pavement                  Wakin' with Bacon        Homeward Found&lt;br /&gt;    ----------------                  --------                  -----------------        --------------&lt;br /&gt;    The wall disappears               Beautiful pavement!       Wakin' with Bacon        House is where I am&lt;br /&gt;    As soon as you break through the  Imperfect path before me  On a Saturday morning    Home is where I want to be&lt;br /&gt;    Intimidation                      Thank you for the ride    Life’s little pleasures  Both may be the same&lt;br /&gt;    &lt;br /&gt;    Winter Slip and Slide              Simple Nothings                With Deepest Regrets&lt;br /&gt;    ---------------------              ---------------                --------------------&lt;br /&gt;    Run up the ladder                  A simple flower                With deepest regrets&lt;br /&gt;    Swoosh down the slide in the snow  Petals shine vibrant and pure  That which you have yet to write&lt;br /&gt;    Winter slip and slide              Stares into the void           At death, won't be wrote&lt;br /&gt;    &lt;br /&gt;    Caffeinated Coding Rituals  Finding Solace               Curious Cat                Eleven&lt;br /&gt;    --------------------------  --------------               -----------                ------&lt;br /&gt;    I arrange my desk,          Floating marshmallows        I see something move       This is how many&lt;br /&gt;    refactor some ugly code,    Cocoa brewed hot underneath  What it is, I am not sure  Haiku I write before I&lt;br /&gt;    and drink my coffee.        Comfort in a cup             Should I pounce or not?    Write a new tech blog.&lt;br /&gt;    &quot;&quot;&quot;&lt;br /&gt;    .transform(Strings::asChars)&lt;br /&gt;    .select(Character::isAlphabetic)&lt;br /&gt;    .collectChar(Character::toLowerCase)&lt;br /&gt;    .toBag()&lt;br /&gt;    .topOccurrences(3)&lt;br /&gt;    .forEachWithIndex((each, index) -&amp;gt; Assertions.assertEquals(switch (index)&lt;br /&gt;    {&lt;br /&gt;        case 0 -&amp;gt; PrimitiveTuples.pair('e', 94);&lt;br /&gt;        case 1 -&amp;gt; PrimitiveTuples.pair('t', 65);&lt;br /&gt;        case 2 -&amp;gt; PrimitiveTuples.pair('i', 62);&lt;br /&gt;        default -&amp;gt; null;&lt;br /&gt;    }, index &amp;lt; 3 ? each : null));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The method forEachWithIndex is one of the lesser known methods available in Eclipse Collections. The equivalent Assertion code before required calling Assertions.assertEquals three separate times with an indexed lookup into the resulting ListIterable returned from topOccurrences.&lt;/p&gt;&lt;h4&gt;Duplicates and Uniques&lt;/h4&gt;&lt;p&gt;There wasn’t much to change in the duplicates and uniques code, other than inlining Text Block in the test and using the String transform method.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void duplicatesAndUniqueEclipseCollections()&lt;br /&gt;{&lt;br /&gt;    MutableCharBag chars = &quot;&quot;&quot;&lt;br /&gt;            Breaking Through                  Pavement                  Wakin' with Bacon        Homeward Found&lt;br /&gt;            ----------------                  --------                  -----------------        --------------&lt;br /&gt;            The wall disappears               Beautiful pavement!       Wakin' with Bacon        House is where I am&lt;br /&gt;            As soon as you break through the  Imperfect path before me  On a Saturday morning    Home is where I want to be&lt;br /&gt;            Intimidation                      Thank you for the ride    Life’s little pleasures  Both may be the same&lt;br /&gt;&lt;br /&gt;            Winter Slip and Slide              Simple Nothings                With Deepest Regrets&lt;br /&gt;            ---------------------              ---------------                --------------------&lt;br /&gt;            Run up the ladder                  A simple flower                With deepest regrets&lt;br /&gt;            Swoosh down the slide in the snow  Petals shine vibrant and pure  That which you have yet to write&lt;br /&gt;            Winter slip and slide              Stares into the void           At death, won't be wrote&lt;br /&gt;&lt;br /&gt;            Caffeinated Coding Rituals  Finding Solace               Curious Cat                Eleven&lt;br /&gt;            --------------------------  --------------               -----------                ------&lt;br /&gt;            I arrange my desk,          Floating marshmallows        I see something move       This is how many&lt;br /&gt;            refactor some ugly code,    Cocoa brewed hot underneath  What it is, I am not sure  Haiku I write before I&lt;br /&gt;            and drink my coffee.        Comfort in a cup             Should I pounce or not?    Write a new tech blog.&lt;br /&gt;            &quot;&quot;&quot;&lt;br /&gt;            .transform(Strings::asChars)&lt;br /&gt;            .select(Character::isAlphabetic)&lt;br /&gt;            .collectChar(Character::toLowerCase)&lt;br /&gt;            .toBag();&lt;br /&gt;&lt;br /&gt;    CharBag duplicates = chars.selectDuplicates();&lt;br /&gt;    CharSet unique = chars.selectUnique();&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(chars, duplicates);&lt;br /&gt;    Assertions.assertEquals(CharSets.immutable.empty(), unique);&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Final Thoughts&lt;/h3&gt;&lt;p&gt;I can’t tell yet if the String transform method has interesting uses that I haven’t thought of yet, but I was happy to see how it worked with the the Haiku Kata. In the original version of the kata, I stored the text block into a field called haiku so as to keep the huge text block out of the methods, taking away from the method calls. The transform method created a nice separation and progression between the inlined String Text Block and the transformation code that found the distinct, top three, duplicate and unique characters.&lt;/p&gt;&lt;p&gt;Thanks for reading, and I hope you enjoyed learning about my recent discovery of the String transform method.&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=0397d42033a8&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/javarevisited/haiku-kata-using-string-transform-text-blocks-and-switch-expressions-0397d42033a8&quot;&gt;Haiku Kata using String transform, Text Blocks, and Switch Expressions&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/javarevisited&quot;&gt;Javarevisited&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Fri, 19 Apr 2024 15:44:45 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: The Eclipse Foundation Unveils Open Community Experience (OCX), Europe’s Premier Event for Open Source Innovation</title>
	<guid isPermaLink="false">40155 at https://newsroom.eclipse.org</guid>
	<link>https://newsroom.eclipse.org/news/announcements/eclipse-foundation-unveils-open-community-experience-ocx-europe%E2%80%99s-premier-event</link>
	<description>&lt;span&gt;The Eclipse Foundation Unveils Open Community Experience (OCX), Europe’s Premier Event for Open Source Innovation&lt;/span&gt;

&lt;span&gt;&lt;span&gt;Jacob Harris&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-04-18T07:00:00-04:00&quot; title=&quot;Thursday, April 18, 2024 - 07:00&quot;&gt;Thu, 2024-04-18 07:00&lt;/time&gt;
&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;BRUSSELS – 18 April 2024 – &lt;/strong&gt;The Eclipse Foundation, one of the world’s largest open source foundations, is proud to announce the launch of &lt;a href=&quot;http://www.ocxconf.org/2024&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Open Community Experience (OCX)&lt;/u&gt;&lt;/a&gt;, a transformative open source developer conference set to take place 22-24 October 2024 in Mainz, Germany. This inaugural event will be a catalyst for open collaboration and innovation, covering a diverse range of community-curated open source topics, including automotive &amp;amp; mobility, embedded IoT &amp;amp; edge, cloud native Java, languages and runtimes, supply chain security, dataspaces, and open source software development best practices. &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;“As our communities have continued to grow and thrive, it became clear that we needed to create a new event that matched the momentum behind our growing ecosystem, as well as the diversity of its interests and collaborations,” said Mike Milinkovich, executive director of the Eclipse Foundation. “OCX has been built to serve as the premier event in Europe for developers and technology leaders worldwide engaged in open source ecosystems to meet, share ideas and experiences, and learn from each other.”&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Set in the historic city of Mainz, Germany, near Frankfurt, OCX will offer an array of tracks covering Eclipse projects and a wide range of topics relevant to open source developers and practitioners. In addition to the main conference tracks, OCX will also host three multi-day, collocated events, each dedicated to specific communities: Open Community for Automotive, Open Community for Java, and EclipseCon. &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;The planned lineup includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;OCX Main Tracks&lt;/strong&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;Embedded, IoT &amp;amp; Edge&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Languages &amp;amp; Runtimes&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;OSS Supply Chain Security&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;Open Collaboration Best Practices&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Open Community for Automotive:&lt;/strong&gt; dedicated to automotive software, software defined vehicles, and mobility. &lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Open Community for Java:&lt;/strong&gt; focusing on topics related to Jakarta EE, Adoptium, MicroProfile, open source enterprise Java, and more.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;EclipseCon&lt;/strong&gt;: the centre of gravity for all topics related to the Eclipse IDE platform and next-generation cloud-based development tools. &lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;ltr&quot;&gt;In addition to the collocated three-day events, the program will feature specialised sessions and one day gatherings like the Eclipse Security, Artificial Intelligence, Architecture, and Modelling Conference (&lt;a href=&quot;https://www.ocxconf.org/event/778b82cc-6834-48a4-a58e-f883c5a7b8c9/websitePage:a42770e9-b32c-418b-8c08-a86d5c57ca61&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;eSAAM&lt;/u&gt;&lt;/a&gt;) on 22 October 2024, which will spotlight innovative software and solutions for data spaces.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;OCX offers the ideal opportunity to engage with developers, executives, and evangelists shaping today’s most advanced open technologies. Whether you aim to showcase your own solutions, expand your organisation’s role in the developer ecosystem, or connect with potential partners for new opportunities, OCX is Europe's premier venue for developer innovation. We are now actively seeking contributions from sponsors, members, potential speakers, and more. Join us in shaping the future of open source collaboration at OCX!&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;OCX is made possible with the generous support of our sponsors, and we extend our sincere gratitude to each of them. A special acknowledgement goes to Huawei, our first Diamond-level sponsor, whose support sets a high standard for excellence. We also appreciate the early sponsorship commitment from EclipseSource, Lunatech, Obeo, Scanoss, and Typefox. Your contributions make OCX a reality and greatly enhance the experience for all attendees&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We encourage all companies in the Eclipse ecosystem, particularly our Strategic members, to consider sponsoring our flagship conference. This is a unique opportunity to build your brand and directly engage a highly qualified developer audience focused explicitly on the open source technologies that drive your business. &lt;a href=&quot;https://custom-eur.cvent.com/2ac5396347b34ca6bedd995a5179b7c7/files/event/778b82cc683448a4a58ef883c5a7b8c9/9919032ad18f474ba1c81cfd82623b16.pdf&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Sponsor packages&lt;/u&gt;&lt;/a&gt; include multiple event passes, making it easy for your developers to join the many conversations to be had at this unique confluence of forward-thinking technologists. Explore sponsorship opportunities by reaching out to &lt;a href=&quot;mailto:sponsors@OCXconf.org&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;sponsors@OCXconf.org&lt;/u&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;For more details on OCX and how you can sponsor and participate, visit &lt;a href=&quot;http://www.ocxconf.org/2024&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;the OCX website&lt;/u&gt;&lt;/a&gt;. If you would like to submit a talk for consideration, the &lt;a href=&quot;https://www.ocxconf.org/event/778b82cc-6834-48a4-a58e-f883c5a7b8c9/websitePage:77320887-9b93-4211-8865-637a602eb991&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Call for Proposals&lt;/u&gt;&lt;/a&gt; is now open, with an early bird deadline of 31 May 2024. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;About the Eclipse Foundation&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;The Eclipse Foundation provides our global community of individuals and organisations with a business-friendly environment for open source software collaboration and innovation. We host the Eclipse IDE, Adoptium, Software Defined Vehicle, Jakarta EE, and over 415 open source projects, including runtimes, tools, specifications, and frameworks for cloud and edge applications, IoT, AI, automotive, systems engineering, open processor designs, and many others. Headquartered in Brussels, Belgium, the Eclipse Foundation is an international non-profit association supported by over 360 members. Visit us at this year’s &lt;a href=&quot;http://www.ocxconf.org/2024&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Open Community Experience (OCX)&lt;/u&gt;&lt;/a&gt; conference on 22-24 October 2024 in Mainz, Germany. To learn more, follow us on social media &lt;a href=&quot;https://twitter.com/EclipseFdn&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;@EclipseFdn&lt;/u&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/company/34093/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;LinkedIn&lt;/u&gt;&lt;/a&gt;, or visit &lt;a href=&quot;http://eclipse.org&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;eclipse.org&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Third-party trademarks mentioned are the property of their respective owners.&lt;/p&gt;
&lt;p class=&quot;text-align-center&quot; dir=&quot;ltr&quot;&gt;###&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Media contacts:&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;u&gt;Schwartz Public Relations for the Eclipse Foundation, AISBL (Germany)&lt;/u&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Gloria Huppert/Julia Rauch&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Sendlinger Straße 42A&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;80331 Munich&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:EclipseFoundation@schwartzpr.de&quot; rel=&quot;nofollow&quot;&gt;EclipseFoundation@schwartzpr.de&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;+49 (89) 211 871 -70/-43&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;u&gt;Nichols Communications for the Eclipse Foundation, AISBL&lt;/u&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Jay Nichols&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:jay@nicholscomm.com&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;jay@nicholscomm.com&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;+1 408-772-1551&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;u&gt;514 Media Ltd for the Eclipse Foundation, AISBL (France, Italy, Spain)&lt;/u&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Benoit Simoneau&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:benoit@514-media.com&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;benoit@514-media.com&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;M: +44 (0) 7891 920 370&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 18 Apr 2024 11:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: OCX Call for Proposals Now Open!</title>
	<guid isPermaLink="false">40161 at https://newsroom.eclipse.org</guid>
	<link>https://newsroom.eclipse.org/news/announcements/ocx-call-proposals-now-open</link>
	<description>&lt;span&gt;OCX Call for Proposals Now Open!&lt;/span&gt;

&lt;span&gt;&lt;span&gt;Shanda Giacomoni&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-04-17T12:03:36-04:00&quot; title=&quot;Wednesday, April 17, 2024 - 12:03&quot;&gt;Wed, 2024-04-17 12:03&lt;/time&gt;
&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;Do you have insights, experiences, or innovations to share? We're currently accepting submissions for our new Open Community Experience (OCX) conference and it's collocated events. Submit your proposal now and be part of shaping the OCX 2024 agenda.&lt;/p&gt;&lt;/div&gt;
      
  &lt;div class=&quot;field field--name-field-news-url field--type-link field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;URL&lt;/div&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://www.ocxconf.org/event/2024/websitePage:77320887-9b93-4211-8865-637a602eb991&quot;&gt;https://www.ocxconf.org/event/2024/websitePage:77320887-9b93-4211-8865-637a602eâ€¦&lt;/a&gt;&lt;/div&gt;
          &lt;/div&gt;</description>
	<pubDate>Wed, 17 Apr 2024 16:03:36 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Enhancing Modeling Tools with AI: A Leap Towards Smarter Diagrams with Eclipse GLSP</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/04/12/enhancing-modeling-tools-with-ai-a-leap-towards-smarter-diagrams-with-eclipse-glsp/</guid>
	<link>https://eclipsesource.com/blogs/2024/04/12/enhancing-modeling-tools-with-ai-a-leap-towards-smarter-diagrams-with-eclipse-glsp/</link>
	<description>&lt;p&gt;The integration of Artificial Intelligence (AI) with IDEs, as exemplified by tools like Github Copilot, Codeium, Tabine, ChatGPT and more, has opened new horizons in software development. It is â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/04/12/enhancing-modeling-tools-with-ai-a-leap-towards-smarter-diagrams-with-eclipse-glsp/&quot; rel=&quot;nofollow&quot;&gt; Enhancing Modeling Tools with AI: A Leap Towards Smarter Diagrams with Eclipse GLSP&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Fri, 12 Apr 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Clark Roundy: OCX 2024: Celebrating Community, Code and Collaboration</title>
	<guid isPermaLink="false">7593 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/clark-roundy/ocx-2024-celebrating-community-code-and-collaboration</link>
	<description>&lt;span&gt;OCX 2024: Celebrating Community, Code and Collaboration&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;TL;DR - Don't miss the opportunity to participate in Open Community Experience 2024, a new conference for our vibrant community of communities.&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;At the Eclipse Foundation, our ethos is anchored in three pivotal Cs: Community, Code, and Collaboration. These principles are so integral to our mission that when we re-envisioned our flagship event for 2024, we aimed to include these themes. As a code-first community, we initially introduced our revamped event as the Open Code Experience (OCX). However, after careful reflection and, in full disclosure, due to some potential concerns related to trademark considerations, we embraced a name that truly resonates with our core mission: the &lt;/span&gt;&lt;a href=&quot;http://www.ocxconf.org/2024&quot;&gt;&lt;strong&gt;Open Community Experience&lt;/strong&gt;&lt;span&gt;.&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Communities are at the core of the Eclipse Foundation. OCX 2024 will showcase a diverse range of excellent content across multiple tracks from the Eclipse ecosystem. In addition to the main conference tracks, OCX will also host three multi-day, collocated events, each dedicated to specific communities: Open Community for Automotive, Open Community for Java, and EclipseCon. &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Our program committees are currently hard at work building an outstanding program, but here's a glimpse of what to expect:&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Main OCX Tracks: &lt;/strong&gt;&lt;span&gt;Content covering embedded systems, IoT and edge computing, programming languages and runtimes, security, trusted data sharing, and open source best practices. &lt;/span&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Open Community for Automotive:&lt;/strong&gt;&lt;span&gt; Focused on innovations in automotive software, software-defined vehicles, and mobility domains.&lt;/span&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Open Community for Java: &lt;/strong&gt;&lt;span&gt;A deep dive into the open source enterprise Java ecosystem, featuring content related to Jakarta EE, Adoptium, MicroProfile, and much more.&lt;/span&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;EclipseCon: &lt;/strong&gt;&lt;span&gt;Reinvented as the nexus for all talks related to the Eclipse IDE platform and the evolving landscape of development tools.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;In addition to the collocated multi-day events, the program will feature specialised sessions and one day gatherings like the Eclipse Security, Artificial Intelligence, Architecture, and Modelling Conference (&lt;/span&gt;&lt;a href=&quot;https://www.ocxconf.org/event/778b82cc-6834-48a4-a58e-f883c5a7b8c9/websitePage:a42770e9-b32c-418b-8c08-a86d5c57ca61&quot;&gt;&lt;span&gt;eSAAM&lt;/span&gt;&lt;/a&gt;&lt;span&gt;), which will spotlight innovative software and solutions for data spaces.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;OCX is made possible with the generous support of our sponsors, and we extend our sincere gratitude to each of them. A special acknowledgement goes to Huawei, our first Diamond-level sponsor, whose support sets a high standard for excellence. We also appreciate the early sponsorship commitments from EclipseSource, Lunatech, Obeo, Scanoss, and Typefox. Your contributions make OCX a reality and greatly enhance the experience for all attendees.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;We encourage all companies in the Eclipse ecosystem, particularly our Strategic members, to consider sponsoring our flagship conference. This is a unique opportunity to build your brand and directly engage a highly qualified developer audience focused explicitly on the open source technologies that drive your business. &lt;/span&gt;&lt;a href=&quot;https://custom-eur.cvent.com/2ac5396347b34ca6bedd995a5179b7c7/files/event/778b82cc683448a4a58ef883c5a7b8c9/9919032ad18f474ba1c81cfd82623b16.pdf&quot;&gt;&lt;span&gt;Sponsor packages&lt;/span&gt;&lt;/a&gt;&lt;span&gt; include multiple event passes, making it easy for your developers to join the many conversations to be had at this unique confluence of forward-thinking technologists. Explore sponsorship opportunities by reaching out to &lt;/span&gt;&lt;a href=&quot;mailto:sponsors@OCXconf.org&quot;&gt;&lt;span&gt;sponsors@OCXconf.org&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;OCX isn't just an event â€” it's a celebration of community-driven collaboration and open source innovation. We invite you to join us on this exciting journey. For more details on OCX and how you can sponsor and participate, visit the &lt;/span&gt;&lt;a href=&quot;http://www.ocxconf.org/2024&quot;&gt;&lt;span&gt;OCX website&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. And, be sure to mark your calendars for the &lt;/span&gt;&lt;a href=&quot;https://www.ocxconf.org/event/778b82cc-6834-48a4-a58e-f883c5a7b8c9/websitePage:77320887-9b93-4211-8865-637a602eb991&quot;&gt;&lt;span&gt;Call for Proposals&lt;/span&gt;&lt;/a&gt;&lt;span&gt; opening on &lt;/span&gt;&lt;strong&gt;April 15&lt;/strong&gt;&lt;span&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Stay tuned for more exciting news and announcements in the coming weeks!&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;Clark Roundy&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-04-11T14:25:44-04:00&quot; title=&quot;Thursday, April 11, 2024 - 14:25&quot;&gt;Thu, 2024-04-11 14:25&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Thu, 11 Apr 2024 18:25:44 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse Theia 1.48 Release: News and Noteworthy</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/04/09/eclipse-theia-1-47-release-news-and-noteworthy/</guid>
	<link>https://eclipsesource.com/blogs/2024/04/09/eclipse-theia-1-47-release-news-and-noteworthy/</link>
	<description>&lt;p&gt;We are happy to announce the Eclipse Theia 1.48 release! The release contains 53 merged pull requests and we welcome two new contributors. In this article we will highlight some selected improvements â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/04/09/eclipse-theia-1-47-release-news-and-noteworthy/&quot; rel=&quot;nofollow&quot;&gt; Eclipse Theia 1.48 Release: News and Noteworthy&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Looking at a Java Class and its Methods Through a Kaleidoscope</title>
	<guid isPermaLink="false">https://medium.com/p/998b510e39ac</guid>
	<link>https://medium.com/javarevisited/looking-at-a-java-class-and-its-methods-through-a-kaleidoscope-998b510e39ac?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Exploring the Java Stream methods from multiple perspectives&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*C_rqHouu8bgeqnaW&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@theshubhamdhage?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Shubham Dhage&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Six Views of a Java Class&lt;/h3&gt;&lt;p&gt;I have been exploring different ways of understanding the methods of large Java classes. I don’t mean large in terms of lines of code, but large in terms of number of methods. Feature-rich interfaces, sometimes referred to as humane interfaces, are not incredibly humane when you need to find a method, if you don’t know the name, or discover patterns and look for symmetry between types. Thankfully, we have computers to help us process large amounts of data very quickly. Class and Method declarations are an easily accessible treasure trove of information about libraries and applications that Java developers have at their fingertips. Unfortunately, beyond good old Javadoc we don’t have many ways to make them talk.&lt;/p&gt;&lt;p&gt;I’ve created some basic documentation tools for increasing my own understanding of the feature-rich API of &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;. Of course, I use Eclipse Collections to help me understand Eclipse Collections. The tools I am creating allow me to understand any Java Class and its Method instances, not just Eclipse Collections classes. One might consider the tools I have been experimenting with as a kind of Javadoc++. I am writing this blog in the hopes it might confirm or deny the usefulness of some of these class/method views.&lt;/p&gt;&lt;p&gt;I’m also hoping this blog will bring more attention and interest to a user-defined method grouping feature that is missing in Java, that I learned from Smalltalk, and is known as &lt;em&gt;Method Categories&lt;/em&gt;. Imagine being able to optionally tag each Method in a Java Class with something like methodCategory=”filtering” or methodCategory=”transforming” and then having JavaDoc, IDEs, and developers able to query this information through the Method interface. I digress. Back to the views and groupings that I was able to create without any new Java features.&lt;/p&gt;&lt;p&gt;I have created five AsciiDoc generated views of a class and its methods to help me understand how the methods on the class are organized and if any interesting patterns exist. These views can help me understand class scope, naming patterns and any symmetry/asymmetry that might exist.&lt;/p&gt;&lt;p&gt;The six views of a Java class we will see in this blog are as follows:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/feed/@donraab#c2b7&quot;&gt;Javadoc&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/feed/@donraab#8a50&quot;&gt;Methods by First Letter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/feed/@donraab#c91d&quot;&gt;Methods by Prefix&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/feed/@donraab#e49c&quot;&gt;Methods by Suffix&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/feed/@donraab#8f34&quot;&gt;Methods by Return Type&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/feed/@donraab#3402&quot;&gt;Methods by Functional Interface Parameter Types&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For views two through six, I used &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; to group and count methods by different attributes based on the Class and Method types in Java.&lt;/p&gt;&lt;p&gt;There is no user-defined grouping mechanism for Java methods today, which would be the equivalent of method categories in Smalltalk. I used the available metadata about a Method to build groupings of methods to create these additional views of methods using generated AsciiDoc. I hosted the generated AsciiDoc for the Java Stream class in gists. I linked to the gists below and used GitHub’s ability to render AsciiDoc to have decent looking tables displayed inline.&lt;/p&gt;&lt;p&gt;Enjoy the following views of the Java Stream class and its methods!&lt;/p&gt;&lt;h3&gt;Six Views of Java Stream&lt;/h3&gt;&lt;p&gt;We will explore the six views of a Java class using Java Stream as an example.&lt;/p&gt;&lt;h4&gt;1. Javadoc&lt;/h4&gt;&lt;p&gt;The first view of Stream we can find online is the Javadoc for the class.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/stream/Stream.html&quot;&gt;Stream (Java SE 21 &amp;amp; JDK 21)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The Javadoc view shows us all the documentation about the class, and organizes a method summary with all methods listed in alphabetical order. While this may be suitable for some purposes, it does not help us find patterns in the methods, because there is only a flat view without any particular grouping. We can filter methods by &lt;em&gt;static methods&lt;/em&gt;, &lt;em&gt;instance methods&lt;/em&gt;, &lt;em&gt;abstract methods&lt;/em&gt;, and &lt;em&gt;default methods&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;We can use the useful search widget in the top right corner to find things. There is also an interesting “Use” tab that can show us the places in the JDK where Java Stream is used.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/stream/class-use/Stream.html&quot;&gt;Uses of Interface java.util.stream.Stream (Java SE 21 &amp;amp; JDK 21)&lt;/a&gt;&lt;/p&gt;&lt;h4&gt;2. Stream Methods by First Letter&lt;/h4&gt;&lt;p&gt;This is the simplest view of methods on a class. I use Eclipse Collections to group all of the methods of the Stream class by their first letter, and sort them by the most frequent first letter to the least frequent.&lt;/p&gt;&lt;p&gt;In each letter, the methods are sorted alphabetically. The benefit of this view is the method compression. In the Javadoc view for Stream, you have to scroll to see all of the methods. With this view, there is no scrolling on either my 27 inch monitor or laptop screen.&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/49b7a53df8af7eb8c79e3bd6df9420da/href&quot;&gt;https://medium.com/media/49b7a53df8af7eb8c79e3bd6df9420da/href&lt;/a&gt;&lt;h4&gt;3. Stream Methods by Prefix&lt;/h4&gt;&lt;p&gt;This view is slightly more interesting than grouping by first letter. Here we group the methods by any prefix they might have like “map” or “for”. The prefix is determined by the split between the initial lowercase letters in the method and the first uppercase letter. Methods with no prefix, or having all lowercase letters, show up in a category of “No Prefix”. This category shows up first because the table is sorted by the most frequent prefix to the least frequent prefix. Prefix does grouping/screen space compression &lt;em&gt;and&lt;/em&gt; also serves as a rough approximation of categories for a majority of methods.&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/7d4b7898ae0bfafd1acff19efa0199ec/href&quot;&gt;https://medium.com/media/7d4b7898ae0bfafd1acff19efa0199ec/href&lt;/a&gt;&lt;h4&gt;4. Stream Methods by Suffix&lt;/h4&gt;&lt;p&gt;This view is an interesting variation on the grouping by prefix. Here we group the methods by any suffix they might have like “int” or “match”. The suffix is determined by the split between the last uppercase letter and the remaining lowercase letters in the method. Methods with no suffix, or having all lowercase letters, show up in a category of “No Suffix”. This category shows up first because the table is sorted by the most frequent suffix to the least frequent suffix.&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/47cbdbd4061946f918b7585c32da8c80/href&quot;&gt;https://medium.com/media/47cbdbd4061946f918b7585c32da8c80/href&lt;/a&gt;&lt;h4&gt;5. Stream Methods by Return Type&lt;/h4&gt;&lt;p&gt;In this view, which has methods grouped by their return types, we get to see a bit more information about each method. We can see the methods with their parameter types. This necessarily takes up a bit more screen real estate, but the extra information is potentially useful. The table is sorted by most frequent return type to least frequent return type. As we can see, Stream is the most frequent return type from Stream, which means there are a decent number of &lt;em&gt;lazy&lt;/em&gt; methods on the Stream interface. There are also four BaseStream methods and nine primitive stream (IntStream, LongStream, DoubleStream) methods which are also &lt;em&gt;lazy&lt;/em&gt;.&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/61700f8d2181d268db2a848bc067e5b1/href&quot;&gt;https://medium.com/media/61700f8d2181d268db2a848bc067e5b1/href&lt;/a&gt;&lt;h4&gt;6. Stream Methods by Functional Interface Parameter Types&lt;/h4&gt;&lt;p&gt;This was the most complicated of the views to produce. In this view, we can see the methods, with their number of parameters as an emoji, grouped by each of the parameter types the methods take. The methods are filtered to only include parameter types that are Functional Interfaces (e.g. Predicate, Function, Consumer). This view tells us which methods are lambda ready, and which Functional Interface has the most methods with it as a parameter type. The parameter number was included here, because as we can see on the BinaryOperator row in the table, there are three overloaded versions of reduce.&lt;/p&gt;&lt;p&gt;This view can quickly answer questions like “Where can I use a Predicate with a Stream?” or “Where can I use a Function with a Stream?”&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/1b5873c26da2b9dc28168c48a44f861c/href&quot;&gt;https://medium.com/media/1b5873c26da2b9dc28168c48a44f861c/href&lt;/a&gt;&lt;h4&gt;Comparing Stream and RichIterable Lambda Enabled Methods&lt;/h4&gt;&lt;p&gt;The sixth view of the Stream interface methods allowed me to compare how lambda ready Stream is compared to the RichIterable interface from &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;, based on the number of methods that accept the four most well known Functional Interfaces as parameters.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*CjxufxMVuAR73dN3JTYkfQ.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Consumer is quoted in the above chart as the equivalent type in Eclipse Collections is named Procedure.&lt;/p&gt;&lt;p&gt;If you feel like there are some useful methods missing in Stream, you might be able to find them in RichIterable. The detailed view of RichIterable Methods by Functional Interface Parameter Types can be seen below.&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/2d7fa8c9d57e26186324a3f382e60fd8/href&quot;&gt;https://medium.com/media/2d7fa8c9d57e26186324a3f382e60fd8/href&lt;/a&gt;&lt;h3&gt;Final Thoughts&lt;/h3&gt;&lt;p&gt;Sometimes it’s helpful to build tools to help us augment our understanding of the Java classes and methods we use. Java gives us the capability to query Classes and Methods for a lot of useful information in code. Looking for everything in files can necessitate a lot of scrolling and testing of our memory. Information chunking is extremely helpful for humans. Grouping and Filtering are great options for aiding information chunking.&lt;/p&gt;&lt;p&gt;This is the first time I have used AsciiDoc in a gist included in a Medium blog. I was pleasantly surprised by the automatic rendering of the AsciiDoc tables by GitHub. Now that I know this is possible, I may use AsciiDoc tables in gists instead of screen captures for tables in the future.&lt;/p&gt;&lt;p&gt;I hope you found this blog and the five AsciiDoc generated Class/Method views of the Stream class in Java useful. Please share this blog with others who you think may benefit from learning more about the method naming and organization on the Java Stream class!&lt;/p&gt;&lt;p&gt;Enjoy!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=998b510e39ac&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/javarevisited/looking-at-a-java-class-and-its-methods-through-a-kaleidoscope-998b510e39ac&quot;&gt;Looking at a Java Class and its Methods Through a Kaleidoscope&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/javarevisited&quot;&gt;Javarevisited&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Sat, 06 Apr 2024 18:44:24 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: The Eclipse Foundation to Highlight Open Innovation at embedded world 2024</title>
	<guid isPermaLink="false">40104 at https://newsroom.eclipse.org</guid>
	<link>https://newsroom.eclipse.org/news/announcements/eclipse-foundation-highlight-open-innovation-embedded-world-2024</link>
	<description>&lt;span&gt;The Eclipse Foundation to Highlight Open Innovation at embedded world 2024&lt;/span&gt;

&lt;span&gt;&lt;span&gt;Jacob Harris&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-04-04T07:00:00-04:00&quot; title=&quot;Thursday, April 4, 2024 - 07:00&quot;&gt;Thu, 2024-04-04 07:00&lt;/time&gt;
&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;BRUSSELS – 4 April 2024 – &lt;/strong&gt;The Eclipse Foundation, one of the world’s largest open source foundations, is set to unveil its latest open source innovations at this year’s embedded world Exhibition &amp;amp; Conference, taking place in Nuremberg from 9-11 April 2024. The foundation will be presenting talks on multiple embedded topics, while also highlighting new open source technologies, including a safety-certified real-time operating system (RTOS), industrial grade RISC-V CPU IP, and Software-Defined Vehicle (SDV) innovations. &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;“Embedded computing, the bedrock of today’s digital economy, thrives on open source technologies,” said Mike Milinkovich, executive director of the Eclipse Foundation. “The Eclipse Foundation is experiencing remarkable growth across various aspects of embedded innovation, spanning IoT, edge computing, and our Software Defined Vehicle initiatives. We’re particularly excited to showcase the first release of Eclipse ThreadX at this year’s Embedded World.”&lt;/p&gt;
&lt;h2&gt;The First Release of Eclipse ThreadX&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://threadx.io/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Eclipse ThreadX&lt;/u&gt;&lt;/a&gt;, formerly Azure RTOS, is the world's first open source, safety-certified real-time operating system (RTOS). ThreadX is a new addition to the world of open source, having recently become a project at the Eclipse Foundation after its transition from Microsoft. embedded world 2024 serves as the launchpad for the debut release of ThreadX under the stewardship of the Eclipse Foundation. Eclipse ThreadX v6.4.1 is available under the permissive MIT licence. You can download it and its subcomponents &lt;a href=&quot;https://github.com/eclipse-threadx&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;from GitHub&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Innovation for Software-Defined Vehicles &lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;The &lt;a href=&quot;https://sdv.eclipse.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Eclipse SDV&lt;/u&gt;&lt;/a&gt; team will showcase groundbreaking business use cases with SDV Blueprints, spotlighting advancements in insurance, fleet management, and software orchestration. These initiatives represent a collaborative effort across more than 20 automotive open source projects, highlighting a collective effort to push the boundaries of software-defined vehicles.&lt;/p&gt;
&lt;h2&gt;Industrial-Grade, Open Source RISC-V CPU Technology&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;The &lt;a href=&quot;https://www.openhwgroup.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;OpenHW Group&lt;/u&gt;&lt;/a&gt; will be demonstrating its latest cores based on RISC-V open source technology. The CVA6, CVE4, and CVE2 cores exemplify the pinnacle of open source innovation and adoption in the embedded industry.&lt;/p&gt;
&lt;h2&gt;Cutting-Edge Research and New Open Source Projects &lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;The &lt;a href=&quot;https://www.eclipse.org/research/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Eclipse Research&lt;/u&gt;&lt;/a&gt; team will unveil four new projects that are advancing the future of technology:&lt;/p&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://he-codeco.eu/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;CODECO&lt;/u&gt;&lt;/a&gt;, a cognitive, cross-layer, and highly adaptive Edge-Cloud management framework&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://tristan-project.eu/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;TRISTAN&lt;/u&gt;&lt;/a&gt;, an industrialisation of the European RISC-V ecosystem that is capable of competing with existing commercial alternatives&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://transact-ecsel.eu/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;TRANSACT&lt;/u&gt;&lt;/a&gt;, a universal, distributed solution architecture for the transformation of security-critical cyber-physical systems&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://nephele-project.eu/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;NEPHELE&lt;/u&gt;&lt;/a&gt;, a reliable and secure end-to-end orchestration of hyper-distributed applications on a programmable infrastructure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Advancing European Technology Leadership with Eclipse Aidge&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;With the backing of &lt;a href=&quot;https://list.cea.fr/en/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;CEA List&lt;/u&gt;&lt;/a&gt;, the &lt;a href=&quot;https://projects.eclipse.org/projects/technology.aidge&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Eclipse Aidge&lt;/u&gt;&lt;/a&gt; project stands out as a testament to European and French technological leadership. It embodies the successful transition from academic research to real-world applications, showcasing the symbiotic relationship between academia and embedded industry. Connect with the CEA List team to learn more about Eclipse Aidge. &lt;/p&gt;
&lt;h2&gt;Get to Know Our Community&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;Discover the diverse Eclipse Foundation ecosystem catering to the IoT, edge, and embedded industries. Representatives from key Eclipse communities such as &lt;a href=&quot;https://iot.eclipse.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Eclipse IoT&lt;/u&gt;&lt;/a&gt;, &lt;a href=&quot;https://sparkplug.eclipse.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Sparkplug&lt;/u&gt;&lt;/a&gt;, and &lt;a href=&quot;https://oniroproject.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Oniro&lt;/u&gt;&lt;/a&gt; will all be available to engage with you. &lt;/p&gt;
&lt;h2&gt;Must-Attend Technical Talks&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;Eclipse Foundation experts will have a strong presence at this year’s embedded world, including two specific presentations that anyone interested in open source technologies will not want to miss: &lt;/p&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Frédéric Desbiens:&lt;/strong&gt; Open Source Software and Lifecycle Standards – Yes: It Can Be Done (Tuesday, April 9, 11:30 AM - 12:00 PM, NCC Ost, Session 6.1)&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Frédéric Desbiens:&lt;/strong&gt; The State of Open Source Real-Time Operating Systems (Wednesday, April 10, 11:00 AM - 11:30 AM, NCC Ost, Session 3.4)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Join Us at Booth 4-554, Hall 4:&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;Discover the transformative power of open source innovation by visiting the Eclipse Foundation at booth 4-554, Hall 4. Engage with our vibrant communities, explore industry-leading projects, and discover how open source initiatives are reshaping technology. We look forward to seeing you there!&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;About the Eclipse Foundation&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;The Eclipse Foundation provides our global community of individuals and organisations with a business-friendly environment for open source software collaboration and innovation. We host the Eclipse IDE, Adoptium, Software Defined Vehicle, Jakarta EE, and over 415 open source projects, including runtimes, tools, specifications, and frameworks for cloud and edge applications, IoT, AI, automotive, systems engineering, open processor designs, and many others. Headquartered in Brussels, Belgium, the Eclipse Foundation is an international non-profit association supported by over 360 members. Visit us at this year’s &lt;a href=&quot;https://www.opencode-x.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Open Code Experience (OCX) &lt;/u&gt;&lt;/a&gt;conference on 22-24 October 2024 in Mainz, Germany. To learn more, follow us on social media &lt;a href=&quot;https://twitter.com/EclipseFdn&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;@EclipseFdn&lt;/u&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/company/34093/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;LinkedIn&lt;/u&gt;&lt;/a&gt;, or visit &lt;a href=&quot;http://eclipse.org&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;eclipse.org&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Third-party trademarks mentioned are the property of their respective owners.&lt;/p&gt;
&lt;p class=&quot;text-align-center&quot; dir=&quot;ltr&quot;&gt;###&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Media contacts:&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;u&gt;Schwartz Public Relations for the Eclipse Foundation, AISBL (Germany)&lt;/u&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Gloria Huppert/Julia Rauch&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Sendlinger Straße 42A&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;80331 Munich&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:EclipseFoundation@schwartzpr.de&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;EclipseFoundation@schwartzpr.de&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;+49 (89) 211 871 -70/-43&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;u&gt;Nichols Communications for the Eclipse Foundation, AISBL&lt;/u&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Jay Nichols&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:jay@nicholscomm.com&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;jay@nicholscomm.com&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;+1 408-772-1551&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;u&gt;514 Media Ltd for the Eclipse Foundation, AISBL (France, Italy, Spain)&lt;/u&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Benoit Simoneau&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:benoit@514-media.com&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;benoit@514-media.com&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;M: +44 (0) 7891 920 370&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 04 Apr 2024 11:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Security Advisory: HTTP CONTINUATION frames issue</title>
	<guid isPermaLink="false">40110 at https://newsroom.eclipse.org</guid>
	<link>https://newsroom.eclipse.org/news/announcements/eclipse-foundation-security-advisory-http-continuation-frames-issue</link>
	<description>&lt;span&gt;Eclipse Foundation Security Advisory: HTTP CONTINUATION frames issue&lt;/span&gt;

&lt;span&gt;&lt;span&gt;Marta Rybczynska&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-04-04T00:24:04-04:00&quot; title=&quot;Thursday, April 4, 2024 - 00:24&quot;&gt;Thu, 2024-04-04 00:24&lt;/time&gt;
&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;The Eclipse Foundation Security Team has been made aware of the vulnerability VU#421644 affecting multiple HTTP/2 implementations, that could cause an out-of-memory crash.&lt;/p&gt;&lt;/div&gt;
      
  &lt;div class=&quot;field field--name-field-news-url field--type-link field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;URL&lt;/div&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/post/marta-rybczynska/202404-01-eclipse-foundation-security-advisory&quot;&gt;https://blogs.eclipse.org/post/marta-rybczynska/202404-01-eclipse-foundation-seâ€¦&lt;/a&gt;&lt;/div&gt;
          &lt;/div&gt;

  &lt;div class=&quot;field field--name-field-tags field--type-entity-reference field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;Tags&lt;/div&gt;
          &lt;div class=&quot;field--items&quot;&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://newsroom.eclipse.org/tags/security&quot; hreflang=&quot;en&quot;&gt;Security&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;</description>
	<pubDate>Thu, 04 Apr 2024 04:24:04 +0000</pubDate>
</item>
<item>
	<title>Clark Roundy: Showcasing Open Innovation at embedded world 2024: An Eclipse Foundation Preview</title>
	<guid isPermaLink="false">7575 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/clark-roundy/showcasing-open-innovation-embedded-world-2024-eclipse-foundation-preview</link>
	<description>&lt;span&gt;Showcasing Open Innovation at embedded world 2024: An Eclipse Foundation Preview&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;With &lt;/span&gt;&lt;a href=&quot;https://www.embedded-world.de/en&quot;&gt;&lt;span&gt;embedded world 2024&lt;/span&gt;&lt;/a&gt;&lt;span&gt; just around the corner, we're thrilled to offer a sneak peek into the groundbreaking projects and innovations that are shaping the future, all thanks to the collaborative efforts of the Eclipse Foundation and our vibrant community. &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Join us in Nuremberg April 9th to 11th at booth 4-554, Hall 4, as we unveil a diverse spectrum of open source projects and technologies spanning the entire embedded ecosystem. At the Eclipse Foundation booth, you'll have the opportunity to explore the world of open source collaboration and witness firsthand its transformative power.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Here are a few things to expect and explore when you visit our booth:&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li dir=&quot;ltr&quot;&gt;&lt;p&gt;&lt;strong&gt;Software Defined Vehicle Innovation&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The &lt;/span&gt;&lt;a href=&quot;https://sdv.eclipse.org/&quot;&gt;&lt;span&gt;Eclipse SDV team&lt;/span&gt;&lt;/a&gt;&lt;span&gt; will showcase groundbreaking business use cases with SDV Blueprints, spotlighting advancements in insurance, fleet management, and software orchestration. These initiatives represent a collaborative effort across more than 20 automotive open source projects, highlighting a collective effort to push the boundaries of software-defined vehicles.&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot;&gt;&lt;p&gt;&lt;strong&gt;The World’s First Open Source, Safety-Certified RTOS&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://threadx.io/&quot;&gt;&lt;span&gt;Eclipse ThreadX&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, formerly Azure RTOS, is the world's first open source, safety-certified embedded real-time operating system. ThreadX is a new addition to the world of open source, having recently become a project at the Eclipse Foundation after its transition from Microsoft. Embedded world 2024 serves as the launchpad for the debut release of ThreadX under the stewardship of the Eclipse Foundation. Eclipse ThreadX v6.4.1 is now available under the permissive MIT licence. You can download it and its subcomponents &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse-threadx&quot;&gt;&lt;span&gt;from GitHub&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. Stop by our booth to engage with one of our experts and learn more about how you can harness the potential of open source in your next safety-critical real-time project.&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot;&gt;&lt;p&gt;&lt;strong&gt;Industrial-Grade, Open Source RISC-V CPU Technology&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;With a mission to deliver industrial-grade, fully open source RISC-V CPU IP Cores to the tech community, the &lt;/span&gt;&lt;a href=&quot;https://www.openhwgroup.org/&quot;&gt;&lt;span&gt;OpenHW Group's&lt;/span&gt;&lt;/a&gt;&lt;span&gt; CVA6, CVE4, and CVE2 cores exemplify the pinnacle of open source innovation and adoption in the industry. Chat with the OpenHW team to learn more about their &lt;/span&gt;&lt;a href=&quot;https://www.openhwgroup.org/projects/&quot;&gt;&lt;span&gt;projects&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot;&gt;&lt;p&gt;&lt;strong&gt;Advancing European Technology Leadership with Eclipse Aidge&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;With the backing of &lt;/span&gt;&lt;a href=&quot;https://list.cea.fr/en/&quot;&gt;&lt;span&gt;CEA List&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, the &lt;/span&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.aidge&quot;&gt;&lt;span&gt;Eclipse Aidge&lt;/span&gt;&lt;/a&gt;&lt;span&gt; project stands out as a testament to European and French technological           leadership. It embodies the successful transition from academic research to real-world applications, showcasing the symbiotic relationship between academia and embedded industry. Connect with the CEA List team to learn more about Eclipse Aidge. &lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot;&gt;&lt;p&gt;&lt;strong&gt;Cutting-Edge Research and New Open Source Projects&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/research/&quot;&gt;&lt;span&gt;Eclipse Research&lt;/span&gt;&lt;/a&gt;&lt;span&gt; team will present 4 new projects that are advancing the future of technology: &lt;/span&gt;&lt;a href=&quot;https://he-codeco.eu/&quot;&gt;&lt;span&gt;CODECO&lt;/span&gt;&lt;/a&gt;&lt;span&gt;,&lt;/span&gt;&lt;a href=&quot;https://tristan-project.eu/&quot;&gt;&lt;span&gt; a cognitive, cross-layer and highly adaptive Edge-Cloud management framework; TRISTAN&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, an industrialisation of the European RISC-V ecosystem that is capable of competing with existing commercial alternatives;&lt;/span&gt;&lt;a href=&quot;https://transact-ecsel.eu/&quot;&gt;&lt;span&gt; TRANSACT&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, a universal, distributed solution architecture for the transformation of security-critical cyber-physical systems; and&lt;/span&gt;&lt;a href=&quot;https://nephele-project.eu/&quot;&gt;&lt;span&gt; NEPHELE&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, a reliable and secure end-to-end orchestration of hyper-distributed applications on a programmable infrastructure.&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Get to Know Our Community&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Discover the diverse Eclipse Foundation ecosystem catering to the IoT, edge and embedded industries. Representatives from key Eclipse communities such as &lt;/span&gt;&lt;a href=&quot;https://iot.eclipse.org/&quot;&gt;&lt;span&gt;Eclipse IoT&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;https://sparkplug.eclipse.org/&quot;&gt;&lt;span&gt;Sparkplug&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, and &lt;/span&gt;&lt;a href=&quot;https://oniroproject.org/&quot;&gt;&lt;span&gt;Oniro&lt;/span&gt;&lt;/a&gt;&lt;span&gt; will all be available to engage with you. &lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;Must-Attend Technical Talks&lt;/span&gt;&lt;/h2&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Embedded world features talks covering myriad topics, but here are some sessions you definitely won’t want to miss: &lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Frédéric Desbiens&lt;/strong&gt;&lt;span&gt;: Open Source Software and Lifecycle Standards – Yes: It Can Be Done (Tuesday, April 9, 11:30 AM - 12:00 PM, NCC Ost, Session 6.1)&lt;/span&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Frédéric Desbiens&lt;/strong&gt;&lt;span&gt;: The State of Open Source Real-Time Operating Systems (Wednesday, April 10, 11:00 AM - 11:30 AM, NCC Ost, Session 3.4)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://events.weka-fachmedien.de/embedded-world-conference/program&quot;&gt;&lt;span&gt;View the full program&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;Join Us at embedded world 2024&lt;/span&gt;&lt;/h2&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Embedded world 2024 offers a glimpse into  the future of embedded systems. &lt;/span&gt;&lt;strong&gt; Visit the Eclipse Foundation at booth 4-554, Hall 4&lt;/strong&gt;&lt;span&gt; To connect with our passionate communities, explore industry-leading projects and discover how open source is reshaping technology. We look forward to seeing you there!&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Date:&lt;/strong&gt;&lt;span&gt; 9 - 11 April 2024&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Location:&lt;/strong&gt;&lt;span&gt; Nuremberg, Germany&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Visit Us:&lt;/strong&gt;&lt;span&gt; Booth 4-554, Hall 4&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;Clark Roundy&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-04-03T19:33:43-04:00&quot; title=&quot;Wednesday, April 3, 2024 - 19:33&quot;&gt;Wed, 2024-04-03 19:33&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Wed, 03 Apr 2024 23:33:43 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Theia IDE: A Look at Leaps in Performance</title>
	<guid isPermaLink="false">7572 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-theia-ide-look-leaps-performance</link>
	<description>&lt;span&gt;Eclipse Theia IDE: A Look at Leaps in Performance&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;a href=&quot;https://xkcd.com/303&quot;&gt;&lt;img alt=&quot;XKCD: Compiling by Randal Monroe&quot; class=&quot;margin-20 align-left&quot; height=&quot;286&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2024-04/compiling.png&quot; width=&quot;328&quot; /&gt;&lt;/a&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Developers hate waiting. In the ever-evolving landscape of Integrated Development Environments (IDEs), the quest for swifter, more efficient tools remains a constant pursuit. Enter Eclipse Theia IDE. This is more than a rebrand of Theia Blueprint. It is a statement that this IDE is ready for prime time and to provide a great user experience. It is a statement that the feature set, stability and performance have all improved to the point where the product provides a compelling user experience. We will explore a bit of the performance improvements with Theia IDE startup time and compare it historically. This should lead to a more streamlined development journey.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Objectively speaking, &lt;/span&gt;&lt;strong&gt;Eclipse Theia IDE delivers a noticeable boost in performance over the “Theia Blueprints” releases 3 months ago&lt;/strong&gt;&lt;span&gt;, &lt;img alt=&quot;Test Debug Lifecycle&quot; class=&quot;margin-20 align-right&quot; height=&quot;238&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2024-04/lifecycle.png&quot; width=&quot;294&quot; /&gt; particularly evident during the startup phase. To get to this point, smart engineering was used. The Theia developers started by measuring execution time in a repeatable way. This phase is called instrumentation. After that, they observed the results and improved the performance &lt;/span&gt;&lt;span class=&quot;NA6bn BxUVEf ILfuVd hgKElc&quot; lang=&quot;en&quot;&gt;dominators&lt;/span&gt;&lt;span&gt;. This showed them where to look and where to optimize. After that, they identify an issue, fix it and repeat the process to continually make things faster.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The Theia developers set up a  &lt;/span&gt;&lt;a href=&quot;https://eclipse-theia.github.io/theia-e2e-test-suite/performance/&quot;&gt;&lt;span&gt;site to&lt;/span&gt;&lt;/a&gt;&lt;span&gt; observe performance changes. The tests were run on github runners, which are quite fast, but more importantly, are quite stable in practical terms. Two runs on the infrastructure yielded reproducible changes.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The following chart shows the total “Startup time.” It does not show a complete picture though as it does not show when users can begin to interact with the UI. You can see there were significant speedups in November, where the performance has more than doubled. The time from initialization to a responsive UI has improved by about the same factor too! There were a few observed speedups on Jan 21st. This is due to the “implement headless plug-ins” patch which defers plug-in loading. These were done by Tobias Ortmayr, Philip Langer, Jonas Helming, Stefan Dirix, Thomas Maeder and more.&lt;/span&gt;&lt;/p&gt;&lt;img alt=&quot;Test Results Graph&quot; class=&quot;align-center&quot; height=&quot;139&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2024-04/graph.png&quot; width=&quot;691&quot; /&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The Theia developers  used &lt;/span&gt;&lt;a href=&quot;https://eclipse.dev/tracecompass/&quot;&gt;&lt;span&gt;Eclipse Trace Compass&lt;/span&gt;&lt;/a&gt;&lt;span&gt; to compare the execution times. If you’d like, you can reproduce the findings yourself. In the &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse-theia/theia-e2e-test-suite&quot;&gt;&lt;span&gt;theia-e2e-test-suite&lt;/span&gt;&lt;/a&gt;&lt;span&gt; GitHub repo, run the &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse-theia/theia-e2e-test-suite/blob/main/scripts/convert-to-trace-event/get_trace.py&quot;&gt;&lt;span&gt;get_trace.py&lt;/span&gt;&lt;/a&gt;&lt;span&gt; script to reproduce the experiment.&lt;/span&gt;&lt;/p&gt;&lt;img alt=&quot;Eclipse Trace Compass Flame Chart&quot; class=&quot;align-center&quot; height=&quot;255&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2024-04/graph2.png&quot; width=&quot;665&quot; /&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The view above is the flame chart. It shows the call stack over time. Trace Compass has the ability to synchronize two runs and compare them. With this data layout, it becomes clear that &lt;/span&gt;&lt;strong&gt;startplugins&lt;/strong&gt;&lt;span&gt; was a major dominator before, and was reduced. However, every item on the UI thread (front end) seems to have accelerated aggressively. This is great news as the UI thread is resource limited, it could require a UI thread whereas the back-end can eventually multi-threaded more easily.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;We must however acknowledge the unknown. The response to first click is measured here with 20% unknown (see above the pink boxes). The unknown is probably due to the Theia plug-in being downloaded to the browser. However, it needs to be confirmed and a trace point on that transaction would need to be added&lt;/span&gt;&lt;/p&gt;&lt;img alt=&quot;Trace Compass Flart Chart: Unknown&quot; class=&quot;align-center&quot; height=&quot;217&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2024-04/graph3.png&quot; width=&quot;736&quot; /&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;If the full transaction, i.e. the full initialization and not just interactivity, is considered, almost 80% of the time is unknown. With the data we have, it is not clear what is happening. One possibility is this is when plug-ins are lazy-loaded. It is bounded by the backend operation, and so this could be seen as a &quot;known unknown.&quot; While this may initially seem daunting, it presents an opportunity for further exploration and refinement. For example, by instrumenting the plug-in API, the initialization time of plug-ins would be known and a misbehaving plug-in on the critical path of start-up could be identified.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Having a proper, more complete test bench and suite is an opportunity for more visibility in the long run. The partially instrumented code is a good first step, meaning that we need to instrument more, to fill in the gaps. When the code instrumentation is complete for a given test execution flow, more test flows can be then added. This then presents additional opportunities to update the instrumentation. &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Will Rogers is attributed to saying “You never get a second chance to make a first impression.” The startup time is the first thing anyone sees when opening a new product, and the Theia community has optimized it, showing their concern with the user experience. This shows the general attitude and the work towards justifying the rebrand from Blueprint to IDE. Its strides in startup performance are the first step on a journey of ongoing enhancement and refinement. As the team continues down this path, the community is optimistic and anticipating what lies ahead. (spoiler alerts: backendless, remote and multi-player!)&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;With Eclipse Theia IDE arriving on the scene, developers have another viable contender that offers rich features, a vibrant community and a tight experience.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Matthew Khouzam,&lt;br /&gt;Director, Eclipse Foundation&lt;br /&gt;Product Owner/Developer, Ericsson AB&lt;/p&gt;&lt;p&gt;John Kellerman&lt;br /&gt;Program Manager Cloud DevTools and Open VSX&lt;br /&gt;Eclipse Foundation&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-04-03T10:53:57-04:00&quot; title=&quot;Wednesday, April 3, 2024 - 10:53&quot;&gt;Wed, 2024-04-03 10:53&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Wed, 03 Apr 2024 14:53:57 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: The Open Source Community is Building Cybersecurity Processes for CRA Compliance</title>
	<guid isPermaLink="false">40101 at https://newsroom.eclipse.org</guid>
	<link>https://newsroom.eclipse.org/news/announcements/open-source-community-building-cybersecurity-processes-cra-compliance</link>
	<description>&lt;span&gt;The Open Source Community is Building Cybersecurity Processes for CRA Compliance&lt;/span&gt;

&lt;span&gt;&lt;span&gt;Jacob Harris&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-04-02T10:40:29-04:00&quot; title=&quot;Tuesday, April 2, 2024 - 10:40&quot;&gt;Tue, 2024-04-02 10:40&lt;/time&gt;
&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;Apache Software Foundation, Blender Foundation, OpenSSL Software Foundation, PHP Foundation, Python Software Foundation, Rust Foundation, and Eclipse Foundation are jointly announcing our intention to collaborate on the establishment of common specifications for secure software development based on existing open source best practices.&lt;/p&gt;&lt;/div&gt;
      
  &lt;div class=&quot;field field--name-field-news-url field--type-link field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;URL&lt;/div&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/post/mike-milinkovich/open-source-community-building-cybersecurity-processes-cra-compliance&quot;&gt;https://blogs.eclipse.org/post/mike-milinkovich/open-source-community-building-â€¦&lt;/a&gt;&lt;/div&gt;
          &lt;/div&gt;</description>
	<pubDate>Tue, 02 Apr 2024 14:40:29 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: The Open Source Community is Building Cybersecurity Processes for CRA Compliance</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1765</guid>
	<link>https://eclipse-foundation.blog/2024/04/02/open-source-community-cra-compliance/</link>
	<description>&lt;p&gt;&lt;em&gt;tl;dr – Apache Software Foundation, Blender Foundation, OpenSSL Software Foundation, PHP Foundation, Python Software Foundation, Rust Foundation, and Eclipse Foundation are jointly announcing our intention to collaborate on the establishment of common specifications for secure software development based on existing open source best practices.&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;In an effort to meet the real challenges of cybersecurity in the open source ecosystem, and to demonstrate full cooperation with, and to support the implementation of, the European Union’s Cyber Resilience Act (CRA), &lt;a href=&quot;https://www.apache.org/&quot;&gt;Apache Software Foundation&lt;/a&gt;, &lt;a href=&quot;https://www.blender.org/about/foundation/&quot;&gt;Blender Foundation&lt;/a&gt;, &lt;a href=&quot;https://www.openssl.org/&quot;&gt;OpenSSL Software Foundation&lt;/a&gt;, &lt;a href=&quot;https://thephp.foundation/&quot;&gt;PHP Foundation&lt;/a&gt;, &lt;a href=&quot;https://www.python.org/psf-landing/&quot;&gt;Python Software Foundation&lt;/a&gt;, &lt;a href=&quot;https://foundation.rust-lang.org/&quot;&gt;Rust Foundation&lt;/a&gt;, and &lt;a href=&quot;https://www.eclipse.org/&quot;&gt;Eclipse Foundation&lt;/a&gt; are announcing an initiative to establish common specifications for secure software development based on open source best practices.&lt;/p&gt;



&lt;p&gt;This collaborative effort will be hosted at the Brussels-based Eclipse Foundation AISBL under the auspices of the Eclipse Foundation Specification Process and a new working group. As Europe’s largest open source foundation, which also supports a robust open specification process, the Eclipse Foundation is a natural home for this effort. Other code-hosting open source foundations, SMEs, industry players, and researchers are invited to join in as well. The starting point for this highly technical standardisation effort will be today’s existing security policies and procedures of the respective open source foundations, and similar documents describing best practices. The governance of the working group will follow the Eclipse Foundation’s usual member-led model but will be augmented by explicit representation from the open source community to ensure diversity and balance in decision-making. The deliverables will consist of one or more process specifications made available under a liberal specification copyright licence and a royalty-free patent licence. &lt;/p&gt;



&lt;p&gt;The reasons for this collaboration extend beyond compliance. In an era where software, particularly open source software, plays an increasingly vital role in modern society, the need for reliability, safety, and security has steadily increased. New regulations, exemplified by the impending CRA, underscore the urgency for secure by design and robust supply chain security standards well before the new regulation comes into force in 2027.&lt;/p&gt;



&lt;p&gt;While open source communities and foundations generally adhere to and have historically established industry best practices around security, their approaches often lack alignment and comprehensive documentation. The open source community and the broader software industry now share a common challenge: legislation has introduced an urgent need for cybersecurity process standards.&lt;/p&gt;



&lt;p&gt;The CRA will lead to numerous standards requests from the Commission to the European Standards Organisations. And these are only the European requirements – additional demands from the US and other regions can be anticipated.&lt;/p&gt;



&lt;p&gt;The CRA also creates a new type of economic actor – the “Open Source Software Steward”. It is in this context that we, as open source foundations, want to respond to the challenge of establishing common specifications for secure software development.&lt;/p&gt;



&lt;p&gt;This challenge is compounded by the following:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;Today’s global software infrastructure is over 80% open source. The software stack that underpins any product with digital elements is typically built using open source software. As a result, it is fair to say that when we discuss the “software supply chain,” we are primarily, but not exclusively, referring to open source. &lt;/li&gt;



&lt;li&gt;Traditional standards organisations have had limited interactions with open source communities and the broader software/IT industry. To make matters more complicated, their governance models currently do not provide opportunities for open source communities to engage. &lt;/li&gt;



&lt;li&gt;Open source communities have a limited history of dealing with traditional standards organisations. To make matters more complicated, their resource constraints make it difficult for them to engage.&lt;/li&gt;



&lt;li&gt;Standards setting is typically a long process, and time is of the essence. &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;So while these new cybersecurity standards must be developed with the requirements of open source development processes and communities in mind, there is no clear path on how to do so in the time available. It is also important to note that it is similarly necessary that these standards be developed in a manner that also includes the requirements of proprietary software development, large enterprises, vertical industries, and small and medium enterprises.&lt;/p&gt;



&lt;p&gt;Despite these challenges, a foundation for progress exists. The leading open source communities and foundations have for years developed and practised secure software development processes. These are processes that have often defined or set industry best practices around things such as coordinated disclosure, peer review, and release processes. These processes have been documented by each of these communities, albeit sometimes using different terminology and approaches. We hypothesise that the cybersecurity process technical documentation that already exists amongst the open source communities can provide a useful starting point for developing the cybersecurity processes required for regulatory compliance.&lt;/p&gt;



&lt;p&gt;We hope that our specifications could inform the formal standardisation processes of at least one of the European Standards Organisations. Given the tight time horizon for implementation of the CRA, we believe that this immediate start will provide a constructive environment to host the technical discussions necessary for the stewards, contributors, and adopters of open source to meet the requirements set forth in these new regulations. &lt;/p&gt;



&lt;p&gt;We invite you to join our collaborative effort to create specifications for secure open source development: Contribute your ideas and participate in the magic that unfolds when open source foundations, SMEs, industry leaders, and researchers combine forces to tackle big challenges. To stay updated on this initiative, &lt;a href=&quot;https://outreach.eclipse.foundation/open-source-cybersecurity-specifications&quot;&gt;sign up for our mailing list&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 02 Apr 2024 07:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Visualizing Eclipse Collections after Twenty Years of Development</title>
	<guid isPermaLink="false">https://medium.com/p/701047fdc672</guid>
	<link>https://donraab.medium.com/visualizing-eclipse-collections-after-twenty-years-of-development-701047fdc672?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;It’s hard to see the forest when you keep walking among the trees.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*TLko6FOsWlRYYXI2ZvhFbA.jpeg&quot; /&gt;&lt;figcaption&gt;This is how I visualize Eclipse Collections at a high level&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;This year is the 20th year that I have been working on &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;. To kick off the official 20th anniversary celebration in a technical blog, I wanted to create a fresh visualization of Eclipse Collections features to get new developers acquainted with this amazing library.&lt;/p&gt;&lt;p&gt;In a code base with many packages, many types, and over one million lines of code (including test code), it can be easy to get lost browsing while looking through files. There is an organized package structure to Eclipse Collections, but if you are new to the library, it may not be obvious where to get started. I’m leaving this mind map here, with some useful links to help folks find the things they might be looking for.&lt;/p&gt;&lt;p&gt;This blog may be the “Just getting started” guide some folks are looking for as they begin their journey of discovery. Eclipse Collections contains everything I ever wanted in a collections library for Java. I hope Eclipse Collections will be the same for many of you. My intention in writing this blog is for it to be a good reference for using the library in your development adventures. I plan to refer to it myself on my own continuing adventures over the next 5… 10… 15… maybe 20 years.&lt;/p&gt;&lt;p&gt;Good luck and enjoy your journey!&lt;/p&gt;&lt;h3&gt;Interfaces&lt;/h3&gt;&lt;p&gt;If you want to find the interfaces, you need to look at the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/tree/master/eclipse-collections-api&quot;&gt;eclipse-collections-api &lt;/a&gt;module. In this module you will find most of the parent interfaces, like &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/RichIterable.java&quot;&gt;RichIterable&lt;/a&gt;, &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/PrimitiveIterable.java&quot;&gt;PrimitiveIterable&lt;/a&gt;, and &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/ParallelIterable.java&quot;&gt;ParallelIterable&lt;/a&gt;. &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/multimap/Multimap.java&quot;&gt;Multimap&lt;/a&gt; and &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/partition/PartitionIterable.java&quot;&gt;PartitionIterable&lt;/a&gt; are located in two different packages. Eclipse Collections had a design goal of cleanly separating interface from implementation. We want developers to refer only to interfaces whenever possible. This module contains primarily interfaces. The one exception to this are collection &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/tree/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/factory&quot;&gt;factory classes&lt;/a&gt;, which are loaded with implementations dynamically.&lt;/p&gt;&lt;p&gt;In order to understand the symmetry of the triad of interfaces, which include an &lt;em&gt;Iterable&lt;/em&gt;, &lt;em&gt;Mutable&lt;/em&gt;, and &lt;em&gt;Immutable&lt;/em&gt; version for each type (e.g. ListIterable, MutableList, ImmutableList), I recommend reading the following blog.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://betterprogramming.pub/rich-lazy-mutable-and-immutable-interfaces-in-eclipse-collections-ce64a31b5936&quot;&gt;Rich, Lazy, Mutable, and Immutable Interfaces in Eclipse Collections&lt;/a&gt;&lt;/p&gt;&lt;p&gt;There is only one LazyIterable interface. LazyIterable is not a parent interface, as it extends RichIterable. LazyIterable substitutes co-variant overrides for any methods that should be &lt;em&gt;lazy&lt;/em&gt; and return a LazyIterable. Any collection type, whether &lt;em&gt;iterable&lt;/em&gt;, &lt;em&gt;mutable&lt;/em&gt; or &lt;em&gt;immutable&lt;/em&gt; can create a lazy view of itself by calling asLazy(), which will return a LazyIterable.&lt;/p&gt;&lt;h3&gt;Data Structures&lt;/h3&gt;&lt;p&gt;The data structures for Eclipse Collections are split between interfaces and implementation. The interfaces are located at the module and links I shared above. The implementations are located in the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/tree/master/eclipse-collections&quot;&gt;eclipse-collections&lt;/a&gt; module. The types you are probably most interested are the implementations of List, Set, Map, and Bag. The Mutable implementations of these types in Eclipse Collections are named FastList, UnifiedSet, UnifiedMap and HashBag. Most of the time you will never see these names in code, assuming you are using the interfaces &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/list/MutableList.java&quot;&gt;MutableList&lt;/a&gt;, &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/set/MutableSet.java&quot;&gt;MutableSet&lt;/a&gt;, &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MutableMap.java&quot;&gt;MutableMap&lt;/a&gt;, and &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/bag/MutableBag.java&quot;&gt;MutableBag&lt;/a&gt; and create the collections using the Lists, Sets, Maps, and Bags factories.&lt;/p&gt;&lt;h3&gt;Container Types&lt;/h3&gt;&lt;p&gt;There are Object and primitive containers in Eclipse Collections. For Map types, there are Object/Object, primitive/primitive, Object/primitive, and primitive/Object combinations. There are also some thread-safe container types in Eclipse Collections including both concurrent and MultiReader containers.&lt;/p&gt;&lt;p&gt;The best way to learn about the specialized Data Structures and Container Types in Eclipse Collections is to check out the following blog series.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/javarevisited/blog-series-the-missing-java-data-structures-no-one-ever-told-you-about-17f34cc4b7e2&quot;&gt;Blog Series: The missing Java data structures no one ever told you about&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Algorithms&lt;/h3&gt;&lt;p&gt;Eclipse Collections supports &lt;em&gt;eager&lt;/em&gt; and &lt;em&gt;lazy&lt;/em&gt; behaviors, as well as &lt;em&gt;serial&lt;/em&gt; and &lt;em&gt;parallel&lt;/em&gt; evaluation. The best way to understand the difference between eager and lazy behaviors is to read the following blog. You can also learn how the library evolved support from &lt;em&gt;eager&lt;/em&gt;, to &lt;em&gt;fused&lt;/em&gt;, to &lt;em&gt;lazy&lt;/em&gt; over time.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/javarevisited/from-eager-to-fused-to-lazy-66450e290002&quot;&gt;From Eager to Fused to Lazy&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The above blog only covers &lt;em&gt;serial&lt;/em&gt; examples. If you would like to read more about the &lt;em&gt;parallel&lt;/em&gt; capabilities in Eclipse Collections, the following blog is a great place to start.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/javarevisited/the-unparalleled-design-of-eclipse-collections-e4340b00f79f&quot;&gt;The unparalleled design of Eclipse Collections&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Java is missing a feature that I remember fondly from my days as a Smalltalk developer. The missing feature is a code organization tool known as &lt;em&gt;Method Categories&lt;/em&gt;. Method categories allow you to group methods together in a class. The following are the categories I would use in Eclipse Collections types if a method categorization feature was available in Java.&lt;/p&gt;&lt;p&gt;✅ Enumerating&lt;br /&gt;✅ Filtering&lt;br /&gt;✅ Transforming&lt;br /&gt;✅ Finding&lt;br /&gt;✅ Testing&lt;br /&gt;✅ Grouping&lt;br /&gt;✅ Aggregating&lt;br /&gt;✅ Converting&lt;br /&gt;✅ Math&lt;/p&gt;&lt;p&gt;The following blog covers some of the features in the categories above. There are over 100 methods on the RichIterable parent interface, and even more in subtypes. Most of the methods fit in one of these categories.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://donraab.medium.com/getting-started-with-eclipse-collections-part-4-a72eb23cce0e&quot;&gt;Getting Started with Eclipse Collections — Part 4&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Factories&lt;/h3&gt;&lt;p&gt;Eclipse Collections includes factories for &lt;em&gt;Mutable&lt;/em&gt;, &lt;em&gt;Immutable&lt;/em&gt;, &lt;em&gt;MultiReader&lt;/em&gt; and other more specialized types. The factory classes in Eclipse Collections are named by taking a type name (e.g., List) and pluralizing it (e.g. Lists). The following blogs will teach you everything you ever wanted to know about the collection factories in Eclipse Collections.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/javarevisited/as-a-matter-of-factory-part-1-mutable-75cc2c5d72d9&quot;&gt;As a matter of Factory — Part 1 (Mutable)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/javarevisited/as-a-matter-of-factory-part-2-immutable-8cb72ff897ee&quot;&gt;As a matter of Factory — Part 2 (Immutable)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/oracledevs/as-a-matter-of-factory-part-3-method-chaining-224217074d31&quot;&gt;As a matter of Factory — Part 3 (Method Chaining)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Twenty Years! Woo hoo!&lt;/h3&gt;&lt;p&gt;In 2004, I didn’t think I would ever contribute anything to open source. I certainly didn’t think I would create something that would be open sourced from Goldman Sachs and used and contributed to by so many developers and projects. Here I am in 2024, celebrating 20 years of using and working on this amazing library. Crazy!&lt;/p&gt;&lt;p&gt;I think all that is left is to tell you how to download the library in your own projects. Of course, there is a blog for that.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://donraab.medium.com/getting-started-with-eclipse-collections-part-1-d5ba0098465f&quot;&gt;Getting Started with Eclipse Collections — Part 1&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Thank you for reading this blog, and for spending your valuable time learning some things about Eclipse Collections. I hope the library will be as useful and inspiring to you as it has been to me. If you find it useful and would like to contribute, we always welcome new contributors. If you don’t have a code contribution, but would like to advocate for and help others discover cool features in the library, then write a blog or an article. I keep a running list of articles about Eclipse Collections updated on the GitHub wiki linked below.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/wiki/Articles&quot;&gt;Articles&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Enjoy!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=701047fdc672&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 19 Mar 2024 19:37:44 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Jakarta EE Developer Survey 2024</title>
	<guid isPermaLink="false">40043 at https://newsroom.eclipse.org</guid>
	<link>https://newsroom.eclipse.org/news/announcements/jakarta-ee-developer-survey-2024</link>
	<description>&lt;span&gt;Jakarta EE Developer Survey 2024&lt;/span&gt;

&lt;span&gt;&lt;span&gt;Jacob Harris&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-03-19T09:25:12-04:00&quot; title=&quot;Tuesday, March 19, 2024 - 09:25&quot;&gt;Tue, 2024-03-19 09:25&lt;/time&gt;
&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;The &lt;a href=&quot;https://www.surveymonkey.com/r/7JDP8BP&quot; rel=&quot;nofollow&quot;&gt;2024 Jakarta EE Developer Survey is now open&lt;/a&gt;! Through this annual survey, we want to gather valuable insights into the needs, priorities, and requirements of the enterprise Java developer community.&lt;/p&gt;&lt;/div&gt;
      
  &lt;div class=&quot;field field--name-field-news-url field--type-link field--label-above&quot;&gt;
    &lt;div class=&quot;field--label&quot;&gt;URL&lt;/div&gt;
              &lt;div class=&quot;field--item&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/post/ivar-grimstad/jakarta-ee-developer-survey-2024&quot;&gt;https://blogs.eclipse.org/post/ivar-grimstad/jakarta-ee-developer-survey-2024&lt;/a&gt;&lt;/div&gt;
          &lt;/div&gt;</description>
	<pubDate>Tue, 19 Mar 2024 13:25:12 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.33 Released!</title>
	<guid isPermaLink="false">http://eclipse.dev/webtools/news.php#permalink207</guid>
	<link>https://eclipse.org/webtools/releases/3.33</link>
	<description>&lt;div&gt;
      The Eclipse Web Tools Platform 3.33 has been released!
      &lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt;
      and updates can be performed using the Eclipse IDE 2024-03
      &lt;a href=&quot;https://download.eclipse.org/releases/2024-03/&quot;&gt;Update Site&lt;/a&gt;
      or through any of the related
      &lt;a href=&quot;https://marketplace.eclipse.org/user/nitind/listings&quot;&gt;Eclipse Marketplace&lt;/a&gt;
      .
      Release 3.33 is included in the 2024-03
      &lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2024-03/r/eclipse-ide-enterprise-java-and-web-developers&quot;&gt;
        Eclipse IDE for Enterprise Java and Web Developers
      &lt;/a&gt;
      , with selected portions also included in several
      &lt;a href=&quot;https://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;
      . Adopters can download
      &lt;a href=&quot;https://download.eclipse.org/webtools/downloads/drops/R3.33.0/R-3.33.0-20240304165142/&quot;&gt;the R3.33 p2 repository&lt;/a&gt;
      directly and combine it with the necessary dependencies.&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://eclipse.dev/webtools/news.php#permalink207&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 13 Mar 2024 14:00:00 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Reminder: Eclipse Theia Community Call March 14th, 2024</title>
	<guid isPermaLink="false">7544 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/reminder-eclipse-theia-community-call-march-14th-2024</link>
	<description>&lt;span&gt;Reminder: Eclipse Theia Community Call March 14th, 2024&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;&lt;span&gt;The Eclipse Theia community is a dynamic and expanding ecosystem, reflecting the dedicated efforts and enthusiasm of its members. The Theia Community Call is an open forum intended to provide updates on Theia, foster discussion within the ecosystem, and engage the community of Theia adopters, contributors, and users. This call presents an valuable opportunity to stay informed about the latest in Theia, contribute to its ecosystem, and partake in discussions with fellow community members.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Why Attend?&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The Theia Community Call serves as an important venue for:&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Gaining comprehensive updates on Theia and its surrounding ecosystem.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Participating in discussions about the project's progress, challenges, and opportunities.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Offering suggestions and agenda items, thereby contributing to Theia's future direction.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;Your involvement and feedback play a vital role in Theia's ongoing development. Whether you are deeply involved in the project or have a budding interest, your participation is greatly welcomed and appreciated.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Meeting Details&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Date: March 14th, 2024&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Time: 4pm Central European Time (CET)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Location: &lt;/span&gt;&lt;a href=&quot;https://eclipse.zoom.us/j/82046587932?pwd=nMz5US2qHDIeN0bRvLBji3cpmzGaUi.1&quot;&gt;&lt;span&gt;Zoom Meeting&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Meeting ID: 820 4658 7932&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Passcode: 117021&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Agenda Highlights&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Community Update by Jonas: An in-depth update on the most recent developments and releases within the Theia community.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;How to Contribute&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We encourage the community to actively contribute to the agenda. If you have topics, questions, or discussions in mind that you believe would benefit the community, please propose your ideas by initiating a [discussion](&lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse-theia/theia/discussions&quot;&gt;https://github.com/eclipse-theia/theia/discussions&lt;/a&gt;&lt;span&gt;) and tagging @JonasHelming. Your insights and contributions are essential for a diverse and enriching conversation.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-03-12T11:52:11-04:00&quot; title=&quot;Tuesday, March 12, 2024 - 11:52&quot;&gt;Tue, 2024-03-12 11:52&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Tue, 12 Mar 2024 15:52:11 +0000</pubDate>
</item>
<item>
	<title>Clark Roundy: Navigating the IoT &amp; Edge Landscape: Insights from the 2023 Commercial Adoption Survey Report</title>
	<guid isPermaLink="false">7541 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/clark-roundy/navigating-iot-edge-landscape-insights-2023-commercial-adoption-survey-report</link>
	<description>&lt;span&gt;Navigating the IoT &amp;amp; Edge Landscape: Insights from the 2023 Commercial Adoption Survey Report&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;We are excited to introduce the much-anticipated fifth edition of the Eclipse Foundation’s annual &lt;/span&gt;&lt;a href=&quot;https://outreach.eclipse.foundation/iot-edge-commercial-adoption-2023&quot;&gt;&lt;span&gt;IoT &amp;amp; Edge Commercial Adoption Survey Report.&lt;/span&gt;&lt;/a&gt;&lt;span&gt; The latest findings shed light on some of the shifts within the industry that unfolded over the past year, and how certain trends have persisted.  Let’s take a look at a few of the key takeaways and explore what they mean for the future of IoT and edge computing:&lt;/span&gt;&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;A Noteworthy Rise in IoT Adoption&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The numbers speak for themselves – in 2023 there was a remarkable 11% increase in IoT adoption, with 64% of respondents now deploying IoT solutions. This surge signals a growing recognition of the value and potential that IoT technologies offer across various industries. Moreover, an additional 23% are gearing up to embrace IoT, with plans to deploy within the next 12-24 months. &lt;/span&gt;&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;Steady Adoption, Anticipated Acceleration in Edge Computing&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;While IoT adoption demonstrated healthy growth, the adoption rate of edge computing remained steady year-over-year at 33%. Nevertheless, it would seem that an adoption surge is on the horizon, with 30% planning deployments within the next 24 months. Meanwhile, an additional 27%, are evaluating the potential use of edge computing platforms, while only 10% remain on the sidelines. This all points to organisations taking a cautious but optimistic approach, with an anticipated acceleration of edge technology adoption for enhanced data processing and analysis closer to the source. Machine learning at the edge is a possible driver here.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;A Trend Towards Larger Financial Commitments &lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Confidence in IoT and edge technologies is on the rise, reflected in a notable shift towards higher investments. In 2023, 17% reported spending between $1-10 million, more than doubling the percentage from 2022, and projections show this growing to 23% in 2024. Furthermore, 5% anticipate spending over $10 million, indicating a trend towards substantial financial commitments in these domains.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;Deployments are Scaling Up&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The scale of IoT and edge deployments is also evolving, with 10% of deployments now consisting of 50,000 or more devices. This shift towards larger deployments is accompanied by an almost equal mix between greenfield and brownfield implementations, indicating diverse approaches to integrating new and existing technologies.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;Organisations Recognize the Strategic Value of IoT &amp;amp; Edge Tech&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;A notable development in 2023 is the increased influence of C-suite executives in driving decisions related to IoT and edge investments. Nearly half of participating organisations report that their investment choices are predominantly driven by top-level executives, a substantial rise from 38% in 2022. This trend underscores the strategic importance of IoT and edge technologies in shaping business directions and outcomes.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;The Rising Tide of Open Source&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Open source technologies have taken centre stage in the deployment of IoT and edge solutions, with a whopping 75% of organisations actively incorporating open source into their plans. This overwhelming embrace reflects the critical role open source plays in fostering innovation, flexibility, and collaboration in the development of IoT and edge solutions.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;As organisations increasingly recognise the value of these technologies, the trends toward larger deployments, higher investments, and the strategic involvement of the C-suite are likely to continue. Moreover, the embrace of open source technologies signifies continual viability of open, collaborative, and innovative approaches to technology deployment. To learn more about open source in IoT and edge computing, explore our industry collaborations like &lt;/span&gt;&lt;a href=&quot;https://iot.eclipse.org/&quot;&gt;&lt;span&gt;Eclipse IoT&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;https://sparkplug.eclipse.org/&quot;&gt;&lt;span&gt;Sparkplug&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, and the &lt;/span&gt;&lt;a href=&quot;https://edgenative.eclipse.org/&quot;&gt;&lt;span&gt;Edge Native special interest group (SIG)&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;While these are some of the high level takeaways from this year’s survey, I encourage you to &lt;/span&gt;&lt;a href=&quot;https://outreach.eclipse.foundation/iot-edge-commercial-adoption-2023&quot;&gt;&lt;span&gt;dive into the report yourself&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. These insights aren't just reflections of our past, but serve as a guide for the future of IoT and edge computing. Let’s keep the conversation going, collaborate often, and collectively continue to shape the path forward.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;Clark Roundy&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-03-12T09:42:08-04:00&quot; title=&quot;Tuesday, March 12, 2024 - 09:42&quot;&gt;Tue, 2024-03-12 09:42&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Tue, 12 Mar 2024 13:42:08 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: The Eclipse Foundation Unveils 2023 IoT and Edge Commercial Adoption Survey Insights</title>
	<guid isPermaLink="false">40013 at https://newsroom.eclipse.org</guid>
	<link>https://newsroom.eclipse.org/news/announcements/eclipse-foundation-unveils-2023-iot-and-edge-commercial-adoption-survey-insights</link>
	<description>&lt;span&gt;The Eclipse Foundation Unveils 2023 IoT and Edge Commercial Adoption Survey Insights &lt;/span&gt;

&lt;span&gt;&lt;span&gt;Jacob Harris&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-03-12T06:45:00-04:00&quot; title=&quot;Tuesday, March 12, 2024 - 06:45&quot;&gt;Tue, 2024-03-12 06:45&lt;/time&gt;
&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;BRUSSELS – 12 March 2024 – &lt;/strong&gt;The Eclipse Foundation, one of the world’s largest open source foundations, today announced the availability of its &lt;a href=&quot;https://outreach.eclipse.foundation/iot-edge-commercial-adoption-2023&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;2023 IoT and Edge Commercial Adoption Survey Report&lt;/u&gt;&lt;/a&gt;, a comprehensive analysis derived from responses of over 1067 professionals in the IoT and edge computing domain.  Conducted online from 4 April to 5 July 2023, the survey offers valuable insights into the evolving IoT and edge computing ecosystems by identifying the requirements, priorities, and challenges faced by organisations that deploy and use commercial solutions, including those based on open source technologies. &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;“Consistent with our previous surveys, the continuous growth and adoption of IoT and edge computing remains evident. The data reflects a notable increase in the number of managed devices and larger investments, indicative of a scale-up in deployments,” said Mike Milinkovich, executive director of the Eclipse Foundation. “Particularly notable is that the C-suite significantly influences decision-making for IoT and edge investments. This underscores the strategic value that businesses place on solutions based on open technologies in real-world deployments. Open source components are recognised as vital enablers of success.”&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Survey participants represent a broad range of industries and job functions. Six of the key takeaways from the survey data include:&lt;/p&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;IoT Adoption Surged in 2023: &lt;/strong&gt;64% of respondents are now deploying IoT solutions, up from 53% in 2022. An additional 23% plan to deploy within 12-24 months. Less than 5% have no IoT deployment plan.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Edge Computing Adoption Holds Steady, Acceleration Anticipated: &lt;/strong&gt;Adoption of edge computing solutions remains at 33% (same as 2022), with an additional 30% indicating plans to deploy within the next 24 months. 27% are still evaluating edge platforms, while only 10% have no plans to deploy edge solutions.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Rising Investments Signal Scale-Up in Production Deployments: &lt;/strong&gt; 17% of respondents spent between $1-10M in 2023 (more than double that of 2022), growing to 23% in 2024. 5% anticipate spending over $10M. This trend indicates a transition from proof-of-concept to ROI-focused deployments.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Growing Number of IoT &amp;amp; Edge Assets per Deployment: Deployments of fewer than 1K managed assets will remain steady or decline, while larger deployments are on the rise, with an impressive 10% of deployments consisting of 50K or more devices. Regarding asset implementation, the mix between greenfield and brownfield is almost equal.&lt;/strong&gt;&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;IoT is Increasingly Strategic with the C-Suite Driving Investment Decisions:&lt;/strong&gt; 49% of organisations reveal that the C-suite predominantly drives decisions. This marks a significant increase from the 38% reported in 2022, indicating a growing influence of top-level executives in shaping investment choices within the realm of IoT and edge technologies.&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt; &lt;strong&gt;75% of Organisations Surveyed Embrace Open Source in IoT and Edge: &lt;/strong&gt;75% of organisations are actively incorporating open source into their deployment plans. The widespread use of IoT and edge solutions based on open source technologies highlights how open source has become key in shaping today's technology landscape.&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;ltr&quot;&gt;The report also delves into industry-specific insights on IoT and edge adoption, highlights the primary concerns and challenges encountered by commercial adopters, and provides actionable recommendations for navigating the evolving landscape. To find out more, download the &lt;a href=&quot;https://outreach.eclipse.foundation/iot-edge-commercial-adoption-2023&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;2023 IoT &amp;amp; Edge Commercial Adoption Survey Report&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;The IoT and Edge Commercial Adoption Survey is sponsored by the &lt;a href=&quot;https://iot.eclipse.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Eclipse IoT&lt;/u&gt;&lt;/a&gt; and &lt;a href=&quot;https://sparkplug.eclipse.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Sparkplug&lt;/u&gt;&lt;/a&gt; Working Groups. It serves as a valuable complement to the annual &lt;a href=&quot;https://outreach.eclipse.foundation/iot-edge-developer-survey-2023&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;IoT Developer Survey&lt;/u&gt;&lt;/a&gt;, a vital source of strategic insights from the development front lines. The Eclipse IoT community represents one of the largest IoT-focused open source collaborations in the world, with 45 members and over 50 projects. Eclipse IoT projects have been broadly adopted by leading organisations across a variety of verticals to deliver commercial IoT and edge-based solutions and services.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;To learn more about how to get involved with the &lt;a href=&quot;https://iot.eclipse.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Eclipse IoT&lt;/u&gt;&lt;/a&gt;, &lt;a href=&quot;https://sparkplug.eclipse.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Sparkplug&lt;/u&gt;&lt;/a&gt;, or other Eclipse Foundation industry collaborations, visit the &lt;a href=&quot;https://www.eclipse.org/membership/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Eclipse Foundation membership &lt;/u&gt;&lt;/a&gt;page. Members benefit from a broad range of services, including exclusive access to detailed industry research findings, marketing assistance, and expert open source governance.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;For further IoT &amp;amp; edge related information, please reach us at:&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:IoT@eclipse.org&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;IoT@eclipse.org&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Moreover, mark your calendars for the inaugural &lt;a href=&quot;https://opencode-x.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Open Code Experience (OCX)&lt;/u&gt;&lt;/a&gt; by the Eclipse Foundation, dedicated to open source software development. Join us 22-24 October 2024 in Mainz, Germany. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;About the Eclipse Foundation&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;The Eclipse Foundation provides our global community of individuals and organisations with a business-friendly environment for open source software collaboration and innovation. We host the Eclipse IDE, Adoptium, Software Defined Vehicle, Jakarta EE, and over 415 open source projects, including runtimes, tools, specifications, and frameworks for cloud and edge applications, IoT, AI, automotive, systems engineering, open processor designs, and many others. Headquartered in Brussels, Belgium, the Eclipse Foundation is an international non-profit association supported by over 360 members. Visit us at this year’s &lt;a href=&quot;https://opencode-x.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Open Code Experience (OCX)&lt;/u&gt;&lt;/a&gt; conference on 22-24 October 2024 in Mainz, Germany. To learn more, follow us on social media &lt;a href=&quot;https://twitter.com/EclipseFdn&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;@EclipseFdn&lt;/u&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/company/34093/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;LinkedIn&lt;/u&gt;&lt;/a&gt;, or visit &lt;a href=&quot;http://eclipse.org&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;eclipse.org&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Third-party trademarks mentioned are the property of their respective owners.&lt;/p&gt;
&lt;p class=&quot;text-align-center&quot; dir=&quot;ltr&quot;&gt;###&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Media contacts:&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;u&gt;Schwartz Public Relations for the Eclipse Foundation, AISBL (Germany)&lt;/u&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Stephanie Brüls / Susanne Pawlik&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Sendlinger Straße 42A&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;80331 Munich&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:EclipseFoundation@schwartzpr.de&quot; rel=&quot;nofollow&quot;&gt;EclipseFoundation@schwartzpr.de&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;+49 (89) 211 871 – 64 / -35&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;u&gt;Nichols Communications for the Eclipse Foundation, AISBL&lt;/u&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Jay Nichols&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:jay@nicholscomm.com&quot; rel=&quot;nofollow&quot;&gt;jay@nicholscomm.com&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;+1 408-772-1551&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;u&gt;514 Media Ltd for the Eclipse Foundation, AISBL (France, Italy, Spain)&lt;/u&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Benoit Simoneau&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:benoit@514-media.com&quot; rel=&quot;nofollow&quot;&gt;benoit@514-media.com&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;M: +44 (0) 7891 920 370&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 12 Mar 2024 10:45:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse Theia 1.47 Release: News and Noteworthy</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/03/07/eclipse-theia-1-47-release-news-and-noteworthy/</guid>
	<link>https://eclipsesource.com/blogs/2024/03/07/eclipse-theia-1-47-release-news-and-noteworthy/</link>
	<description>&lt;p&gt;We are happy to announce the Eclipse Theia 1.47 release! The release contains 64 merged pull requests and we welcome four new contributors. In this article we will highlight some selected improvements â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/03/07/eclipse-theia-1-47-release-news-and-noteworthy/&quot; rel=&quot;nofollow&quot;&gt; Eclipse Theia 1.47 Release: News and Noteworthy&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: 2024 Eclipse Foundation Board Election Results</title>
	<guid isPermaLink="false">40001 at https://newsroom.eclipse.org</guid>
	<link>https://newsroom.eclipse.org/news/announcements/2024-eclipse-foundation-board-election-results</link>
	<description>&lt;span&gt;2024 Eclipse Foundation Board Election Results&lt;/span&gt;

&lt;span&gt;&lt;span&gt;Gesine Freund&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-03-06T09:00:00-05:00&quot; title=&quot;Wednesday, March 6, 2024 - 09:00&quot;&gt;Wed, 2024-03-06 09:00&lt;/time&gt;
&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;2024 Eclipse Foundation Board Election Results&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;The Eclipse Foundation would like to thank everyone who participated in this year’s election process and is pleased to announce the results of the 2024 Eclipse Foundation Contributing Member and Committer Member elections for representatives to the foundation’s board. These positions are a vitally important part of the Eclipse Foundation's governance.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Hendrik Ebbers&lt;/strong&gt;, &lt;strong&gt;Johannes Matheis&lt;/strong&gt; are returning, and &lt;strong&gt;Angelo Corsaro&lt;/strong&gt; will be joining as the Contributing Member representatives. &lt;strong&gt;Ed Merks, Matthew Khouzam, &lt;/strong&gt;and &lt;strong&gt;Shelley Lambert &lt;/strong&gt;will all be returning as the Committer representatives. Congratulations! We're looking forward to working with them on the Board, effective April 1, 2024.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We thank George Adams, Torkild Ulvøy Resheim, Thomas Mäder, and Carlo Piana for running in this year’s election. &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;We also thank Gunnar Wagenknecht for his many years of service to the Eclipse Foundation Board.&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 06 Mar 2024 14:00:00 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Cloud DevTools Digest - January and February, 2024</title>
	<guid isPermaLink="false">7535 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-digest-january-and-february-2024</link>
	<description>&lt;span&gt;Eclipse Cloud DevTools Digest - January and February, 2024&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;h3&gt;&lt;span&gt;Eclipse Cloud DevTools Contributor Award for 2023 goes to EclipseSource and TypeFox&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The &lt;/span&gt;&lt;a href=&quot;https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-award-2023-goes-eclipsesource-and-typefox&quot;&gt;&lt;span&gt;Eclipse Cloud DevTools Contributor Award for the year 2023&lt;/span&gt;&lt;/a&gt;&lt;span&gt; was to two remarkable companies, &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/&quot;&gt;&lt;span&gt;EclipseSource&lt;/span&gt;&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a href=&quot;https://www.typefox.io/&quot;&gt;&lt;span&gt;TypeFox&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, in acknowledgment of their enormous, continuous, strategic, and sustainable contributions to the Eclipse Cloud DevTools ecosystem.&lt;/span&gt;&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;Adopter Story: Code RealTime&lt;/h3&gt;&lt;p&gt;In an &lt;a href=&quot;https://blogs.eclipse.org/post/john-kellerman/code-realtime-harnessing-power-eclipse-cloud-devtools-ecosystem&quot;&gt;earlier article&lt;/a&gt;, I wrote about&lt;span&gt; Code RealTime, an innovative tool for creating stateful, event-driven real time applications in C++, created by HCL and IBM and using the strengths of the&lt;/span&gt;&lt;a href=&quot;https://ecdtools.eclipse.org/&quot;&gt;&lt;span&gt; Eclipse Cloud DevTools&lt;/span&gt;&lt;/a&gt;&lt;span&gt; open source ecosystem, including &lt;/span&gt;&lt;a href=&quot;https://theia-ide.org/&quot;&gt;&lt;span&gt;Eclipse Theia&lt;/span&gt;&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a href=&quot;https://eclipse.dev/glsp/&quot;&gt;&lt;span&gt;Eclipse GLSP&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Languim&lt;/h3&gt;&lt;div class=&quot;align-center&quot;&gt;
  
  
  &lt;div class=&quot;field field--name-field-media-image field--type-image field--label-visually_hidden&quot;&gt;
    &lt;div class=&quot;field--label sr-only&quot;&gt;Image&lt;/div&gt;
              &lt;div class=&quot;field--item&quot;&gt;  &lt;img alt=&quot;Langium&quot; class=&quot;img-responsive&quot; height=&quot;105&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/styles/large/public/2024-03/langium.png?itok=jVLYLdfj&quot; width=&quot;480&quot; /&gt;


&lt;/div&gt;
          &lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://www.typefox.io/about/&quot;&gt;Markus Rudolph&lt;/a&gt; of &lt;a href=&quot;https://www.typefox.io/&quot;&gt;TypeFox&lt;/a&gt; provided a nice, instructive article on atting a React webview using Langium to a VS Code extension, resplendent with code examples.&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;Unveiling the Power of Open VSX&lt;/h3&gt;&lt;div class=&quot;align-center&quot;&gt;
  
  
  &lt;div class=&quot;field field--name-field-media-image field--type-image field--label-visually_hidden&quot;&gt;
    &lt;div class=&quot;field--label sr-only&quot;&gt;Image&lt;/div&gt;
              &lt;div class=&quot;field--item&quot;&gt;  &lt;img alt=&quot;open-vsx.org&quot; class=&quot;img-responsive&quot; height=&quot;232&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/styles/large/public/2023-05/open-vsx_0.png?itok=hovEH9pW&quot; width=&quot;480&quot; /&gt;


&lt;/div&gt;
          &lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;In this &lt;a href=&quot;https://blogs.eclipse.org/post/john-kellerman/unveiling-power-open-vsx-open-hub-top-vs-code-extensions&quot;&gt;article&lt;/a&gt; we discuss the success we've seen in the extensions hosted at &lt;a href=&quot;https://open-vsx.org/&quot;&gt;Open VSX&lt;/a&gt;, an open source registry for VS Code extensions, providing a decentralized and community-driven alternative to the Visual Studio Code Marketplace.&lt;/p&gt;&lt;h3&gt;Cloud DevTools Articles from EclipseSource&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/author/jonas-maximilian-philip/&quot;&gt;Jonas, Maximilian, and Philip&lt;/a&gt; of &lt;a href=&quot;https://eclipsesource.com/&quot;&gt;EclipseSource&lt;/a&gt; were busy in January and February with a series of informative articles about building and running cloud based IDEs. The article on AI integration for tools and IDEs is an especially worthy read.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2024/02/26/why-every-tools-and-ide-developer-should-care-about-ai-integration/&quot;&gt;Why Every Tool and IDE Project Should Care About AI Integration&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2024/01/08/theia-project-update-2023/&quot;&gt;The Eclipse Theia Project Update 2023&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2024/02/21/real-time-collaboration-on-diagrams-with-eclipse-glsp/&quot;&gt;Real-time Collaboration on Diagrams with Eclipse GLSP&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2024/02/12/building-custom-c-tools/&quot;&gt;Building Custom C/C++ Tools: CDT Cloud and Eclipse Theia in Action&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2024/02/07/accessibility-in-diagram-editors-with-eclipse-glsp/&quot;&gt;Accessibility in Diagram Editors with Eclipse GLSP&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2024/01/29/29/&quot;&gt;Running Eclipse Theia without a backend&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2024/01/22/hosting-ides-and-tools-online/&quot;&gt;Hosting IDEs and tools online - lessons learned&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2024/01/18/cdt-cloud-blueprint-tracing/&quot;&gt;CDT Cloud Blueprint: Tracing with TraceCompass Cloud&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2024/01/15/eclipse-theia-vs-code-oss/&quot;&gt;The Choice of an IDE and Tool Platform: Eclipse Theia vs. Code OSS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 dir=&quot;ltr&quot;&gt;GLSP 2.0!&lt;/h3&gt;&lt;img alt=&quot;GLSP 2.0&quot; class=&quot;align-center&quot; height=&quot;192&quot; src=&quot;https://eclipsesource.com/blogs/2024/01/31/eclipse-glsp-2-elevating-web-based-diagram-editors/images/helper-lines.gif&quot; width=&quot;542&quot; /&gt;&lt;p&gt;Jonas, Maximilian &amp;amp; Philip &lt;a href=&quot;https://eclipsesource.com/blogs/2024/01/31/eclipse-glsp-2-elevating-web-based-diagram-editors/&quot;&gt;announced GLSP 2.0&lt;/a&gt;, a major release. GLSP (Graphical Language Server Platform) is a framework for web-based diagram editors. Enhancements in 2.0 include improved JSON model support, helper lines for better element alignment, reconnectable server connections, ghost element rendering, front-end only support, among many other things&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;JKube 1.16 is Available&lt;/h3&gt;&lt;p&gt;The JKube team &lt;a href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-16&quot;&gt;announced&lt;/a&gt; the availability of 1.16. Enhancements included, among other things, a Helm Lint feature, support for Kube Recommended labels and updated base images.&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;The Eclipse Theia Community Release 2024-02&lt;/h3&gt;&lt;p&gt;Jonas, Maximilian &amp;amp; Philip also, in this &lt;a href=&quot;https://eclipsesource.com/blogs/2024/02/08/the-eclipse-theia-community-release-2023-11/&quot;&gt;article&lt;/a&gt;, tell us about their latest Theia Community Release. 2024-02 includes a beta release of Theia IDE, portable mode support, and number of other enhancements.&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;Other Recent Releases&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Theia&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2024/02/09/eclipse-theia-1-46-release-news-and-noteworthy/&quot;&gt;1.46.0&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2024/03/07/eclipse-theia-1-47-release-news-and-noteworthy/&quot;&gt;1.47.0&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Sprotty&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/ecd.sprotty/releases/1.1.0&quot;&gt;1.1.0&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Cloud Tool Time Webinars&lt;/h3&gt;&lt;p&gt;We are now scheduling Cloud Tool Time webinars for 2023. Be sure to &lt;a href=&quot;https://forms.gle/K8ZuJ26YqoyMC9dD7&quot;&gt;Sign up&lt;/a&gt; now to get on the calendar and let us help tell your story. You can see past sessions on our &lt;a href=&quot;https://www.youtube.com/playlist?list=PLy7t4z5SYNaSBxx8gLh0i9LlN2bZW6H1L&quot;&gt;Youtube channel&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Eclipse Cloud DevTools Projects&lt;/h3&gt;&lt;img alt=&quot;Eclipse Cloud DevTools&quot; class=&quot;align-center&quot; height=&quot;108&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2023-07/Cloud%20DevTools.png&quot; width=&quot;465&quot; /&gt;&lt;p&gt;Explore the &lt;a href=&quot;https://ecdtools.eclipse.org/projects/&quot;&gt;Eclipse Cloud DevTools ecosystem&lt;/a&gt;! Check out our projects page to find out more about open source innovation for cloud IDEs, extension marketplaces, frameworks and more.&lt;/p&gt;&lt;h3&gt;Getting Listed on the Cloud DevTools Blog&lt;/h3&gt;&lt;p&gt;If you are working with, or on, anything in the Cloud DevTools space, &lt;a href=&quot;https://blogs.eclipse.org/post/brian-king/getting-listed-cloud-devtools-blog&quot;&gt;learn how to get your writings posted&lt;/a&gt; in our &lt;a href=&quot;https://ecdtools.eclipse.org/resources/blogs/&quot;&gt;blog section&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-03-05T12:50:26-05:00&quot; title=&quot;Tuesday, March 5, 2024 - 12:50&quot;&gt;Tue, 2024-03-05 12:50&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Tue, 05 Mar 2024 17:50:26 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Cloud DevTools Contributor Award: Marc Dumais for Simplifying License Management</title>
	<guid isPermaLink="false">7532 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-award-marc-dumais-simplifying-license</link>
	<description>&lt;span&gt;Eclipse Cloud DevTools Contributor Award: Marc Dumais for Simplifying License Management&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;&lt;span&gt;The Eclipse Cloud Developer Tools (ECDT) community is happy to announce Marc Dumais as the recipient of the Contributor Award for the first quarter of 2024. This is in recognition of Marc's outstanding contributions that have significantly simplified third-party license checks across ECDT projects, contributing to enhanced project integrity and compliance.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Marc significantly simplified the approach to third-party license (3PP) checks. Traditionally, these checks have been a cumbersome and manual necessity, often slowing down project development. Marc created a modular, more configurable wrapper to dash-licenses, now available as the npm package&lt;/span&gt;&lt;a href=&quot;https://www.npmjs.com/package/@eclipse-dash/nodejs-wrapper&quot;&gt;&lt;span&gt; @eclipse-dash/nodejs-wrapper&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. This tool, developed under the Eclipse Foundation's technology.dash project, makes license compliance checks more accessible and streamlined for projects within and beyond the ECDT ecosystem. For those interested in the technical intricacies of this contribution, the integration details and its application can be explored in depth&lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse-theia/theia/issues/13426&quot;&gt;&lt;span&gt; here&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;This contribution by Marc transcends the code; it exemplifies the spirit of collaboration and innovation that the ECDT community holds dear. By not only addressing a need within a project he was directly involved in,  but also championing the solution for wider adoption, Marc has significantly eased the burden of license compliance for numerous projects within our community.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Marc Dumais is no stranger to the ECDT ecosystem. His long-standing commitment and versatile contributions across several projects, including Eclipse Theia, TraceCompass Cloud and CDT Cloud, have been instrumental in the shaping and evolution of the ecosystem. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;We extend our warmest congratulations to Marc Dumais for this well-deserved recognition! &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;This Eclipse Cloud DevTools contributor award is sponsored by&lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/&quot;&gt;&lt;span&gt; EclipseSource&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, providing&lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/services/tools/&quot;&gt;&lt;span&gt; consulting and implementation services&lt;/span&gt;&lt;/a&gt;&lt;span&gt; for&lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/web-and-cloud-based-tools/&quot;&gt;&lt;span&gt; web-based tools&lt;/span&gt;&lt;/a&gt;&lt;span&gt;,&lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/technology/eclipse-glsp/&quot;&gt;&lt;span&gt; Eclipse GLSP&lt;/span&gt;&lt;/a&gt;&lt;span&gt;,&lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/technology/eclipse-theia/&quot;&gt;&lt;span&gt; Eclipse Theia&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, and&lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/technology/vs-code/&quot;&gt;&lt;span&gt; VS Code&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-03-05T12:48:30-05:00&quot; title=&quot;Tuesday, March 5, 2024 - 12:48&quot;&gt;Tue, 2024-03-05 12:48&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Tue, 05 Mar 2024 17:48:30 +0000</pubDate>
</item>
<item>
	<title>TypeFox: Langium 3.0 is Released!</title>
	<guid isPermaLink="true">https://www.typefox.io/blog/langium-release-3.0</guid>
	<link>https://www.typefox.io/blog/langium-release-3.0</link>
	<description>Langium 3.0 is released! This release brings us new improvements &amp;amp; features, like reduced bundle size, ESM support, and more.</description>
	<pubDate>Tue, 05 Mar 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Join Us: Reminder for the Eclipse Theia Community Call! March 14th</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/03/04/theia-community-call/</guid>
	<link>https://eclipsesource.com/blogs/2024/03/04/theia-community-call/</link>
	<description>&lt;p&gt;As the date approaches, we want to extend another warm invitation to the Eclipse Theia Community Call scheduled for March 14th, 2024, 4pm CET. It’s a great opportunity to dive deep into the world of …&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/03/04/theia-community-call/&quot; rel=&quot;nofollow&quot;&gt; Join Us: Reminder for the Eclipse Theia Community Call! March 14th&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Visualizing My Java Champion Journey</title>
	<guid isPermaLink="false">https://medium.com/p/d5b620dd71a3</guid>
	<link>https://donraab.medium.com/visualizing-my-java-champion-journey-d5b620dd71a3?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Mind mapping memories and metrics from the before and after times.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*n4_3sw-AbpQa0opjT7oQIQ.png&quot; /&gt;&lt;figcaption&gt;Freeze Frame — Oracle CodeOne 2018&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;The Journey Continues&lt;/h3&gt;&lt;p&gt;Last year I captured a &lt;a href=&quot;https://donraab.medium.com/my-journey-to-and-as-a-java-champion-5b692786a3ba?source=friends_link&amp;amp;sk=d786bc6b65671632ebb10184b5ec3468&quot;&gt;blog with a mind map&lt;/a&gt; including the things I believe had contributed to me being selected as a Java Champion in 2018. This week I captured a mind map of everything I have done in similar categories since 2018. There was some missing time in the conference talks due to the pandemic, but I made up some lost ground last year with four conference talks. I spoke at Devnexus 2023, QCon New York 2023, Devoxx Greece 2023, Devoxx Belgium 2023. I’m not going to write too much text in this blog. I will just leave the before and after Java Champion mind maps for comparison, along with a photo from my first talk as a Java Champion from Oracle CodeOne 2018.&lt;/p&gt;&lt;h4&gt;Before Java Champion&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*dlziDJI2YYWCVMIlGUAGdQ.png&quot; /&gt;&lt;figcaption&gt;My Journey before July 2018&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;After Java Champion&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*byfH1ArI1XqKfEfutnT2eA.png&quot; /&gt;&lt;figcaption&gt;My Journey after July 2018&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Mapping the Memories&lt;/h4&gt;&lt;p&gt;One benefit I have seen out of this activity is quantifying the resulting impact on the communities and initiatives I have been involved with over time. I will try to capture an update every few years so I can have snapshots of how my journey is evolving.&lt;/p&gt;&lt;p&gt;It was very nostalgic for me, going back through old photos and recalling things that can be easily forgotten. I am including a photo below from Oracle CodeOne 2018, which was the first conference I spoke at where I was able to add Java Champion to my speaker bio. Some of the benefits of speaking at and attending technical conferences are the amazing people you get to meet, and the global network you can grow if you invest some time and energy in building connections. It helps to find good places to meet for coffee before, during and after a conference.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*1e4qNVBjZ7XhpQjhD9xDcg.png&quot; /&gt;&lt;figcaption&gt;Java Champions Leo MR Lima and Nikhil Nanivadekar with me at our JVM Language Compare Talk&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Thank you for reading, and best of luck on your journeys!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=d5b620dd71a3&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 02 Mar 2024 04:34:10 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: 2023 in Review: Eclipse Software Defined Vehicle (SDV) Accelerates Automotive Tech Innovation through Open Source Collaboration</title>
	<guid isPermaLink="false">39968 at https://newsroom.eclipse.org</guid>
	<link>https://newsroom.eclipse.org/news/announcements/2023-review-eclipse-software-defined-vehicle-sdv-accelerates-automotive-tech</link>
	<description>&lt;span&gt;2023 in Review: Eclipse Software Defined Vehicle (SDV) Accelerates Automotive Tech Innovation through Open Source Collaboration&lt;/span&gt;

&lt;span&gt;&lt;span&gt;Jacob Harris&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-02-27T07:00:00-05:00&quot; title=&quot;Tuesday, February 27, 2024 - 07:00&quot;&gt;Tue, 2024-02-27 07:00&lt;/time&gt;
&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;BRUSSELS – February 27, 2024 – &lt;/strong&gt;&lt;a href=&quot;http://www.eclipse.org&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;The Eclipse Foundation&lt;/u&gt;&lt;/a&gt;, one of the world’s largest open source foundations, in conjunction with the Eclipse Software Defined Vehicle (SDV) Working Group, today announced highlights of its many accomplishments and overall progress in 2023, along with a preview of what’s coming in 2024 and beyond. During the past year, Eclipse SDV launched more than a dozen new projects, hosted multiple events, and added leading OEMs like GM and Mercedes, while growing the overall membership by 14 new members. Most importantly, the working group began hosting code that is already planned for use in real-world production. &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;“The SDV Working Group experienced significant growth in 2023, and we anticipate this momentum to not only continue but also accelerate in 2024,” said Mike Milinkovich, executive director of the Eclipse Foundation. “Aligned with our community’s commitment to industry transformation, our primary objectives are twofold: first, establishing a code-first open source community dedicated to delivering production-ready software platforms; and second, cultivating a robust vendor-neutral ecosystem that is focused on delivering tangible value across the automotive value chain. To realise these ambitions, our focus is on crafting open source processes that ensure automotive-grade quality management, functional safety, and supply chain security.”&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Eclipse SDV enjoyed a notable surge in membership and experienced substantial project expansion throughout 2023. New members, including Cummins, DENSO, General Motors, HARMAN, LG Electronics, Mercedes-Benz Tech Innovation, and Qualcomm Innovation Center, demonstrate the quality and diversity of organisations that have recently joined the working group. Members currently contribute to and collaborate on &lt;a href=&quot;https://sdv.eclipse.org/projects/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;26 different projects&lt;/u&gt;&lt;/a&gt;, including technologies focused on fleet management, software orchestration and other real-world applications.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Building the SDV Ecosystem&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;In 2023, Eclipse SDV was dedicated to fostering collaboration and community growth, evident through numerous community events, strategic project additions, and alliances with automotive-focused organisations. The year marked several noteworthy highlights, showcasing our unwavering commitment to innovation in the automotive tech landscape:&lt;/p&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Inaugural Automotive Open Source Summit Success:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;ltr&quot;&gt;In early June, Eclipse SDV successfully launched its first-ever &lt;a href=&quot;https://www.automotive-oss.org/event/222cbfb1-46da-4f1a-8837-026d57706c24/summary&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Automotive Open Source Summit&lt;/u&gt;&lt;/a&gt;. The event attracted industry leaders from over 30 organisations including Bosch, Cariad (VW Group), the European Commission, Microsoft, Mercedes-Benz Tech Innovation, and ZF Group. Geared towards automotive tech executives, thought leaders and senior managers, the summit showcased speakers from Eclipse automotive initiatives and beyond. Due to its resounding success, a second summit is scheduled for May 14, 2024, in Starnberg, Germany.&lt;/p&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Eclipse Foundation Joins FEDERATE for Auto Ecosystem Growth:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;ltr&quot;&gt;Demonstrating its commitment to the EU auto ecosystem, the Eclipse Foundation joined FEDERATE, a project funded by Chips Joint Undertaking. This public-private partnership, supported by the Horizon Europe Framework Programme, unites major automotive players and industrial SDV initiatives. FEDERATE aims to accelerate the development of a future vehicle ecosystem, fostering collaboration, and supporting Research, Development and Innovation activities, aligning both software and hardware for the Software Defined Vehicle of the Future.&lt;/p&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Global Expansion and Community Day Engagement:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;ltr&quot;&gt;Following successful SDV Community Days in Lisbon (hosted by Microsoft) and Friedrichshafen (hosted by ZF Group), the SDV Working Group hosted another community event at EclipseCon in October, drawing over 100 attendees. The subsequent month saw an expanded global presence with appearances at events like SFCON 2023 in Bolzano, AutoTech: Europe in Berlin, SDVCON in Heilbronn, and Automotive IQ SDV week in Munich. Marking another milestone, the SDV Working Group participated in its inaugural event in Asia, EdgeTech + in Japan, connecting with major OEMs and hosting a local meet &amp;amp; greet at LG Electronics in Korea.&lt;/p&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;Successful Munich Hackathon Showcases SDV Innovation:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;ltr&quot;&gt;In late November, Eclipse SDV organised a hackathon in Munich, Germany, held at  Accenture’s Munich office. The event brought together automotive software enthusiasts to experiment with SDV tools and blueprints, build new features, and explore new ideas in vehicle development. With over 100 registrants organised into 15 teams, the hackathon yielded impressive results, drawing participants from across the globe and fostering collaboration and innovation in automotive software development.&lt;/p&gt;
&lt;ul&gt;
&lt;li dir=&quot;ltr&quot;&gt;&lt;strong&gt;A Safety-Certified Open Source RTOS Now Under Eclipse Foundation Governance: &lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;ltr&quot;&gt;In a groundbreaking move, Microsoft unveiled plans to transition Azure RTOS, along with all its components, to the &lt;a href=&quot;https://threadx.io/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Eclipse ThreadX&lt;/u&gt;&lt;/a&gt; open source project under Eclipse Foundation governance. The Eclipse ThreadX project will be under the purview of the Eclipse SDV Working Group. With a staggering 12 billion devices already deployed, this well-established technology takes centre stage, especially in the automotive sector. As the sole open source Real-Time Operating System (RTOS) boasting multiple safety and reliability certifications, including IEC 61508, IEC 62304, ISO 26262, and EN 50128, the transition to open source will mark a significant industry milestone. The added EAL4+ Common Criteria security certification further solidifies its position in the automotive technology landscape.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Looking ahead, a primary objective in this new year is to enhance collaboration within the Eclipse SDV Working Group and foster stronger connections across our diverse projects. Additionally, we are committed to achieving more seamless integration of communication protocols such as &lt;a href=&quot;https://projects.eclipse.org/projects/automotive.uprotocol&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Eclipse uProtocol&lt;/u&gt;&lt;/a&gt; and &lt;a href=&quot;https://zenoh.io/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Eclipse Zenoh&lt;/u&gt;&lt;/a&gt; within the SDV ecosystem. Another key initiative is the introduction of Eclipse SDV Blueprints, aimed at showcasing the capabilities of SDV projects targeting real-world use cases such as fleet management and software orchestration.  &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Join the Eclipse SDV Working Group&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Discover opportunities to actively contribute to the global centre of gravity for software defined vehicle innovation and collaboration. Our diverse membership of industry leaders, united by a code-first approach, drives innovation that is actively being adopted by the industry today. We offer an inclusive platform for companies of all sizes to contribute, ensuring a level playing field. Explore detailed membership information &lt;a href=&quot;https://sdv.eclipse.org/membership/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;here&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Explore Our Vision Paper&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;To delve deeper into the Eclipse SDV Working Group's vision for the industry, we encourage you to &lt;a href=&quot;https://outreach.eclipse.foundation/oss-auto-vision&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;download the SDV Vision Paper&lt;/u&gt;&lt;/a&gt;. This comprehensive document provides a detailed overview of the organisation's goals and predictions for the future of vehicle design.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Upcoming Events and Opportunities&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Get to know the Eclipse SDV Community by attending our upcoming &lt;a href=&quot;https://eclipsecon.regfox.com/sdv-community-day-graz-2024&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;SDV Community Day in Graz&lt;/u&gt;&lt;/a&gt; on February 28-29, 2024. This event promises valuable insights into SDV Working Group projects and offers opportunities to connect with other members of the automotive tech community.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;For a firsthand look at SDV projects and to network with other members, consider joining us at the annual &lt;a href=&quot;https://bosch-connected-world.com/conference/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Bosch Connected World&lt;/u&gt;&lt;/a&gt; event in Berlin from February 28-29, 2024. Register for the event to access the Eclipse SDV and Eclipse Foundation exhibitor's space on-site. See us in &lt;strong&gt;Booth G6.&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Later this year, the Eclipse Foundation will be hosting its inaugural event focused on automotive open source at the Open Code for Automotive conference, co-located with its newest global event for open source software, the &lt;a href=&quot;https://opencode-x.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Open Code Experience (OCX)&lt;/u&gt;&lt;/a&gt;, taking place on 22-24 October 2024 in Mainz, Germany.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;About the Eclipse Foundation&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;The Eclipse Foundation provides our global community of individuals and organisations with a business-friendly environment for open source software collaboration and innovation. We host the Eclipse IDE, Adoptium, Software Defined Vehicle, Jakarta EE, and over 415 open source projects, including runtimes, tools, specifications, and frameworks for cloud and edge applications, IoT, AI, automotive, systems engineering, open processor designs, and many others. Headquartered in Brussels, Belgium, the Eclipse Foundation is an international non-profit association supported by over 360 members. Come visit us at this year’s &lt;a href=&quot;https://opencode-x.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;Open Code Experience (OCX)&lt;/u&gt;&lt;/a&gt; conference, taking place on 22-24 October 2024 in Mainz, Germany. To learn more, follow us on social media &lt;a href=&quot;https://twitter.com/EclipseFdn&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;@EclipseFdn&lt;/u&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/company/34093/&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;LinkedIn&lt;/u&gt;&lt;/a&gt;, or visit &lt;a href=&quot;http://eclipse.org&quot; rel=&quot;nofollow&quot;&gt;&lt;u&gt;eclipse.org&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Third-party trademarks mentioned are the property of their respective owners.&lt;/p&gt;
&lt;p class=&quot;text-align-center&quot; dir=&quot;ltr&quot;&gt;###&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Media contacts:&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;u&gt;Schwartz Public Relations for the Eclipse Foundation, AISBL (Germany)&lt;/u&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Gloria Huppert, Franziska Wenzl&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:EclipseFoundation@schwartzpr.de&quot; rel=&quot;nofollow&quot;&gt;EclipseFoundation@schwartzpr.de&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;+49 (89) 211 871 - 70 / - 58&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;u&gt;Nichols Communications for the Eclipse Foundation, AISBL&lt;/u&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Jay Nichols&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:jay@nicholscomm.com&quot; rel=&quot;nofollow&quot;&gt;jay@nicholscomm.com&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;+1 408-772-1551&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;u&gt;514 Media Ltd for the Eclipse Foundation, AISBL (France, Italy, Spain)&lt;/u&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Benoit Simoneau&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;mailto:benoit@514-media.com&quot; rel=&quot;nofollow&quot;&gt;benoit@514-media.com&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;M: +44 (0) 7891 920 370&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 27 Feb 2024 12:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Ditto: Access Ditto Things from an Asset Administration Shell</title>
	<guid isPermaLink="true">https://www.eclipse.dev/ditto/2024-02-27-integrating-ditto-aas-basyx.html</guid>
	<link>https://www.eclipse.dev/ditto/2024-02-27-integrating-ditto-aas-basyx.html</link>
	<description>&lt;p&gt;Integrating digital representations of devices into an IT infrastructure is a recurring task in different domains and application areas.
To address this challenge in Industry 4.0 scenarios along the supply chain, the community specified the &lt;a href=&quot;https://industrialdigitaltwin.org/&quot;&gt;Asset Administration Shell&lt;/a&gt; within the Industrial Digital Twin Association (IDTA) to handle all kinds of information of a physical asset over its lifecycle.&lt;/p&gt;

&lt;p&gt;Eclipse Ditto provides a backend for handling such device data as Things and takes care of a number of general tasks that are otherwise easy to be done wrong,
such as handling device connectivity over different protocols or state management. Therefore, it is promising to use the benefits of Eclipse Ditto for populating an AAS infrastructure when the devices already communicate with an existing instance of Eclipse Ditto.&lt;/p&gt;

&lt;p&gt;In this post we want to share our solution and learnings from setting up an AAS infrastructure based on &lt;a href=&quot;https://eclipse.dev/basyx/&quot;&gt;Eclipse Basyx&lt;/a&gt; and Eclipse Ditto as a source for device state.&lt;/p&gt;

&lt;figure&gt;&lt;img alt=&quot;User-device interaction via AAS and IoT backend&quot; class=&quot;docimage&quot; src=&quot;https://eclipse.dev/ditto/images/blog/2024-02-15-integrating-ditto-ass-basyx/basic-interaction.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Figure 1:  User-device interaction via BaSyx and Ditto&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;We start with some background on the AAS and Eclipse Basyx. If you are allready familiar with both, it is safe to skip this section.&lt;/p&gt;

&lt;h3 id=&quot;asset-administration-shell&quot;&gt;Asset Administration Shell&lt;/h3&gt;

&lt;p&gt;The Asset Administration Shell (AAS) is a standardization effort of
the Industrial Digital Twin Association (IDTA) that originated from the
Platform Industry 4.0 (I4.0) (&lt;a href=&quot;https://industrialdigitaltwin.org/en/wp-content/uploads/sites/2/2023/04/IDTA-01001-3-0_SpecificationAssetAdministrationShell_Part1_Metamodel.pdf&quot;&gt;AAS Spec Part I&lt;/a&gt;; &lt;a href=&quot;https://industrialdigitaltwin.org/en/wp-content/uploads/sites/2/2023/04/IDTA-01002-3-0_SpecificationAssetAdministrationShell_Part2_API.pdf&quot;&gt;AAS Spec Part II&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;An AAS is a digital representation of a physical asset and consists of one or more submodels. Each submodel contains a structured set of submodel elements.
Submodels, as well as their submodel elements, can either be a type or an instance.
The AAS metamodel defines the possible elements for modeling an AAS like Asset, AssetAdminstrationShell (AAS), Submodel (SM), SubmodelElementCollection (SMEC),
Property, and SubmodelElement (SME). You can find further details &lt;a href=&quot;https://www.plattform-i40.de/IP/Redaktion/EN/Downloads/Publikation/2021_What-is-the-AAS.html&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://industrialdigitaltwin.org/en/wp-content/uploads/sites/2/2023/04/IDTA-01001-3-0_SpecificationAssetAdministrationShell_Part1_Metamodel.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A user who wants to interact with an AAS over HTTP follows the sequence of service calls depicted in Figure 2.
The flow starts by requesting an AAS ID from the AAS discovery interface based on a (local) specific asset ID or a global asset ID. An example of such an asset ID is a serial number written on the device. With the AAS ID, the user retrieves the endpoint for the AAS through the AAS registry interface.
The user then requests the SM ID from that AAS endpoint and uses this SM ID to get the SM endpoint from the SM Registry.
From that SM endpoint, the user can request the SME, which contains the required value.&lt;/p&gt;

&lt;figure&gt;&lt;img alt=&quot;Sequence of data flow through AAS infrastructure&quot; class=&quot;docimage&quot; src=&quot;https://eclipse.dev/ditto/images/blog/2024-02-15-integrating-ditto-ass-basyx/aas-sequenz.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Figure 2: Sequence of data flow through AAS infrastructure&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to dig deeper into the specifics of the AAS, consult the &lt;a href=&quot;https://www.plattform-i40.de/IP/Redaktion/DE/Downloads/Publikation/AAS-ReadingGuide_202201.html&quot;&gt;AAS Reading Guide&lt;/a&gt;, which helps the interested reader to navigate through the available material.&lt;/p&gt;

&lt;h3 id=&quot;eclipse-basyx&quot;&gt;Eclipse BaSyx&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.eclipse.org/BaSyx_/_Documentation_/_Components&quot;&gt;Eclipse BaSyx&lt;/a&gt; is an open-source project hosted by the Eclipse Foundation providing components to deploy an Industry 4.0 middleware.
Apart from other features, Eclipse BaSyx provides several easy-to-use off-the-shelf components to realize an AAS infrastructure:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.eclipse.org/BaSyx_/_Documentation_/_Components_/_AAS_Server&quot;&gt;AAS Server Component&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.eclipse.org/BaSyx_/_Documentation_/_Components_/_Registry&quot;&gt;Registry Component&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.eclipse.org/BaSyx_/_Documentation_/_Components_/_DataBridge&quot;&gt;DataBridge Component&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.eclipse.org/BaSyx_/_Documentation_/_Components_/_AAS_Web_UI&quot;&gt;AAS Web UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can pull them from Docker Hub or &lt;a href=&quot;https://wiki.eclipse.org/BaSyx_/_Documentation_/_Components_/_Docker&quot;&gt;follow the instructions&lt;/a&gt; to build them yourself.&lt;/p&gt;

&lt;p&gt;In this post, we mainly work with the AAS Server Component and the Registry Component.&lt;/p&gt;

&lt;h2 id=&quot;architectural-considerations&quot;&gt;Architectural Considerations&lt;/h2&gt;

&lt;p&gt;Making Eclipse Ditto Things available in an AAS infrastructure, in our case from the Eclipse Basyx project, boils down to making Thing data available as Submodels of an AAS accessible via the AAS Interface.&lt;/p&gt;

&lt;p&gt;We see three approaches to achieve this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BaSyx AAS SM server &lt;em&gt;pulls&lt;/em&gt; the current state from Eclipse Ditto via a &lt;em&gt;wrapper&lt;/em&gt; around Eclipse Ditto.
This approach requires the creation of a custom AAS infrastructure around Eclipse Ditto without the chance of reusing existing components of the Eclipse Basyx project.
The Eclipse Ditto project followed a comparable approach to support &lt;a href=&quot;https://eclipse.dev/ditto/2022-03-03-wot-integration.html&quot;&gt;Web of Things&lt;/a&gt; (WoT) definitions, which is another specification to integrate IoT devices from different contexts and align their utilized data model.
Ditto now allows the generation of new Things based on a WoT Thing Description.&lt;/li&gt;
  &lt;li&gt;BaSyx AAS SM server &lt;em&gt;pulls&lt;/em&gt; the current state from Eclipse Ditto via a &lt;em&gt;bridge&lt;/em&gt; component, which Eclipse Basyx already provides.
To integrate the bridge, the BaSyx SM-server component has a delegation feature, where the user can configure an SME with an endpoint to which the server delegates incoming requests.
The configured endpoint can reference the bridge that then retrieves the actual data from Ditto and applies transformation logic.&lt;/li&gt;
  &lt;li&gt;Eclipse Ditto &lt;em&gt;pushes&lt;/em&gt; the latest updates to a BaSyx SM server.
For this approach, we configure Eclipse Ditto to notify the BaSyx SM server about any change to the relevant Things. During the creation of the notification message, Ditto applies a payload mapping to transform the data into the AAS format. The BaSyx SM server then stores the received submodel element and responds directly to the requests by the users.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;&lt;img alt=&quot;Push approach sequence&quot; class=&quot;docimage&quot; src=&quot;https://eclipse.dev/ditto/images/blog/2024-02-15-integrating-ditto-ass-basyx/push.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Figure 3: Push approach sequence&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We follow the push approach here because it treats the AAS infrastructure as a blackbox and almost all configuration happens within Eclipse Ditto.&lt;/p&gt;

&lt;h2 id=&quot;mapping-of-data-models&quot;&gt;Mapping of Data Models&lt;/h2&gt;

&lt;p&gt;Eclipse Ditto and Eclipse Basyx work with different data structures and conceptual elements to represent device and asset data. Since we want to convert between these data models, we need to come up with a mapping between them.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Eclipse Ditto&lt;/th&gt;
      &lt;th&gt;Asset Administration Shell&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Namespace&lt;/td&gt;
      &lt;td&gt;Asset Administration Shell&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thing&lt;/td&gt;
      &lt;td&gt;—&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Features&lt;/td&gt;
      &lt;td&gt;Submodel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Property&lt;/td&gt;
      &lt;td&gt;Submodel Element&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Attribute&lt;/td&gt;
      &lt;td&gt;Submodel Element&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Table 1: Concept mapping from Eclipse Ditto to the AAS&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We map a Ditto &lt;a href=&quot;https://eclipse.dev/ditto/basic-namespaces-and-names.html#namespace&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Namespace&lt;/code&gt;&lt;/a&gt; to a single AAS. An AAS holds multiple SMs, and not all of these SMs necessarily have counterparts in Ditto. We thus treat a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thing&lt;/code&gt; as an opaque concept and do not define an explicit mapping for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thing&lt;/code&gt; but map each &lt;a href=&quot;https://eclipse.dev/ditto/basic-feature.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature&lt;/code&gt;&lt;/a&gt; to one SM.
&lt;a href=&quot;https://eclipse.dev/ditto/basic-feature.html#feature-properties&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://eclipse.dev/ditto/basic-thing.html#attributes&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Attribute&lt;/code&gt;&lt;/a&gt; are mapped to SMEs.&lt;/p&gt;

&lt;p&gt;By that, it is possible to have more than one Thing organized in one AAS.
This can especially be useful if an AAS organizes complex equipment with different sensors and actuators, which belong together but are organized in multiple Things.&lt;/p&gt;

&lt;h2 id=&quot;integration-steps&quot;&gt;Integration Steps&lt;/h2&gt;

&lt;p&gt;With the more theoretical details completed, we can now turn to the actual implementation and describe what is required
to integrate Eclipse Ditto into an AAS infrastructure of Eclipse BaSyx.&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Running instance of &lt;a href=&quot;https://eclipse.dev/ditto/&quot;&gt;Eclipse Ditto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Running instance of &lt;a href=&quot;https://wiki.eclipse.org/BaSyx_/_Documentation_/_Components_/_AAS_Server&quot;&gt;Eclipse BaSyx AAS Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Running instance of &lt;a href=&quot;https://wiki.eclipse.org/BaSyx_/_Documentation_/_Components_/_Registry&quot;&gt;Eclipse BaSyx AAS Registry&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those three instances must be available and a network connection must exist between them.
In the code snippets below, we use placeholders for the URLs of Ditto as well as BaSyx.
So, you need to replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ditto-instance-url&amp;gt;&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;basyx-server-instance-url&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;basyx-registry-instance-url&amp;gt;&lt;/code&gt;
with the proper URLs in your environment.&lt;/p&gt;

&lt;p&gt;For our setup, we used version 3.0.1 for Eclipse Ditto and version 1.4.0 for Eclipse BaSyx.
Please note that the Ditto demo instance, does not work for the described setup and requests because it does not allow to directly invoke the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/devops&lt;/code&gt; endpoints through which we later configure connections.&lt;/p&gt;

&lt;h3 id=&quot;payload-mappers-from-ditto-to-basyx&quot;&gt;Payload Mappers from Ditto to BaSyx&lt;/h3&gt;

&lt;p&gt;Let us assume a device with a sensor named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine:sensor&lt;/code&gt; that is capable of measuring temperature values.
This device may send sensor data to an Eclipse Ditto instance as a Ditto Protocol message &lt;a href=&quot;https://eclipse.dev/ditto/protocol-overview.html&quot;&gt;Ditto Protocol message&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;topic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine/sensor/things/twin/commands/modify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/features/temperature/properties/value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Listing 1: Ditto Protocol message for the Thing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine:senor&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If the device uses another message format, you can find more details on &lt;a href=&quot;https://eclipse.dev/ditto/connectivity-mapping.html&quot;&gt;how to map it&lt;/a&gt; to a Ditto Protocol message.&lt;/p&gt;

&lt;p&gt;After an update to a Thing, we want Ditto to map the information to an AAS-conforming representation and forward this via an outbound connection to an AAS server.
The task in Eclipse Ditto is to define &lt;a href=&quot;https://eclipse.dev/ditto/connectivity-mapping.html&quot;&gt;payload mappers&lt;/a&gt; for these transformations in accordance with the mapping from &lt;a href=&quot;https://eclipse.dev/ditto/feed.xml#mapping-of-data-models&quot;&gt;Mapping of Data Models&lt;/a&gt;. Ditto allows the usage of JavaScript to create the mappers. We thus configure connections in Ditto to the BaSyx components, where we filter for the relevant changes to a Thing and then trigger the respective mapper.&lt;/p&gt;

&lt;p&gt;We need to implement the following mappers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Creation of an AAS triggered by creation of new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;namespaces&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Creation of a SM triggered by creation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Creation and update of an SME triggered by creation and modification of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;map-from-thing-creation-to-aas-creation&quot;&gt;Map from Thing Creation to AAS Creation&lt;/h4&gt;

&lt;p&gt;The next snippet performs a mapping from a Thing to an AAS.
It gets executed every time a Thing is created.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mapFromDittoProtocolMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;criterion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dittoHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;extra&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dittoHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textPayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;conceptDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;identification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;idType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Custom&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;idShort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dataSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;modelType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;AssetAdministrationShell&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;identification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;idType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Custom&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;-asset&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;idShort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;-asset&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dataSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;modelType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Asset&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;embeddedDataSpecifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;embeddedDataSpecifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;submodels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bytePayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contentType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ditto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buildExternalMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The external headers Object containing header values&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;textPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The external mapped String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;bytePayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The external mapped byte[]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;contentType&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The returned Content-Type&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Listing 2: Payload mapping that creates a new AAS if a new Thing appears&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we map the Thing namespace to an AAS we only use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;namespace&lt;/code&gt;, which is the first part of the ID of a Thing.
For example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine&lt;/code&gt; in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine:sensor&lt;/code&gt; example Thing (Listing 1).
More precisely, the mapping creates a representation of an AAS with the ID &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;namespace&lt;/code&gt; and returns a new message with this text as payload. The Ditto connectivity service then runs the mapping and pushes the new message to the BaSyx AAS server to create the described AAS.
For example, whenever a Thing with the ID &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine:sensor&lt;/code&gt; is created, an AAS with the ID &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine&lt;/code&gt; will be created.&lt;/p&gt;

&lt;h3 id=&quot;map-from-feature-creation-to-submodel-creation&quot;&gt;Map from Feature creation to Submodel creation&lt;/h3&gt;

&lt;p&gt;The next mapper creates an AAS submodel and will be executed every time a new feature is created for a Thing.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mapFromDittoProtocolMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;criterion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dittoHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;extra&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feature_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dittoHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textPayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;idType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Custom&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;AssetAdministrationShell&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;identification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;idType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Custom&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;feature_id&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;idShort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;feature_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dataSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;modelType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Submodel&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;embeddedDataSpecifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;submodelElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bytePayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contentType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ditto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buildExternalMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The external headers Object containing header values&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;textPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The external mapped String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;bytePayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The external mapped byte[]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;contentType&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The returned Content-Type&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Listing 3: Payload mapping that creates a new AAS submodel if a new Feature appears&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Besides &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;namespace&lt;/code&gt;, this mapper uses the parameters &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; from the Ditto Protocol message.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; represents the second part of the Thing-ID, e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor&lt;/code&gt; from our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine:sensor&lt;/code&gt; example Thing (Listing 1).
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; describes the part of the Thing whose change triggered the processed Ditto Protocol message.
It may include the feature ID of the Thing or the whole path of the affected property of the Thing,
but it could be only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; after the creation of a Thing. In our &lt;a href=&quot;https://eclipse.dev/ditto/feed.xml#payload-mappers-from-ditto-to-basyx&quot;&gt;example message&lt;/a&gt; above,
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/features/temperature/properties/value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The mapping function extracts the ID of the feature from the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; and uses this together with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;
of the Thing to build the ID of the corresponding AAS submodel. For example, whenever the feature &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;temperature&lt;/code&gt;
of a Thing called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine:sensor&lt;/code&gt; is created, an AAS submodel with the ID &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor_temperature&lt;/code&gt; in the AAS &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine&lt;/code&gt; will be created.&lt;/p&gt;

&lt;p&gt;Similarly to the &lt;a href=&quot;https://eclipse.dev/ditto/feed.xml#map-from-thing-creation-to-aas-creation&quot;&gt;AAS creation mapping&lt;/a&gt;, the listed function returns a new message with a custom text payload.
Below, we will create a connection so that this payload gets pushed to the BaSyx AAS server to trigger the creation of an AAS submodel there.&lt;/p&gt;

&lt;h4 id=&quot;map-from-property-update-to-submodel-update&quot;&gt;Map from Property Update to Submodel Update&lt;/h4&gt;

&lt;p&gt;The next mapper creates an AAS submodel element.
we use it in the connection for every modification of a property in a Thing.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mapFromDittoProtocolMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;criterion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dittoHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;extra&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;property_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feature_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dittoHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dataType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dataType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mapDataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mapDataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;switch &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Undefined&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;BigInt&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Unknown&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textPayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;idType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Custom&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Submodel&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;feature_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;idShort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;property_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;valueType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;modelType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bytePayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contentType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ditto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buildExternalMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The external headers Object containing header values&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;textPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The external mapped String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;bytePayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The external mapped byte[]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;contentType&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The returned Content-Type&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Listing 4: Payload mapping that modifies an AAS submodel element if a property is changed&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The mapper extracts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature_id&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property_id&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt;, which is only possible if the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; includes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property_id&lt;/code&gt;. So, in the configuration of the connection, we have to ensure that this mapper only runs for the right messages.
Moreover, we can access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; of the modified &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property&lt;/code&gt;, which will be set as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; in the submodel element from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;textPayload&lt;/code&gt; output.&lt;/p&gt;

&lt;p&gt;For example, if a message updates the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/features/temperature/properties/value&lt;/code&gt; in the Thing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine:sensor&lt;/code&gt;, the submodel element with the ID &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties_value&lt;/code&gt; in the submodel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sensor_temperature&lt;/code&gt; will be updated with the new temperature as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We update a submodel element instead of the whole submodel if an existing Thing changes because the mapper only has access to the changed property of the Thing and no information about the other properties.
Therefore, submodel elements, which may already be part of the submodel due to previous updates, would implicitly be dropped.
With our approach, we preserve the existing properties and only modify the updated properties.&lt;/p&gt;

&lt;h4 id=&quot;create-a-connection-to-the-basyx-aas-server&quot;&gt;Create a Connection to the BaSyx AAS Server&lt;/h4&gt;

&lt;p&gt;To apply the introduced mappers, we configure a new &lt;a href=&quot;https://eclipse.dev/ditto/basic-connections.html&quot;&gt;Ditto connection&lt;/a&gt; to a BaSyx AAS server.
The listings below show the respective HTTP calls using curl to configure this connection.&lt;/p&gt;

&lt;p&gt;The JavaScript mappers from above are part of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;piggybackCommand.connection.mappingDefinitions&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mappingforShell&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mappingforSubmodel&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mappingforSubmodelElement&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the example, we use the placeholder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ditto-instance-url&amp;gt;&lt;/code&gt; for the used Ditto instance. You need to adjust to the valid URL of your environment.
We assume you have access rights to the Ditto &lt;a href=&quot;https://eclipse.dev/ditto/installation-operating.html#devops-commands&quot;&gt;Devops Commands&lt;/a&gt; credentials in the used instance (username: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devops&lt;/code&gt;, password: `foobar is the default).&lt;/p&gt;

&lt;p&gt;You can change the password by setting the environment variable &lt;em&gt;DEVOPS_PASSWORD&lt;/em&gt; in the &lt;a href=&quot;https://eclipse.dev/ditto/architecture-services-gateway.html&quot;&gt;gateway service&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, an already existing password can be obtained and stored as an environment variable using the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEVOPS_PWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;kubectl &lt;span class=&quot;nt&quot;&gt;--namespace&lt;/span&gt; ditto get secret my-ditto-gateway-secret &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;jsonpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{.data.devops-password}&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--decode&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please be aware that this command assumes Ditto has been deployed within a namespace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ditto&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, you adjust the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;piggybackCommand.connection.uri&lt;/code&gt; with the URL of the running BaSyx server to which Ditto should have network connectivity.&lt;/p&gt;

&lt;p&gt;As HTTP requires us to replace certain characters for proper processing, we encode the payload by escaping certain characters and removing the line breaks.
We replaced newlines with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'&quot;'&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; devops:foobar &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--data-binary&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;targetActorSelection&quot;: &quot;/system/sharding/connection&quot;,
    &quot;headers&quot;: {
      &quot;aggregate&quot;: false
    },
    &quot;piggybackCommand&quot;: {
      &quot;type&quot;: &quot;connectivity.commands:createConnection&quot;,
      &quot;connection&quot;: {
        &quot;id&quot;: &quot;basyxserver-http-connection&quot;,
        &quot;connectionType&quot;: &quot;http-push&quot;,
        &quot;connectionStatus&quot;: &quot;open&quot;,
        &quot;uri&quot;: &quot;&amp;lt;basyx-server-instance-url&amp;gt;:4001&quot;,
        &quot;failoverEnabled&quot;: true,
        &quot;mappingDefinitions&quot;: {
          &quot;mappingforShell&quot;: {
            &quot;mappingEngine&quot;: &quot;JavaScript&quot;,
            &quot;options&quot;: {
              &quot;outgoingScript&quot;: &quot;function mapFromDittoProtocolMsg(namespace, name, group, channel, criterion, action, path, dittoHeaders, value, status, extra) {\n  let headers = dittoHeaders;\n  let textPayload = JSON.stringify({\n    conceptDictionary: [],\n    identification: {\n      idType: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Custom'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n      id: namespace\n    },\n    idShort: namespace,\n    dataSpecification: [],\n    modelType: {\n      name: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'AssetAdministrationShell'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\n    },\n    asset: {\n      identification: {\n        idType: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Custom'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n        id: namespace + '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'-asset'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\n      },\n      idShort: namespace + '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'-asset'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n      kind: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Instance'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n      dataSpecification: [],\n      modelType: {\n        name: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Asset'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\n      },\n      embeddedDataSpecifications: []\n    },\n    embeddedDataSpecifications: [],\n    views: [],\n    submodels: []\n  });\n  let bytePayload = null;\n  let contentType = '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'application/json'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';\n  return Ditto.buildExternalMsg(headers, textPayload, bytePayload, contentType);}&quot;            
            }
          },
          &quot;mappingforSubmodel&quot;: {
            &quot;mappingEngine&quot;: &quot;JavaScript&quot;,
            &quot;options&quot;: {
                &quot;outgoingScript&quot;: &quot;function mapFromDittoProtocolMsg(namespace, name, group, channel, criterion, action, path, dittoHeaders, value, status, extra) {\n  \n  let feature_id = path.split('&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;').slice(2);\n  let headers = dittoHeaders;\n  let textPayload = JSON.stringify(\n    {\n      parent: {\n        keys: [\n          {\n            idType: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Custom'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n            type: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'AssetAdministrationShell'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n            value: namespace,\n            local: true\n          }\n        ]\n      },\n      identification: {\n        idType: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Custom'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n        id: name+'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'_'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'+feature_id\n      },\n      idShort: name+'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'_'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'+feature_id,\n      kind: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Instance'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n      dataSpecification: [],\n      modelType: {\n        name: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Submodel'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\n      },\n      embeddedDataSpecifications: [],\n      submodelElements: []\n    }\n\n  );\n  let bytePayload = null;\n  let contentType = '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'application/json'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';\n  return Ditto.buildExternalMsg(headers, textPayload, bytePayload, contentType);}&quot;
            }
          },
          &quot;mappingforSubmodelElement&quot;: {
            &quot;mappingEngine&quot;: &quot;JavaScript&quot;,
            &quot;options&quot;: {
              &quot;outgoingScript&quot;: &quot;function mapFromDittoProtocolMsg(namespace, name, group, channel, criterion, action, path, dittoHeaders, value, status, extra) {\n  let property_id = path.split('&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;').slice(3).join('&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'_'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;');\n  let feature_id = path.split('&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;').slice(2,3);\n  let headers = dittoHeaders;\n  let dataType = typeof value;\n  dataType = mapDataType(dataType)\n\n  function mapDataType(dataType) {\n    switch (dataType) {\n        case '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'undefined'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':\n        return '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Undefined'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';\n        case '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'boolean'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':\n        return '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'boolean'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';\n        case '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'number'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':\n        return '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'int'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';\n        case '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'string'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':\n        return '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'string'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';\n        case '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'symbol'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':\n        return '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Symbol'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';\n        case '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'bigint'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':\n        return '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'BigInt'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';\n        case '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'object'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':\n        return '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'string'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';\n        case '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'function'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':\n        return '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Function'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';\n        default:\n        return '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Unknown'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';\n    }\n  }\n  let textPayload = JSON.stringify(\n  {\n    parent: {\n      keys: [\n        {\n          idType: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Custom'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n          type: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Submodel'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n          value: name+'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'_'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'+feature_id,\n          local: true\n        }\n      ]\n    },\n    idShort: property_id,\n    kind: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Instance'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n    valueType: dataType,\n    modelType: {\n      name: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Property'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\n    },\n    value: value\n  }\n  );\n  let bytePayload = null;\n  let contentType = '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'application/json'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';\n  return Ditto.buildExternalMsg(headers, textPayload, bytePayload, contentType);}&quot;
            }
          }
        },
        &quot;sources&quot;: [],
        &quot;targets&quot;: [
          {
            &quot;address&quot;: &quot;PUT:/aasServer/shells/{{ thing:namespace }}&quot;,
            &quot;headerMapping&quot;: {
              &quot;content-type&quot;: &quot;{{ header:content-type }}&quot;
            },
            &quot;authorizationContext&quot;: [&quot;nginx:ditto&quot;],
            &quot;topics&quot;: [
              &quot;_/_/things/twin/events?filter=and(in(topic:action,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'created'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'),eq(resource:path,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'))&quot;
            ],
            &quot;payloadMapping&quot;: [
              &quot;mappingforShell&quot;
            ]
          },
          {
            &quot;address&quot;: &quot;PUT:/aasServer/shells/{{ thing:namespace }}/aas/submodels/{{ thing:name }}_{{ resource:path | fn:substring-after('&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/features/'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;') }}&quot;,
            &quot;headerMapping&quot;: {
              &quot;content-type&quot;: &quot;{{ header:content-type }}&quot;
            },
            &quot;authorizationContext&quot;: [&quot;nginx:ditto&quot;],
            &quot;topics&quot;: [
              &quot;_/_/things/twin/events?filter=and(in(topic:action,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'created'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'),not(eq(resource:path,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/features'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;')),like(resource:path,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/features*'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'),not(like(resource:path,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'*properties*'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;')))&quot;
            ],
            &quot;payloadMapping&quot;: [
              &quot;mappingforSubmodel&quot;
            ]
          },
          {
            &quot;address&quot;: &quot;PUT:/aasServer/shells/{{ thing:namespace }}/aas/submodels/{{ thing:name }}_{{ resource:path | fn:substring-after('&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/features/'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;') | fn:substring-before('&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/properties'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;') }}/submodel/submodelElements/properties_{{ resource:path | fn:substring-after('&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/properties/'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;') | fn:replace('&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'_'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;') }}&quot;,
            &quot;headerMapping&quot;: {
              &quot;content-type&quot;: &quot;{{ header:content-type }}&quot;
            },
            &quot;authorizationContext&quot;: [&quot;nginx:ditto&quot;],
            &quot;topics&quot;: [
              &quot;_/_/things/twin/events?filter=and(in(topic:action,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'modified'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'),not(eq(resource:path,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/features'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;')),like(resource:path,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/features*'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'),like(resource:path,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'*properties*'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'),not(like(resource:path,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'*properties'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;')))&quot;
            ],
            &quot;payloadMapping&quot;: [
              &quot;mappingforSubmodelElement&quot;
            ]
          }
        ]
      }
    }
  }'&lt;/span&gt; &amp;lt;ditto-instance-url&amp;gt;/devops/piggyback/connectivity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Listing 5: Request to add a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connection&lt;/code&gt; to a Ditto instance&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When Ditto established the connection and our payload mappings work, it returns a successful HTTP response and otherwise an error message.&lt;/p&gt;

&lt;p&gt;Without any further means, the payload mappings defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;piggybackCommand.mappingDefinition&lt;/code&gt; and set in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;piggybackCommand.targets&lt;/code&gt; would get executed for all changes to a Thing.
To prevent this, we use &lt;a href=&quot;https://eclipse.dev/ditto/basic-changenotifications.html#filtering&quot;&gt;filtering&lt;/a&gt; with &lt;a href=&quot;https://eclipse.dev/ditto/basic-rql.html&quot;&gt;RQL expressions&lt;/a&gt; to make sure that our payload mappings are only executed for the correct messages.
For example, the filter:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;_/_/things/twin/events?filter=and(in(topic:action,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'created'&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'),eq(resource:path,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/'&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mappingforShell&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;piggybackCommands.targets[0].topics[0]&lt;/code&gt; makes sure that it only triggers for messages, which create a Thing.&lt;/p&gt;

&lt;p&gt;Another filter for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mappingForSubmodel&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pigybackCommands.targets[1].topics[0]&lt;/code&gt; makes sure, that the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; contains a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature&lt;/code&gt; and not a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_/_/things/twin/events?filter=and(in(topic:action,'&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'created'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'),not(eq(resource:path,'&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'/features'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;')),like(resource:path,'&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'/features*'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'),not(like(resource:path,'&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'*properties*'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;')))&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;setup-connection-to-an-basyx-aas-registry&quot;&gt;Setup Connection to an BaSyx AAS Registry&lt;/h4&gt;

&lt;p&gt;Within an AAS environment it is required that AAS are discoverable via an AAS registry.
We make an AAS discoverable by adding an entry for that AAS into the AAS registry for a new Thing. In our setup we achieve this through the definition of a new connection between Eclipse Ditto and the BaSyx AAS Registry
with a respective payload mapping.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mapFromDittoProtocolMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;criterion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dittoHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;extra&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dittoHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textPayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;endpoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;basyx-server-instance-url&amp;gt;:4001/aasServer/shells/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/aas&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;modelType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;AssetAdministrationShellDescriptor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;identification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;idType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Custom&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;idShort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;identification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;idType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Custom&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;-asset&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;idShort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;-asset&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;dataSpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;modelType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Asset&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;embeddedDataSpecifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;submodels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bytePayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contentType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ditto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buildExternalMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The external headers Object containing header values&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;textPayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The external mapped String&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;bytePayload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The external mapped byte[]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;contentType&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The returned Content-Type&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Listing 6: Snippet to add a new AAS Registry entry for an AAS&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As introduced in &lt;a href=&quot;https://eclipse.dev/ditto/feed.xml#mapping-of-data-models&quot;&gt;Mapping of Data Models&lt;/a&gt;, we map a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;namespace&lt;/code&gt; in Ditto to an AAS.
The new entry in the BaSyx Registry has to contain the endpoint of the BaSyx AAS server, which hosts the new AAS. You find this in the script-payload in the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;endpoints.address&lt;/code&gt;. So you need to adapt this value in the following HTTP request to the address of the BaSyx ASS server that you are using and that was configured in the &lt;a href=&quot;https://eclipse.dev/ditto/feed.xml#create-a-connection-to-the-basyx-aas-server&quot;&gt;connection between Ditto and the BaSyx AAS Server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this mapping, it is now possible to configure a new connection from Ditto to a BaSyx AAS registry through the following HTTP request:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; devops:foobar &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--data-binary&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;targetActorSelection&quot;: &quot;/system/sharding/connection&quot;,
    &quot;headers&quot;: {
      &quot;aggregate&quot;: false
    },
    &quot;piggybackCommand&quot;: {
      &quot;type&quot;: &quot;connectivity.commands:createConnection&quot;,
      &quot;connection&quot;: {
        &quot;id&quot;: &quot;basyxregistry-http-connection&quot;,
        &quot;connectionType&quot;: &quot;http-push&quot;,
        &quot;connectionStatus&quot;: &quot;open&quot;,
        &quot;uri&quot;: &quot;&amp;lt;basyx-registry-instance-url&amp;gt;:4000&quot;,
        &quot;failoverEnabled&quot;: true,
        &quot;mappingDefinitions&quot;: {
          &quot;mappingforShell&quot;: {
            &quot;mappingEngine&quot;: &quot;JavaScript&quot;,
            &quot;options&quot;: {
              &quot;outgoingScript&quot;: &quot;function mapFromDittoProtocolMsg(namespace, name, group, channel, criterion, action, path, dittoHeaders, value, status, extra) {\n  let headers = dittoHeaders;\n  let textPayload = JSON.stringify({\n    endpoints: [\n        {\n            address: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'&amp;lt;basyx-server-instance-url&amp;gt;:4001/aasServer/shells/'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' + namespace + '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/aas'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n            type: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'http'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\n        }\n    ],\n    modelType: {\n        name: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'AssetAdministrationShellDescriptor'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\n    },\n    identification: {\n        idType: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Custom'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n        id: namespace\n},\n    idShort: namespace,\n      asset: {\n          identification: {\n              idType: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Custom'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n              id: namespace + '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'-asset'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\n          },\n          idShort: namespace + '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'-asset'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n          kind: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Instance'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',\n          dataSpecification: [],\n          modelType: {\n              name: '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Asset'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\n          },\n          embeddedDataSpecifications: []\n      },\n      submodels: []\n  });\n  let bytePayload = null;\n  let contentType = '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'application/json'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';\n  return Ditto.buildExternalMsg(headers, textPayload, bytePayload, contentType);}&quot;
            }
          }
        },
        &quot;sources&quot;: [],
        &quot;targets&quot;: [
          {
            &quot;address&quot;: &quot;PUT:/registry/api/v1/registry/{{ thing:namespace }}&quot;,
            &quot;headerMapping&quot;: {
              &quot;content-type&quot;: &quot;{{ header:content-type }}&quot;
            },
            &quot;authorizationContext&quot;: [&quot;nginx:ditto&quot;],
            &quot;topics&quot;: [
              &quot;_/_/things/twin/events?filter=and(in(topic:action,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'created'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'),eq(resource:path,'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'/'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'))&quot;
            ],
            &quot;payloadMapping&quot;: [
              &quot;mappingforShell&quot;
            ]
          }
        ]
      }
    }
  }'&lt;/span&gt; &amp;lt;ditto-instance-url&amp;gt;/devops/piggyback/connectivity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Listing 7: Request to add a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connection&lt;/code&gt; to a Ditto instance&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We list the JavaScript mapper in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;piggybackCommand.connection.mappingDefinitions.mappingForShell.options.outgoingScript&lt;/code&gt; and reference it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mappingForShell&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;piggybackCommand.connection.targets[0].payloadMapping&lt;/code&gt;.
The address of the BaSyx AAS registry is configured in the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;piggybackCommand.connection.uri&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As filter, to make sure that our mapper function only triggers after the creation of new Thing, we use:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_/_/things/twin/events?filter=and(in(topic:action,'&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'created'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'),eq(resource:path,'&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'))&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the registry uses the AAS server endpoint as a base to also get access to all submodels and submodel elements from the same AAS, it is enough to register the AAS endpoint.&lt;/p&gt;

&lt;h3 id=&quot;test-the-connection&quot;&gt;Test the Connection&lt;/h3&gt;

&lt;p&gt;We now configured all required connections in Ditto and can test our setup.
All configured mappers trigger through changes to a Thing, so we begin by creating a Thing.&lt;/p&gt;

&lt;p&gt;We again refer to the used Ditto instance through the placeholder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ditto-instance-url&amp;gt;&lt;/code&gt;,
which you need to adapt to the URL of your Ditto instance.&lt;/p&gt;

&lt;h4 id=&quot;creating-a-thing-in-eclipse-ditto&quot;&gt;Creating a Thing in Eclipse Ditto&lt;/h4&gt;

&lt;h5 id=&quot;setup-a-common-policy&quot;&gt;Setup a common policy&lt;/h5&gt;

&lt;p&gt;To define authorization information to be used by the Things,
we first create a &lt;a href=&quot;https://eclipse.dev/ditto/basic-policy.html&quot;&gt;policy&lt;/a&gt; with the policy-id &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine:my-policy&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;POLICY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;machine:my-policy

curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; ditto:ditto &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--data&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
  &quot;entries&quot;: {
    &quot;DEFAULT&quot;: {
      &quot;subjects&quot;: {
        &quot;{{ request:subjectId }}&quot;: {
           &quot;type&quot;: &quot;Ditto user authenticated via nginx&quot;
        }
      },
      &quot;resources&quot;: {
        &quot;thing:/&quot;: {
          &quot;grant&quot;: [&quot;READ&quot;, &quot;WRITE&quot;],
          &quot;revoke&quot;: []
        },
        &quot;policy:/&quot;: {
          &quot;grant&quot;: [&quot;READ&quot;, &quot;WRITE&quot;],
          &quot;revoke&quot;: []
        },
        &quot;message:/&quot;: {
          &quot;grant&quot;: [&quot;READ&quot;, &quot;WRITE&quot;],
          &quot;revoke&quot;: []
        }
      }
    }
  }
}'&lt;/span&gt; &amp;lt;ditto-instance-url&amp;gt;/api/2/policies/&lt;span class=&quot;nv&quot;&gt;$POLICY_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Listing 8: Demo Policy Definition&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You will get a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;201 Created&lt;/code&gt; response, if the policy creation concluded successfuly. In the subsequent steps, we use the policy-id &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine:my-policy&lt;/code&gt; to refer to the created policy.&lt;/p&gt;

&lt;h4 id=&quot;create-a-thing&quot;&gt;Create a Thing&lt;/h4&gt;

&lt;p&gt;The next step is to create an actual Thing.
We use the namespace and name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine:my-policy&lt;/code&gt; and policy-id &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;machine:my-policy&lt;/code&gt; here:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;NAMESPACE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;machine
&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sensor
&lt;span class=&quot;nv&quot;&gt;DEVICE_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAMESPACE&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;

curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; ditto:ditto &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--data&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
  &quot;policyId&quot;: &quot;'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$POLICY_ID&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;
}'&lt;/span&gt; &amp;lt;ditto-instance-url&amp;gt;/api/2/things/&lt;span class=&quot;nv&quot;&gt;$DEVICE_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Listing 9: Request to add the Demo Policy to a Ditto instance (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$POLICY_ID&lt;/code&gt; refers to Listing 8)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Again, a successful creation returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;201 Created&lt;/code&gt; response.&lt;/p&gt;

&lt;p&gt;We earlier configured two connections to trigger a mapper on the create event of a Thing. This should push a new AAS to the AAS server and a reference to that AAS in the AAS registry.&lt;/p&gt;

&lt;p&gt;You can check whether the execution of the scripts was successful by requesting the shell at the AAS server:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &amp;lt;basyx-server-instance-url&amp;gt;:4001/aasServer/shells
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which should return the following result&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modelType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AssetAdministrationShell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idShort&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;identification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Custom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dataSpecification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;embeddedDataSpecifications&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;submodels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AssetAdministrationShell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Custom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Submodel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sensor_temperature&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Custom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;asset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Asset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine-asset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Custom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;identification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Custom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine-asset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idShort&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine-asset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Instance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dataSpecification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modelType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Asset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;embeddedDataSpecifications&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[]},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;views&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;conceptDictionary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[]}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition, the request to the AAS registry:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &amp;lt;basyx-registry-instance-url&amp;gt;:4000/registry/api/v1/registry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should return:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modelType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AssetAdministrationShellDescriptor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;endpoints&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;basyx-server-instance-url&amp;gt;:4001/aasServer/shells/machine/aas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;identification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Custom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idShort&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;asset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;identification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Custom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine-asset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idShort&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine-asset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Instance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dataSpecification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modelType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Asset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;embeddedDataSpecifications&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[]},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;submodels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[]}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, the newly created Thing has no features, properties, or attributes yet.
So let us populate that Thing.&lt;/p&gt;

&lt;h4 id=&quot;create-a-feature-for-the-thing&quot;&gt;Create a feature for the Thing&lt;/h4&gt;

&lt;p&gt;Next, we create a feature for the Thing to contain a property with the data of a temperature sensor.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;FEATURE_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;temperature

curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; ditto:ditto &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--data-binary&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
  &quot;properties&quot;: {
    &quot;value&quot;: null
  }
}'&lt;/span&gt; &amp;lt;ditto-instance-url&amp;gt;/api/2/things/&lt;span class=&quot;nv&quot;&gt;$DEVICE_ID&lt;/span&gt;/features/&lt;span class=&quot;nv&quot;&gt;$FEATURE_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Listing 10: Request to add a feature to the demo Thing (variables refer to previous Listings)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The feature creation triggers the mapper (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mappingforSubmodel&lt;/code&gt;) to create a corresponding Submodel in the previously created AAS.&lt;/p&gt;

&lt;p&gt;To check if this was successful, we request the expected submodel:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &amp;lt;basyx-server-instance-url&amp;gt;:4001/aasServer/shells/&lt;span class=&quot;nv&quot;&gt;$NAMESPACE&lt;/span&gt;/aas/submodels/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FEATURE_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/submodel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which should result in the following response:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;parent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Custom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AssetAdministrationShell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;identification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Custom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sensor_temperature&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idShort&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sensor_temperature&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Instance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dataSpecification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modelType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Submodel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;embeddedDataSpecifications&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[],&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;submodelElements&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;updating-a-thing&quot;&gt;Updating a Thing&lt;/h4&gt;

&lt;p&gt;After we have successfully created a Thing, we can check if the update of a property works as well by executing:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; ditto:ditto &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;content-type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--data-binary&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'46'&lt;/span&gt; &amp;lt;ditto-instance-url&amp;gt;/api/2/things/&lt;span class=&quot;nv&quot;&gt;$DEVICE_ID&lt;/span&gt;/features/&lt;span class=&quot;nv&quot;&gt;$FEATURE_ID&lt;/span&gt;/properties/value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, we check if our change was successful:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; ditto:ditto &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt; &amp;lt;ditto-instance-url&amp;gt;/api/2/things/&lt;span class=&quot;nv&quot;&gt;$DEVICE_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and expect:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;thingId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine:sensor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;policyId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;machine:my-policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;features&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;temperature&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the property creation was successful, then the mapping &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mappingforSubmodelElement&lt;/code&gt; should trigger.
To verify that the Submodel was updated, call:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &amp;lt;basyx-server-instance-url&amp;gt;:4001/aasServer/shells/&lt;span class=&quot;nv&quot;&gt;$NAMESPACE&lt;/span&gt;/aas/submodels/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FEATURE_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/submodel/submodelElements/properties_value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should lead to the response:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;parent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Custom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Submodel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sensor_temperature&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;idShort&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;properties_value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Instance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;valueType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;int&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;modelType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Property&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we see that we are able to access the sensor data of the device through the AAS Submodel API via Eclipse BaSyx.&lt;/p&gt;

&lt;p&gt;As an alternative to plain Json responses, you can use one of the UI-tools provided by the AAS community, like the &lt;a href=&quot;https://wiki.eclipse.org/BaSyx_/_Documentation_/_Components_/_AAS_Web_UI&quot;&gt;AAS Web UI&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;&lt;img alt=&quot;AAS Dashboard&quot; class=&quot;docimage&quot; src=&quot;https://eclipse.dev/ditto/images/blog/2024-02-15-integrating-ditto-ass-basyx/AASDashboard.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Figure 4: BaSyx AAS Web UI&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post, we present our approach for making Ditto Things available in an AAS.
We defined a mapping concept between Things and AAS.
To apply the mapping concept, we created connections with mappers from Ditto to a BaSyx AAS server and a BaSyx AAS registry.
Afterwards, we tested the connections with an example Thing and data from a sensor.&lt;/p&gt;

&lt;p&gt;Our example of integrating Ditto Things into an AAS environment shows, how the capbilities of Ditto, such as
custom mappers, filters etc, render it a useful tool to integrate device states into various environments.
We discussed the integration into AAS but believe a similar approach could be applied in other domains as well.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
Milena Jäntgen, &lt;a href=&quot;https://github.com/eriksven&quot;&gt;Sven Erik Jeroschewski&lt;/a&gt; and &lt;a href=&quot;https://github.com/max-grzanna&quot;&gt;Max Grzanna&lt;/a&gt; contributed to this post.&lt;/p&gt;</description>
	<pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Why Every Tool and IDE Project Should Care About AI Integration</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/02/26/why-every-tools-and-ide-developer-should-care-about-ai-integration/</guid>
	<link>https://eclipsesource.com/blogs/2024/02/26/why-every-tools-and-ide-developer-should-care-about-ai-integration/</link>
	<description>&lt;p&gt;For creators of custom tools and Integrated Development Environments (IDEs), AI integration is not just a fleeting trend or an additional feature to consider. It is a paradigm shift, capable of â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/02/26/why-every-tools-and-ide-developer-should-care-about-ai-integration/&quot; rel=&quot;nofollow&quot;&gt; Why Every Tool and IDE Project Should Care About AI Integration&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Real-time Collaboration on Diagrams with Eclipse GLSP</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/02/21/real-time-collaboration-on-diagrams-with-eclipse-glsp/</guid>
	<link>https://eclipsesource.com/blogs/2024/02/21/real-time-collaboration-on-diagrams-with-eclipse-glsp/</link>
	<description>&lt;p&gt;In our globalized era, seamless collaboration is more important than ever, especially in complex fields like modeling and diagram editing. With this in mind, we’re thrilled to introduce a new …&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/02/21/real-time-collaboration-on-diagrams-with-eclipse-glsp/&quot; rel=&quot;nofollow&quot;&gt; Real-time Collaboration on Diagrams with Eclipse GLSP&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Code RealTime: Harnessing the Power of the Eclipse Cloud DevTools Ecosystem</title>
	<guid isPermaLink="false">7505 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/code-realtime-harnessing-power-eclipse-cloud-devtools-ecosystem</link>
	<description>&lt;span&gt;Code RealTime: Harnessing the Power of the Eclipse Cloud DevTools Ecosystem&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;This adopter story delves into Code RealTime, an innovative tool for creating stateful, event-driven real time applications in C++, created by HCL and IBM. By leveraging the strengths of the&lt;/span&gt;&lt;a href=&quot;https://ecdtools.eclipse.org/&quot;&gt;&lt;span&gt; Eclipse Cloud DevTools&lt;/span&gt;&lt;/a&gt;&lt;span&gt; open source ecosystem, including &lt;/span&gt;&lt;a href=&quot;https://theia-ide.org/&quot;&gt;&lt;span&gt;Eclipse Theia&lt;/span&gt;&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a href=&quot;https://eclipse.dev/glsp/&quot;&gt;&lt;span&gt;Eclipse GLSP&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, Code RealTime offers a unique blend of advanced programming capabilities, intuitive graphical interfaces, and a seamless development experience. This story not only highlights the tool's innovative features, but also the integral role played by the Eclipse Cloud DevTools ecosystem in its creation, demonstrating a successful collaboration of cutting-edge technologies.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Code RealTime uses the Art language to enable developing stateful, event-driven applications on top of C++. Art stands out for its high-level concepts such as state machines, capsules, events and ports, making complex application development more intuitive and efficient. In Code RealTime, these concepts can be efficiently used in a textual form with all modern code editor features such as auto-completion, live validation, and more. However, Art also seamlessly integrates a graphical visualization, which is updated as the user types. The ability to visualize these elements through graphical diagrams provides a more comprehensive understanding of the application architecture, significantly enhancing the user experience. Finally, the tool's real-time semantic validation and auto-generation of optimized C++ code streamline the development process, ensuring high performance and reliability. Code RealTime is developed in a collaboration between HCL and IBM.&lt;/span&gt;&lt;/p&gt;&lt;img alt=&quot;Code RealTime&quot; class=&quot;align-center&quot; height=&quot;353&quot; src=&quot;https://lh7-eu.googleusercontent.com/9hcizbgMtjfQtaPTLl6j15gQg7jppzOYWk53B9oMQ0ttCmtNuRCdyY87dYFoEkrEiGEgOVBBoKRjMSkl4HWWsm__YdlFF3QRnVkDuVMc76BvDPE01pyrkWP_MX4xFzkK3iluFS3TNteuq0C_qx4uM2A&quot; width=&quot;659&quot; /&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The Code RealTime tooling is implemented entirely on a modern, web-based and open source technology stack. It is available as an installable extension for desktop IDEs, including Eclipse Theia and also as an online version, conveniently provided as a Docker container, exclusively based on Eclipse Theia. The ability to build comprehensive tools such as Code RealTime on Eclipse Theia and provide them as offline and online versions underscores Theia's versatility and strength in supporting the development of complex developer tools.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The two main components within Code RealTime are the textual and graphical editors supporting the Art language. The textual language support for Art is based on the Language Server Protocol (LSP), which is conveniently integrated in Eclipse Theia. The corresponding Language Server was created using &lt;/span&gt;&lt;a href=&quot;https://eclipse.dev/Xtext/&quot;&gt;&lt;span&gt;Eclipse Xtext&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The graphical elements of Code RealTime are based on the Graphical Language Server Platform (Eclipse GLSP), the leading open source framework for building custom diagram editors based on web technologies at the Eclipse Foundation. Code RealTime makes full use of the flexibility of GLSP in various aspects. The diagrams are directly connected to the underlying textual representation; they will update live while the user is typing in Art. And, conversely, if changes are made in the diagrams, the corresponding Art files will also update. Furthermore, GLSP enables Code Realtime to seamlessly integrate the diagrams into the IDE extension, including consistent styling. This &lt;/span&gt;&lt;a href=&quot;https://hclsw.co/codert-features&quot;&gt;&lt;span&gt;video&lt;/span&gt;&lt;/a&gt;&lt;span&gt; shows the tool in action with a focus on the perfect synergy between textual editing and the GLSP-based diagrams:&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;To seamlessly integrate its feature set into the existing workbench provided by Theia, Code RealTime makes heavy use of the VS Code extension API. Theia, as a framework, is fully compatible with this API, allowing tools such as Code RealTime to also be used in other IDEs, including VS Code. &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The ready-to-be-used online version (provided as a Docker container) shows Theia’s flexibility in terms of deployment. Based on the same code, Code RealTime can be used as a desktop application, installed into existing IDE installations and hosted online in the cloud, where users simply follow a URL to start their C++ projects with Art. The online option is exclusively available based on Eclipse Theia.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Code RealTime demonstrates the potential of combining different Eclipse open source technologies to create a cohesive and efficient development environment. Moreover, the interaction between the Code RealTime development team and the open source community is a shining example of collaborative innovation. Far from simply utilizing open source libraries, the team actively participates in the ecosystem. They regularly attend project meetings, such as for Eclipse Theia, and contribute high quality bug reports. They also present their experience in open forums such as &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/events/&quot;&gt;&lt;span&gt;TheiaCon&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. This active engagement not only enhances the tool but also aids in the industrial hardening of the open source technologies they use. Their feedback is invaluable, driving improvements and showcasing the potential of open source technology. As such, Code RealTime stands as a beacon of successful open source collaboration and adoption, highlighting the reciprocal benefits between adopters and the broader community. This dynamic interaction exemplifies how collaborative efforts can lead to robust and innovative technological solutions.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;For more detailed information about Code RealTime and its integration with Eclipse technologies, visit the&lt;/span&gt;&lt;a href=&quot;https://secure-dev-ops.github.io/code-realtime/&quot;&gt;&lt;span&gt; Code RealTime website&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;“Theia's superior customizability is especially beneficial for advanced users who seek to tailor their IDE with specific extensions and functionalities. Additionally, Theia's ease in facilitating web-based access positions it as a more adaptable alternative to other IDEs. This flexibility is crucial for &quot;Code RealTime,&quot; as it allows for seamless integration and deployment in various environments, including cloud-based platforms.”&lt;/em&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;Mattias Mohlin, Senior Software Architect and development lead of Code RealTime&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-02-18T13:53:54-05:00&quot; title=&quot;Sunday, February 18, 2024 - 13:53&quot;&gt;Sun, 2024-02-18 13:53&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Sun, 18 Feb 2024 18:53:54 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Rock-solid Diagram Editors: End-to-end Testing with Eclipse GLSP</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/02/14/rock-solid-diagram-editors-end-to-end-testing-with-eclipse-glsp/</guid>
	<link>https://eclipsesource.com/blogs/2024/02/14/rock-solid-diagram-editors-end-to-end-testing-with-eclipse-glsp/</link>
	<description>&lt;p&gt;Industrial-grade diagram editors are intricate, filled with advanced functionalities and complex logic. It’s clear then that automated testing isn’t just beneficial—it’s essential for maintaining a …&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/02/14/rock-solid-diagram-editors-end-to-end-testing-with-eclipse-glsp/&quot; rel=&quot;nofollow&quot;&gt; Rock-solid Diagram Editors: End-to-end Testing with Eclipse GLSP&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Building Custom C/C++ Tools: CDT Cloud and Eclipse Theia in Action</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/02/12/building-custom-c-tools/</guid>
	<link>https://eclipsesource.com/blogs/2024/02/12/building-custom-c-tools/</link>
	<description>&lt;p&gt;Are you looking for the best way to create a custom C/C++ development tool that perfectly matches your specific requirements, hardware, or tool-chains? Check out our recent session at TheiaCon! We’ve …&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/02/12/building-custom-c-tools/&quot; rel=&quot;nofollow&quot;&gt; Building Custom C/C++ Tools: CDT Cloud and Eclipse Theia in Action&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Marc Nuri: Eclipse JKube 1.16 is now available!</title>
	<guid isPermaLink="true">https://blog.marcnuri.com/eclipse-jkube-1-16</guid>
	<link>https://blog.marcnuri.com/eclipse-jkube-1-16</link>
	<description>&lt;div&gt;&lt;a href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-16&quot;&gt;Original post&lt;/a&gt;&lt;/div&gt;
    &lt;p&gt;On behalf of the &lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-introduction-kubernetes-openshift&quot; title=&quot;Eclipse JKube introduction: Java tools and plugins for Kubernetes and OpenShift&quot;&gt;Eclipse JKube&lt;/a&gt;
team and everyone who has contributed, I'm happy to announce that Eclipse JKube &lt;code&gt;1.16.2&lt;/code&gt; has been
&lt;a href=&quot;https://github.com/eclipse/jkube/releases/tag/v1.16.2&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/releases/tag/v1.16.2&quot;&gt;released&lt;/a&gt; and is now available from
&lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/jkube/kubernetes-maven-plugin/1.16.2/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://repo1.maven.org/maven2/org/eclipse/jkube/kubernetes-maven-plugin/1.16.2/&quot;&gt;Maven Central&lt;/a&gt; ğŸ�‰.&lt;/p&gt;
&lt;p&gt;Thanks to all of you who have contributed with issue reports, pull requests, feedback, and spreading the word
with blogs, videos, comments, and so on.
We really appreciate your help, keep it up!&lt;/p&gt;
&lt;h2 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-16#whats-new&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;whats-new&quot;&gt;&lt;/span&gt;What's new?&lt;/h2&gt;
&lt;p&gt;Without further ado, let's have a look at the most significant updates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-16#buildpacks&quot; title=&quot;Link to the Helm Lint feature section&quot;&gt;New Buildpacks based build strategy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;post-link &quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-16#helm-lint&quot; title=&quot;Link to the Helm Lint feature section&quot;&gt;New Helm Lint feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support for &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/&quot;&gt;Kubernetes Recommended Labels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Updated base images:
&lt;ul&gt;
&lt;li&gt;Better support for Java 21&lt;/li&gt;
&lt;li&gt;Jolokia updated to 2.0.0&lt;/li&gt;
&lt;li&gt;Red Hat UBI based on UBI 9&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ğŸ�› Many other bug-fixes and minor improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-16#buildpacks&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;buildpacks&quot;&gt;&lt;/span&gt;New Buildpacks based build strategy&lt;/h3&gt;
&lt;p&gt;Users can now leverage &lt;a href=&quot;https://buildpacks.io&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://buildpacks.io&quot;&gt;Cloud Native Buildpacks&lt;/a&gt; to build their container images.
In addition to the existing &lt;code&gt;docker&lt;/code&gt;, &lt;code&gt;jib&lt;/code&gt;, and &lt;code&gt;s2i&lt;/code&gt; build strategies, JKube now supports the &lt;code&gt;buildpacks&lt;/code&gt; strategy.&lt;/p&gt;
&lt;p&gt;To enable the &lt;code&gt;buildpacks&lt;/code&gt; strategy, you just need to set the &lt;code&gt;jkube.build.strategy&lt;/code&gt; property to &lt;code&gt;buildpacks&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-xml&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;prooperties&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;jkube.build.strategy&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;buildpacks&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;jkube.build.strategy&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;properties&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or in case you're using Gradle:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-properties&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span style=&quot;color: #9b859d;&quot;&gt;jkube.build.strategy&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;buildpacks&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is no need to have a Pack CLI binary installed in your system, JKube takes care of downloading and wrapping the Pack CLI for you.&lt;/p&gt;
&lt;p&gt;Currently, JKube reads your &lt;code&gt;.pack/config.toml&lt;/code&gt; file to select the builder image.
In case there is no &lt;code&gt;.pack/config.toml&lt;/code&gt; file, JKube will use the standard &lt;code&gt;paketobuildpacks/builder:base&lt;/code&gt; builder image.&lt;/p&gt;
&lt;h3 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-16#helm-lint&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;helm-lint&quot;&gt;&lt;/span&gt;New Helm Lint feature&lt;/h3&gt;
&lt;p&gt;Eclipse JKube provides now a new feature to lint the Helm charts it generates just by running a simple Maven or Gradle command.&lt;/p&gt;
&lt;p&gt;Once you've generated the Kubernetes resources and the Helm charts, you can now examine the generated Helm charts for possible issues.&lt;/p&gt;
&lt;p&gt;In case of Maven:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-bash&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span&gt;mvn k8s:resource k8s:helm k8s:helm-lint&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or if you're using Gradle:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-bash&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span&gt;gradle k8sResource k8sHelm k8sHelmLint&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-16#using-this-release&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;using-this-release&quot;&gt;&lt;/span&gt;Using this release&lt;/h2&gt;
&lt;p&gt;If your project is based on Maven, you just need to add the Kubernetes Maven plugin or the OpenShift Maven
plugin to your plugin dependencies:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-xml&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;groupId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;org.eclipse.jkube&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;groupId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;artifactId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;kubernetes-maven-plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;artifactId&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;version&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;1.16.2&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;version&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;plugin&lt;/span&gt;&lt;span style=&quot;color: #e8bf6a;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your project is based on Gradle, you just need to add the Kubernetes Gradle plugin or the OpenShift Gradle
plugin to your plugin dependencies:&lt;/p&gt;
&lt;div class=&quot;code&quot; style=&quot;background: #232323;&quot;&gt;&lt;pre style=&quot;display: block; padding: 0.5em; background: #232323; color: #e6e1dc;&quot;&gt;&lt;code class=&quot;language-groovy&quot; style=&quot;white-space: pre;&quot;&gt;&lt;span&gt;plugins {
&lt;/span&gt;&lt;span&gt;  id &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;'org.eclipse.jkube.kubernetes'&lt;/span&gt;&lt;span&gt; version &lt;/span&gt;&lt;span style=&quot;color: #a5c261;&quot;&gt;'1.16.2'&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&quot;heading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://blog.marcnuri.com/eclipse-jkube-1-16#how-can-you-help&quot;&gt;&lt;i class=&quot;anchor__link fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;span id=&quot;how-can-you-help&quot;&gt;&lt;/span&gt;How can you help?&lt;/h2&gt;
&lt;p&gt;If you're interested in helping out and are a first-time contributor, check out the
&lt;a href=&quot;https://github.com/eclipse/jkube/labels/first-timers-only&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/labels/first-timers-only&quot;&gt;&quot;first-timers-only&quot;&lt;/a&gt;
tag in the issue repository.
We've tagged extremely easy issues so that you can get started contributing to Open Source and the Eclipse organization.&lt;/p&gt;
&lt;p&gt;If you are a more experienced developer or have already contributed to JKube, check the
&lt;a href=&quot;https://github.com/eclipse/jkube/labels/help%20wanted&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/labels/help%20wanted&quot;&gt;&quot;help wanted&quot;&lt;/a&gt; tag.&lt;/p&gt;
&lt;p&gt;We're also excited to read articles and posts mentioning our project and sharing the user experience.
Feedback is the only way to improve.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://www.eclipse.org/jkube&quot;&gt;Project Page&lt;/a&gt; |
&lt;a href=&quot;https://github.com/eclipse/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube&quot;&gt;GitHub&lt;/a&gt; |
&lt;a href=&quot;https://github.com/eclipse/jkube/issues&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://github.com/eclipse/jkube/issues&quot;&gt;Issues&lt;/a&gt; |
&lt;a href=&quot;https://gitter.im/eclipse/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://gitter.im/eclipse/jkube&quot;&gt;Gitter&lt;/a&gt; |
&lt;a href=&quot;https://accounts.eclipse.org/mailing-list/jkube-dev&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://accounts.eclipse.org/mailing-list/jkube-dev&quot;&gt;Mailing list&lt;/a&gt; |
&lt;a href=&quot;https://stackoverflow.com/questions/tagged/jkube&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot; title=&quot;Link to https://stackoverflow.com/questions/tagged/jkube&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;span class=&quot;post-image__pusher &quot;&gt;&lt;/span&gt;&lt;figure class=&quot;post-image &quot;&gt;&lt;span class=&quot;post-image__scrim&quot;&gt;&lt;/span&gt;&lt;a class=&quot;post-image__link&quot; href=&quot;https://blog.marcnuri.com/static/af6673438e09cd98812665335c800cbf/e5189/JKube-blog-banner.jpg&quot; title=&quot;The logo of Eclipse JKube&quot;&gt;&lt;span class=&quot;post-image__image-container&quot;&gt;&lt;div class=&quot;gatsby-image-wrapper gatsby-image-wrapper-constrained post-image__image &quot;&gt;&lt;source type=&quot;image/webp&quot; /&gt;&lt;img alt=&quot;The logo of Eclipse JKube&quot; src=&quot;https://blog.marcnuri.com/static/af6673438e09cd98812665335c800cbf/e5189/JKube-blog-banner.jpg&quot; /&gt;&lt;/div&gt;&lt;/span&gt;&lt;/a&gt;&lt;/figure&gt;</description>
	<pubDate>Fri, 09 Feb 2024 16:00:00 +0000</pubDate>
        <enclosure url="https://blog.marcnuri.com/static/af6673438e09cd98812665335c800cbf/e5189/JKube-blog-banner.jpg" length="0" type="image/jpg"/>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse Theia 1.46 Release: News and Noteworthy</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/02/09/eclipse-theia-1-46-release-news-and-noteworthy/</guid>
	<link>https://eclipsesource.com/blogs/2024/02/09/eclipse-theia-1-46-release-news-and-noteworthy/</link>
	<description>&lt;p&gt;We are happy to announce the Eclipse Theia 1.46 release! The release contains 69 merged pull requests and we welcome four new contributors. In this article we will highlight some selected improvements â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/02/09/eclipse-theia-1-46-release-news-and-noteworthy/&quot; rel=&quot;nofollow&quot;&gt; Eclipse Theia 1.46 Release: News and Noteworthy&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Fri, 09 Feb 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: The Eclipse Theia Community Release 2024-02</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/02/08/the-eclipse-theia-community-release-2023-11/</guid>
	<link>https://eclipsesource.com/blogs/2024/02/08/the-eclipse-theia-community-release-2023-11/</link>
	<description>&lt;p&gt;We are happy to announce the fifth Eclipse Theia community release “2024-02”, version 1.45.x!
New to Eclipse Theia? It is the next-generation platform for building IDEs and tools for the web or …&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/02/08/the-eclipse-theia-community-release-2023-11/&quot; rel=&quot;nofollow&quot;&gt; The Eclipse Theia Community Release 2024-02&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Thu, 08 Feb 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Bridging the Gap</title>
	<guid isPermaLink="false">https://medium.com/p/5180e685dbf4</guid>
	<link>https://donraab.medium.com/bridging-the-gap-5180e685dbf4?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Taking a road trip and checking off some bucket list items on my todoÂ list&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*BVk-14GJ17dOIKboBZi8OA.png&quot; /&gt;&lt;figcaption&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bahia_Honda_Rail_Bridge&quot;&gt;Bahia Honda Rail Bridge&lt;/a&gt; from the Bahia Honda State Park in FloridaÂ Keys&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Empty Nesters with TimeÂ Off&lt;/h3&gt;&lt;p&gt;My wife and I decided that on January 16th, the same day both of our kids had returned to university, that we would drive down the east coast with the ultimate goal of spending some time with my aunt. For various reasons and pandemics, I hadnâ€™t seen my aunt in at least five years. It had honestly been so long, that neither my aunt or myself could remember exactly when we had last seen each other in person. No matter, I had set my mind on visiting and spending some quality time with my aunt for a few days, so thatâ€™s what weÂ did.&lt;/p&gt;&lt;p&gt;This trip was unlike any other I have ever taken in my life. The trip had a beginning (New Jersey), a goal (visit with my aunt), a final destination (New Jersey), but not much in the way of advance planning for particular destinations along the way. Only the first two bullets below were scheduled stays before we started the trip. Once we reached Palm Coast, Florida, we decided how long we would stay, and what we would do next. We used our previously banked (thanks pandemic!) Marriott timeshare points for overnight stays anywhere we could. This determined most of the places we decided toÂ stay.&lt;/p&gt;&lt;blockquote&gt;Plan is nothing. Planning is everything.&lt;/blockquote&gt;&lt;p&gt;Our plans and destinations changed on a daily basis. By the end of the trip, my wife and I saw many new places, sights, sunrises and sunsets. We also ate a lot of great food and drank a lot of yummy coffee. Iâ€™m honestly at a loss for how much we were able to see and do. The trip felt like it was months long, but was seventeen days and sixteen nights with nine overnight destinations. We spent 50â€“60 hours driving in our SUV. I estimate we drove at least 3,500 miles during the trip. I am now taking some much needed time off fromÂ driving.&lt;/p&gt;&lt;p&gt;Major Stops along ourÂ trip:&lt;/p&gt;&lt;p&gt;âœ… Williamsburg, VA (overnight)&lt;br /&gt;âœ… Myrtle Beach, SC (two nights)&lt;br /&gt;âœ… Palm Coast, FL (three nights)&lt;br /&gt;âœ… Orlando, FL (two nights)&lt;br /&gt;âœ… Pompano Beach, FL (ğŸ›‘ How You Brewin? Coffee House for â˜•ï¸�)&lt;br /&gt;âœ… Singer Island, FL (two nights)&lt;br /&gt;âœ… Pompano Beach, FL (ğŸ›‘ How You Brewin? Coffee House for â˜•ï¸�)&lt;br /&gt;âœ… Miami, FL (checked in but didntâ€™ stay)&lt;br /&gt;âœ… Key Largo, FL (two nights)&lt;br /&gt;âœ… Bahia Honda State Park, Bahia Honda Key (ğŸ›‘ for ğŸ��ï¸�)&lt;br /&gt;âœ… Pompano Beach, FL (ğŸ›‘ How You Brewin? Coffee House for â˜•ï¸�)&lt;br /&gt;âœ… Palm Coast, FL (overnight)&lt;br /&gt;âœ… Hilton Head Island, SC (two nights)&lt;br /&gt;âœ… Williamsburg, VA (overnight)&lt;br /&gt;âœ… Washington, DC (ğŸ›‘ forÂ lunch)&lt;/p&gt;&lt;p&gt;Every day of this trip was a beautiful day. We literally had only 10 minutes of rain the entire time. I feel like I understand the motto of my cousin Chris a lot better after taking this trip. We enjoyed every beautiful day! Thank you for the best life advice,Â Chris!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://donraab.medium.com/life-in-a-beautiful-day-bfe4534b12f0&quot;&gt;Life in a Beautiful Day&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The rest of this blog will be organized by the stops we took with some select pictures. We took hundreds of pictures, so it was a challenge to filter them. I hope you enjoy the ones I selected, and find inspiration to go on your own road trip adventures. We sometimes forget how many wonderful things there are to do and see in this beautiful country we live in. EnjoyÂ it!&lt;/p&gt;&lt;h3&gt;Williamsburg, VA&lt;/h3&gt;&lt;p&gt;We love visiting Williamsburg, Virginia. It is a nice place to stop on a long road trip to the Southern East Coast and has some great alternatives for food and entertainment. When the kids were younger, we used to visit Busch Gardens and Water Country USA. On this trip we spent one night on the way down, and one night on the way back. We ate at the same restaurant both times this trip â€”Mellow Mushroom Pizza Restaurant.&lt;/p&gt;&lt;p&gt;It was cold in Williamsburg, and we got there after dark I so didnâ€™t take any pictures thisÂ trip.&lt;/p&gt;&lt;h3&gt;Myrtle Beach,Â SC&lt;/h3&gt;&lt;p&gt;The first destination on our trip that neither my wife nor I had been to before was Myrtle Beach, South Carolina.&lt;/p&gt;&lt;h4&gt;Day 1&lt;/h4&gt;&lt;p&gt;This is a picture I took from the Marriott Vacation Club resort we stayed at after we checkedÂ in.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*UxCF1rlj2OCS3eYNosG3Jg.png&quot; /&gt;&lt;figcaption&gt;Main Pool at Marriot Vacation Club in MyrtleÂ Beach&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The temperature was in low to mid 50â€™s (Fahrenheit) when we arrived. Some folks were going in the hot tub, but no one was brave enough it seems to go in the pools, even though they wereÂ heated.&lt;/p&gt;&lt;p&gt;I went for a walk on the beach and caught a decentÂ sunset.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*z2LEPHYl2OQTTCJtic1L1Q.png&quot; /&gt;&lt;figcaption&gt;Sun setting on MyrtleÂ Beach&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I love taking pictures of sunsets and this trip was full of some greatÂ ones.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*CkS7XxiVXL-ppN4bNiJUww.png&quot; /&gt;&lt;figcaption&gt;Sunset on Myrtle Beach with seagulls taking in theÂ view&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Day 2&lt;/h4&gt;&lt;p&gt;Iâ€™m not a morning person. Iâ€™ve always been a night owl. I made an exception during this trip. In addition to my usual sunsets, I wanted to take advantage of our ocean based stays and capture some hopefully amazing sunrises. I was not disappointed.&lt;/p&gt;&lt;p&gt;I woke up a half hour before sunrise in Myrtle Beach and started takingÂ photos.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*b-8jhFHGgPgR-xKAQlFgDg.png&quot; /&gt;&lt;figcaption&gt;Before sunrise on MyrtleÂ Beach&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;As the sun began to rise over the clouds after 7:15am, I caught this picture in all its splendor. The gray clouds on the horizon were challenging my ability to determine how to balance theÂ photo.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*Fq3psECegaEOfYUTKJumbQ.png&quot; /&gt;&lt;figcaption&gt;Sunrise at MyrtleÂ Beach&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The sun had risen fully by the next picture, and was beginning to reflect strongly on theÂ ocean.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*gUp7IT2k33AVULrHxj--Ng.png&quot; /&gt;&lt;figcaption&gt;Sunrise at Myrtle Beach with reflection&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I zoomed in with 2x for this wonderful shot of the sun, which by this point was drowning out the dark gray clouds behind it so I could finally find my balance with the the ocean line. I went back in to get a bit more sleep before breakfast.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*07xZd09udG98Vtuu6neZzw.png&quot; /&gt;&lt;figcaption&gt;Sunrise with 2x zoom at MyrtleÂ Beach&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I am not fully functional until I have had at least one cup of coffee. The coffee at &lt;a href=&quot;https://www.blueberrysgrill.com/&quot;&gt;Blueberryâ€™s Grill&lt;/a&gt; in Myrtle Beach was very good. I enjoyed the breakfast as well. I also quite liked the mug, so I took thisÂ picture.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*cvSYCqEZ5bLjxjOjvXGXiA.png&quot; /&gt;&lt;figcaption&gt;Coffee at Blueberryâ€™s Grill in MyrtleÂ Beach&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;We caught nice sunset dinner at a restaurant called &lt;a href=&quot;https://www.chestnuthilldining.com/&quot;&gt;Chestnut Hill&lt;/a&gt; in Myrtle Beach. We had a delicious dinner two nights in a row there as well. I find when you are on a short trip somewhere, there is no need to experiment with multiple restaurants. If you find some place good, then go back and try different things on theÂ menu.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*k0IjO3lDcy5BAXuM9jQ7QA.png&quot; /&gt;&lt;figcaption&gt;Sunset at dinner at Chestnut Hill in MyrtleÂ Beach&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Day 3&lt;/h4&gt;&lt;p&gt;Two days in a row, I woke up early for the sunrise. The sun did not disappoint. Every sunrise and sunset is different. I recommend enjoying as many as you possibly can. We had to check out of the room by 10am, so I had to get up anyway and pack the car. This picture was worth getting up a little bitÂ earlier.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*gp0y1VUb5lPuxqtKUpGrew.png&quot; /&gt;&lt;figcaption&gt;Sunrise at MyrtleÂ Beach&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Palm Coast,Â FL&lt;/h3&gt;&lt;p&gt;The day we arrived at Palm Coast, FL, we took a quick drive with my aunt to visit Flagler Beach. For three days we pretty much ate breakfast and dinner at &lt;a href=&quot;https://metrodiner.com/locations/florida/palm-coast/&quot;&gt;Metro Diner&lt;/a&gt;, which was justÂ awesome.&lt;/p&gt;&lt;h4&gt;Day 1&lt;/h4&gt;&lt;p&gt;We had hoped to go eat at the Flagler Tea Company, but it was closed until a few days after we visited. I took this picture of the waves and surf at the pier at FlaglerÂ Beach.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*KtNabB2vUUImJR29QMRqnQ.png&quot; /&gt;&lt;figcaption&gt;Pier at Flagler Beach,Â FL&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Day 2&lt;/h4&gt;&lt;p&gt;We took a drive to &lt;a href=&quot;https://www.floridastateparks.org/parks-and-trails/washington-oaks-gardens-state-park&quot;&gt;Washington Oaks Gardens State Park&lt;/a&gt;. It was cold and windy the day we went there, but it was totally clear blueÂ sky.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*3NW8FzUiqWJhC5f-lW5iGQ.png&quot; /&gt;&lt;figcaption&gt;Map of Washington Oaks Gardens StateÂ Park&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I took this picture of the gazebo in the water in the middle of the park. I really love the colors that come out in this picture. I half expected fairies, elves, and gnomes to jump out and sayÂ hello.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*IfMfNub-rxLlvJEO18xGgw.png&quot; /&gt;&lt;figcaption&gt;Gazebo in Washington Oaks Gardens StateÂ Park&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;We went the ocean side of the park, but the winds were so strong, they were blowing sand everywhere. I got this decent picture of the waves being blown in by theÂ wind.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*eC4Wx9nD4T5zLTv_XWsyXA.png&quot; /&gt;&lt;figcaption&gt;Rough winds and seas on the Atlantic Coastline at Washington Oaks&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Orlando, FL&lt;/h3&gt;&lt;p&gt;I wasnâ€™t originally planning to go to Orlando on this trip. I was hoping to stick mostly to the coastline. We decided while in Palm Coast to book a couple nights to help us move further south on our trip throughÂ Florida.&lt;/p&gt;&lt;h4&gt;Day 1&lt;/h4&gt;&lt;p&gt;We took a ride in a boat car next to &lt;a href=&quot;https://www.disneysprings.com/dining/the-boathouse/&quot;&gt;The Boathouse in Disney Springs&lt;/a&gt;. This was the car we drove in the water with. I kept wondering about the seal on the doors and if we would take on any water. We stayedÂ dry.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*OK-RpKNzzwDpsBBk5fGk4Q.png&quot; /&gt;&lt;figcaption&gt;Boat car at the Boathouse in DisneyÂ Springs&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Day 2&lt;/h4&gt;&lt;p&gt;We decided if we were going to stay in Orlando, we were going to spend a day at Epcot. So we did. I took this one of many pictures of Spaceship Earth.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*oDpfvZl542GVuJ46CgHv0Q.png&quot; /&gt;&lt;figcaption&gt;Spaceship Earth at EpcotÂ Center&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;We travelled around the countries of the world at Epcot, and I tried to buy a shot glass at each country, but was only able to find four of them. My favorite one was fromÂ Norway.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*P6FBbkgjnn6nDarWWtPMmg.png&quot; /&gt;&lt;figcaption&gt;Shotglasses and mugs at Norway inÂ Epcot&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I got a decent picture of a sunset over the lake inÂ Epcot.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*kXc26mQrRt6mbCHhkFtqRg.png&quot; /&gt;&lt;figcaption&gt;Sunset inÂ Epcot&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Finally, we went for dinner at a nice restaurant called &lt;a href=&quot;https://www.space220fla.com/&quot;&gt;Space 220&lt;/a&gt;. After dinner I took a bunch of pictures of Spaceship Earth at the entrance, as it was lighting up in all different colors.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*CIdf3nozHejb7WHgW4eLaA.png&quot; /&gt;&lt;figcaption&gt;Spaceship Earth at Epcot Center inÂ Orlando&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Pompano Beach,Â FL&lt;/h3&gt;&lt;p&gt;We didnâ€™t stay at Pompano Beach, but was stopped there three separate days for coffee at &lt;a href=&quot;https://howyoubrewin.com/pages/all-locations&quot;&gt;How You Brewin? Coffee Company&lt;/a&gt;. The first day we dropped by on our way from Orlando to Singer Island. Pompano Beach is about an hour south of Singer Island, but was worth the detour to visit my favorite coffee house originally from Long Beach Island,Â NJ.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*WwLCDgtD8uzGly_twnfRRg.png&quot; /&gt;&lt;figcaption&gt;How You Brewin? Coffee Company in Pompano Beach,Â FL&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;We walked out on the pier at Pompano Beach, which was quite nice. I liked how colorful the lifeguard stations were on theÂ beach.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*k5uLzHk24EVNyrZym6p2DQ.png&quot; /&gt;&lt;figcaption&gt;View of north side of Pompano Beach from theÂ pier&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Singer Island,Â FL&lt;/h3&gt;&lt;p&gt;We stayed at Marriottâ€™s Ocean Pointe location on Singer Island. We were staying on the South Eastern corner of the island right next to an inlet that let ships and boats come in and out from the Atlantic.&lt;/p&gt;&lt;h4&gt;Day 1&lt;/h4&gt;&lt;p&gt;We got to the resort after sunset, and I took this picture of the pool at our building.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*sfrYkTmbJMe-ms4FntBvmA.png&quot; /&gt;&lt;figcaption&gt;Pool at our building at night with the moon behind theÂ clouds&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Day 2&lt;/h4&gt;&lt;p&gt;Since I had committed to morning ritual of sunrises on this trip, I walked to the beach by the main building to catch the sunrise. It was about a 10 minute walk from our building to the main building.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*tupQFtXrH59KPtXuIpU1AA.png&quot; /&gt;&lt;figcaption&gt;Large Ship and bird enjoying the sunrise at SingerÂ Island&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I was a bit confused and excited to see this large ship off the beach, as it kept coming closer andÂ closer.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*4UzyMtnAt7pnEKYN4_Z6bw.png&quot; /&gt;&lt;figcaption&gt;A boat and a large ship enjoying the sunrise off SingerÂ Island&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;At one point I thought the boat was going to land on the beach. It turns out there is an inlet next to where we stayed that both large ships and boats come in and out of to get to and from the Atlantic.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*42-iK-wTEY7NXUxp0V82Hw.png&quot; /&gt;&lt;figcaption&gt;Land ho! It looked like this ship was going to run aground on theÂ beach&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;We went to a manatee viewing spot on the mainland, but didnâ€™t see any manatees. Between the mainland and Singer Island, there was an island called Peanut Island. We got some beautiful sunset pictures from Singer Island overlooking PeanutÂ Island.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*n-WoonYVJqr-sMAVTNFdww.png&quot; /&gt;&lt;figcaption&gt;Sunset from Singer Island overlooking PeanutÂ Island&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The colors of the sunset were a bit surreal. They seemed to change colors and hues every fewÂ minutes.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*M-LSC7nDLEOXCj-jYgYE8A.png&quot; /&gt;&lt;figcaption&gt;From purple hues to burning skies and fiery water in just a fewÂ minutes&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Day 3&lt;/h4&gt;&lt;p&gt;Another day, another sunrise. There are certainly perks to getting up early. Iâ€™m glad I took pictures so I can enjoy them as I return to being a nightÂ owl.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*qIY-AAqI0pyjmkmyHOrvkg.png&quot; /&gt;&lt;figcaption&gt;Sunrise over the pool next to our building on SingerÂ Island&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The following is a photo I took of a ship coming in the inlet we were next to on SingerÂ island.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*Vra9t6MkJGVfU9xfg7o2mg.png&quot; /&gt;&lt;figcaption&gt;A ship coming in the inlet next to our hotel on SingerÂ Island&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Pompano Beach,Â FL&lt;/h3&gt;&lt;p&gt;When we left Singer Island, we stopped first at Pompano Beach to pick up some yummy coffee from How You Brewin? coffeeÂ shop.&lt;/p&gt;&lt;h3&gt;Miami, FL&lt;/h3&gt;&lt;p&gt;We had planned to stay two nights at Marriottâ€™s Villas at Doral, but once we checked in at noon, we found out we would have to wait until 4pm to get our room. We decided quickly we would take a drive down to check out Key Largo, which was about an hour away, so we would not waste any time. This was the one photo I took of the pool at the Marriott we booked, but never wound up stayingÂ at.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*8g_prBDwM1jKGPxxa-QEvg.png&quot; /&gt;&lt;figcaption&gt;Main pool at Marriott â€˜s Villas atÂ Doral&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Key Largo,Â FL&lt;/h3&gt;&lt;p&gt;Once we were on the road driving to Key Largo, we decided that we would see if we could find an available hotel to stay at. After being booked in an overbooked Courtyard by Marriott, we were referred to the &lt;a href=&quot;https://www.opalcollection.com/reefhouse/&quot;&gt;Reefhouse Resort and Marina&lt;/a&gt;. We really enjoyed staying here, and it was a great launching point for two drives down through the FloridaÂ Keys.&lt;/p&gt;&lt;h4&gt;Day 1&lt;/h4&gt;&lt;p&gt;On our first drive on US 1 through the Florida Keys, we stopped at Marathon Key and the Sunset Park at Key ColonyÂ Beach.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*-ncRSmlyU89tGGVRy44n2A.png&quot; /&gt;&lt;figcaption&gt;Sun in full splendor at Sunset Park on MarathonÂ Key&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;From Marathon, we turned around on US 1 and stopped along the way at Long Key State Park for a few minutes and fewÂ photos.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*B4N9jyo1CAHGJiHPscC9ug.png&quot; /&gt;&lt;figcaption&gt;Long Key State Park on LongÂ Key&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;We got back to the Reefhouse Resort and Marina just after sunset, but I was able to catch some great after sunset photos overlooking the Blackwater Sound.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*CEBlHt6Yj0RnF-1BUKXVFA.png&quot; /&gt;&lt;figcaption&gt;After sunset on the Blackwater Sound at Reefhouse Resort andÂ Marina&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Day 2&lt;/h3&gt;&lt;p&gt;We had to wake up at 6am to see the sunrise at Harry Harris Park on Key Largo. We had looked up what the best place to see a sunrise on Key Largo was, and this park was what we found. We drove there at 7:00am and found a line of cars with boats waiting for the gates to open. Unfortunately, the park opened for cars at 7:30am, which was about 15 minutes after sunrise. We decided I would enter the park on foot, and my wife would wait for me in the car. I took pictures of the sunrise for us. The sunrise here was nice, but not the best sunriseÂ ever.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*XLgTXtlBHXSinqnpXD3Mng.png&quot; /&gt;&lt;figcaption&gt;Sunrise at Harry Harris Park on KeyÂ Largo&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;After the sunrise, we were hungry, so we found a great little restaurant named &lt;a href=&quot;https://www.harriettesrestaurant.com/&quot;&gt;Harrietteâ€™s&lt;/a&gt; for breakfast. The breakfast was delicious, and I had the biggest biscuit I have ever seen on a plate along with a crab filled omelette. I also had a delicious Key Lime muffin. I would definitely go here again. Both the food and service wereÂ great.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*O-eHGA1M96xdLkPJ6ehw8w.png&quot; /&gt;&lt;figcaption&gt;Harrietteâ€™s Restaurant on KeyÂ Largo&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;After breakfast, we decided to explore and see if we could find a decent beach or two in Key Largo. We drove to the north of Key Largo, only to find the road ended with a gate to a private club. We then went to a Botanical Garden in Key Largo for a nice walk. Then we drove around a bit looking at the map on our GPS for places we might be able to see a beach. Unfortunately, there werenâ€™t any that we could find. We went back to the hotel we were staying at and asked the very nice concierge where the nicest beaches we could go to within a reasonable distance were. One of the beaches was at Mile Marker 37, which was past the Seven Mile Bridge. The beach was at &lt;a href=&quot;https://www.floridastateparks.org/BahiaHonda&quot;&gt;Bahia Honda State Park&lt;/a&gt;. We were at Mile Marker 103.8 in Key Largo. After driving 66.8 miles, we would cross the Seven Mile Bridge and arrive at Bahia Honda StateÂ Park.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*mZHDPXZyebL2lrOEH4UfMA.png&quot; /&gt;&lt;figcaption&gt;GPS as we drove over the Seven MileÂ Bridge&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I always wanted to drive over this bridge. Now I have. Twice. I thought it was going to be a bit harrowing to drive over such a long bridge over water, but I found the drive kind of relaxing andÂ fun.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*qv_Lqlc3IzVh1eKpgEA4mQ.png&quot; /&gt;&lt;figcaption&gt;Seven Mile Bridge and old Seven Mile Bridge on theÂ right&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The wide shoulder on the bridge made the drive mostly stress free. The dotted line for cars to pass made it somewhat less so, but I guess some folks just canâ€™t wait to get where they are going. When we arrived at Bahia Honda State Park, we paid the entrance fee and found some parking near a Beach Shop near the marina. We bought some towels and some water shoes, as I planned to go walking out in the amazing lookingÂ water.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*Z3Bjbq548G3bxDe-QZp17A.png&quot; /&gt;&lt;figcaption&gt;Picture of the marina at Bahia Honda StateÂ Park&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Hereâ€™s a selfie of me walking in the water with my new waterÂ shoes.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*DS5L-74ffGdNTnKNHFTK0w.png&quot; /&gt;&lt;figcaption&gt;Walking on water at Bahia Honda StateÂ Park&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The views at several beaches that are part of Bahia Honda State Park were just stunning. I hope you enjoy a few of themÂ here.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*BVk-14GJ17dOIKboBZi8OA.png&quot; /&gt;&lt;figcaption&gt;Bahia Honda Rail Bridge as seen from one of the beaches in theÂ park&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;This is a picture of the bridge we did not drive across. It was a bridge too far for our one day driving on the Florida Keys. NextÂ time!&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*nbSwnTgwD8lOnC4BwcquKQ.png&quot; /&gt;&lt;figcaption&gt;US 1 Bridge seen from Bahia Honda State Parkâ€Šâ€”â€ŠA Bridge tooÂ far&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;When we were done hanging out at Bahia Honda State Park, we headed back across the Seven Mile Bridge and the rest of the keys to Key Largo and the Reefhouse Resort and Marina to enjoy theÂ sunset.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*Yr-Vccp7wiInYCTWmq-9gA.png&quot; /&gt;&lt;figcaption&gt;The Reefhouse Resort beach on Blackwater Sound&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The sunset on Blackwater Sound was cool and somewhatÂ eerie.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*7p86pe6casdKTbzytIDe5g.png&quot; /&gt;&lt;figcaption&gt;Sunset on Blackwater Sound&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Day 3&lt;/h4&gt;&lt;p&gt;We would check out of the Reefhouse on Key Largo at 10am and head back up the east coast of Florida to Palm Coast to visit again with my aunt. But first, we would stop again in Pompano Beach for my favorite coffee at my favorite coffeeÂ house.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*561dco8nCogKkMVGLsnh1A.png&quot; /&gt;&lt;figcaption&gt;A cup of pure Joy at Pompano Beach location of How YouÂ Brewin?&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Palm Coast,Â FL&lt;/h3&gt;&lt;p&gt;We only stayed one night at Palm Coast, but I got to have a couple of Sierra Nevadas at our hotel bar while watching San Francisco win againstÂ Detroit.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*OYxwbbkunc6kDWoLN3kpEQ.png&quot; /&gt;&lt;figcaption&gt;Drinking beer after over a decade avoiding due to allergies&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Hilton Head Island,Â SC&lt;/h3&gt;&lt;p&gt;My wife and I had never been to Hilton Head Island, South Caroline, so we booked two nights at a Marriott Grand Ocean resort there. Sunsets and sunrises were great here. So was theÂ food.&lt;/p&gt;&lt;h4&gt;Day 1&lt;/h4&gt;&lt;p&gt;We arrived after a 3â€“4 hour trip from Palm Coast, Florida. This was the view of the ocean from ourÂ room.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*y4ENSZM6aVC1LlFyzCAP4Q.png&quot; /&gt;&lt;figcaption&gt;Ocean view at our hotel in Hilton Head Island,Â SC&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The beach at Hilton Head Island seemed to be at a really low tide when we took aÂ walk.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*OfGfsoXfwySdneIDjtaQ_g.png&quot; /&gt;&lt;figcaption&gt;Walking on the beach at Hilton Head Island,Â SC&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;We drove to Harbor Town on Hilton Head Island and got some nice after sunset photos. The following picture is of the lighthouse in HarborÂ Town.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*C2S760EPXReTpIQUVMgXsQ.png&quot; /&gt;&lt;figcaption&gt;Harbor Town lighthouse afterÂ sunset&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Day 2&lt;/h4&gt;&lt;p&gt;As it would turn out, the sunrises from our room would get kind of obstructed by the trees. No worries. I walked down to the beach to get some unobstructed pictures.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*jzfRm69YueSKT8TXw3nz9A.png&quot; /&gt;&lt;figcaption&gt;Sunrise on Hilton Head Island,Â SC&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I always enjoy when wildlife or boats decide to get involved in my sunrise and sunset shots. A seagull was nice enough to grace thisÂ shot.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*2TUqjBqfR_p68iwOun_ZZw.png&quot; /&gt;&lt;figcaption&gt;Sunrise with seagull on Hilton Head Island.Â SC&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;My wife has Celiac, so finding safe and good food is always a challenge. On this trip, we found the &lt;a href=&quot;https://www.thegfreespot.com/&quot;&gt;G-Free Spot&lt;/a&gt;! The breakfast sandwiches and bakery items are great here. I had a BEC on an everything bagel that they prepared non-gluten free in a separate kitchen. The coffee was greatÂ too.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*izh7Q39kBzw8YR4qGE370g.png&quot; /&gt;&lt;figcaption&gt;The G-FreeÂ Spot&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;We got a recommendation to visit the &lt;a href=&quot;https://www.fws.gov/refuge/pinckney-island&quot;&gt;Pinckney Island National Wildlife Refuge&lt;/a&gt;. I wish we had more time to spend there, but I would go back. We were lucky and got to see an alligator in Ibis Pond while we were visiting.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*kRFQYUX_MDL-Ga-c8gPfZg.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;I had to zoom on my camera to get this shot, but hopefully you can spot the alligator without too muchÂ strain.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*ZPsgOheKJe1hl6QkjxHsKA.png&quot; /&gt;&lt;figcaption&gt;Alligator sunning in IbisÂ Pond&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;We returned to Harbor Town for the sunset and dinner, and we were so very happy with both. This picture had a really cool cloud interaction. It almost looked like a left over tornado getting sizzled out by theÂ sun.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*34Sb4Jf9DCWDlSBiqu6t3g.png&quot; /&gt;&lt;figcaption&gt;Sun with cool cloud at HarborÂ Town&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I like when I am able to line up the sun with something that makes a fun picture. Here the sun is turning on the light which wasÂ off.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*njuwSAgZCZzqmkMUU_blEw.png&quot; /&gt;&lt;figcaption&gt;Sun-light&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;My two favorite sunsets on this trip was this one and the one we experienced on SingerÂ Island.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*fVA81Elmj-ynOeIf44AKFw.png&quot; /&gt;&lt;figcaption&gt;Sunset at Harbor Town on Hilton HeadÂ Island&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I am always excited to wait and see what the sun will do with the clouds as it goes down. This sunset did not disappoint.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*MHTqf6T4wrnPmCnO_txhcQ.png&quot; /&gt;&lt;figcaption&gt;Sunset with more clouds at HarborÂ Town&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The after sunset effects are always a treat when they work outÂ well.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*fW39G7knaLD13jxKDP1MCw.png&quot; /&gt;&lt;figcaption&gt;Pastels in the sky after sunset at HarborÂ Town&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I guess I was enjoying the sunset so much, along with a terrific dinner at the &lt;a href=&quot;https://www.seapines.com/dining/restaurants-bars/quarterdeck&quot;&gt;Quarterdeck&lt;/a&gt; restaurant, that I didnâ€™t notice that I drank three IPAs with myÂ dinner.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*s47JRZ6Q_Bnl-DVf5kf_cg.png&quot; /&gt;&lt;figcaption&gt;IPA number 3 with after sunset view from our table at Quarterdeck&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;My wife drove us back to our hotel. After all of my driving the previous 15 days, I was happy to have theÂ break.&lt;/p&gt;&lt;h3&gt;No More Pictures, but Plenty ofÂ Memories&lt;/h3&gt;&lt;p&gt;We checked out of our hotel at 10am as per the usual, and had our longest drive from Hilton Head Island, SC to Williamsburg, VA. It took us about 8 hours and I had to refill the gas tank once along the way. When we arrived in Williamsburg, we booked a reservation again at Mellow Mushroom and had a great dinner. The following morning, we checked out again, and decided to break our final drive home to New Jersey in half by stopping by Washington D.C. to have lunch with my wifeâ€™s uncle and aunt. After a nice lunch, we finished the drive back to NewÂ Jersey.&lt;/p&gt;&lt;p&gt;There were many other amazing things we did on this trip, like driving up the A1A in Florida from Palm Coast to St. Augustine. We also drove up the A1A from Pompano Beach through Boca Raton up to Palm Beach when we were headed to Singer Island. We also drove the A1A down to Ft. Lauderdale from Pompano Beach on our way to Miami. Our goal was to see as many places and things as we could while we were driving. This trip was about the journey, not the destination. We enjoyed every single minute of the drive, and there were a shit ton of minutes for us toÂ enjoy.&lt;/p&gt;&lt;p&gt;I always wanted to take a slow walk road trip with my wife down the east coast. Weâ€™ve now done it, and I feel like weâ€™ve bridged a gap in our lives. We are both ready to try some trips from east to west. I once drove from San Diego to New Orleans with my brother over the course of a week. We took one path that I enjoyed but would not take again. I would like instead to drive along the famed Route 66. The trick is that you need more time to enjoy the journey. One week is not enough. Three weeks lets you take your time and see moreÂ stuff.&lt;/p&gt;&lt;p&gt;Thanks for reading and I hope you enjoyed the selection of pictures I used to tell my January 2024 road tripÂ story!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=5180e685dbf4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 07 Feb 2024 19:12:47 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Accessibility in Diagram Editors with Eclipse GLSP</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/02/07/accessibility-in-diagram-editors-with-eclipse-glsp/</guid>
	<link>https://eclipsesource.com/blogs/2024/02/07/accessibility-in-diagram-editors-with-eclipse-glsp/</link>
	<description>&lt;p&gt;In an exciting collaboration with Dr. Dominik Bork and master student Aylin Sarioglu at the Business Informatics Group at Vienna University, we’ve achieved a new pivotal capability in GLSP 2.0: an …&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/02/07/accessibility-in-diagram-editors-with-eclipse-glsp/&quot; rel=&quot;nofollow&quot;&gt; Accessibility in Diagram Editors with Eclipse GLSP&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Wed, 07 Feb 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Fabio Zadrozny: LiClipse 11: newer PyDev and on to new Eclipse base (4.30)</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7855001383687474475.post-6516188899616880868</guid>
	<link>http://liclipse.blogspot.com/2024/02/liclipse-11-newer-pydev-and-on-to-new.html</link>
	<description>&lt;p&gt; LiClipse 11 is now out and includes the newer version of PyDev, which has a whole new debugging mode using sys.monitoring (which translates to a much faster debugging experience overall -- see: &lt;a href=&quot;https://pydev.blogspot.com/2024/02/pydev-debugger-and-sysmonitoring-pep.html&quot;&gt;https://pydev.blogspot.com/2024/02/pydev-debugger-and-sysmonitoring-pep.html&lt;/a&gt; for more details).&lt;/p&gt;&lt;p&gt;Also, it is now based on Eclipse 4.30 -- this time it was actually quite tricky as there are some internal changes to Eclipse itself which had to be changed in a bunch of places (the @Inject is now from jakarta instead of javax and the orbit aggregation site changed).&lt;/p&gt;&lt;p&gt;One pretty important note I haven't commented before is that now LiClipse is signed on Mac OS too (not just Windows). &lt;/p&gt;&lt;p&gt;Unfortunately Eclipse suffers a bit from that because after signing it's expected that nothing inside the .app will change. This means that quite some work was done so that .pyc files are not created inside the app anymore and nothing changes there -- unfortunately at this points additional plugins on top of LiClipse can not be installed when using Mac OS (I'm still researching on alternative approaches here).&lt;br /&gt;&lt;/p&gt;&lt;p&gt;On a separate note, it's been quite a while since I haven't posted about LiClipse itself... I guess this boils down to the fact that most of the work ends up happening on PyDev or LiClipseText directly -- but rest assured that work is indeed happening here ğŸ˜‰! &lt;/p&gt;</description>
	<pubDate>Sun, 04 Feb 2024 11:39:46 +0000</pubDate>
	<author>noreply@blogger.com (Fabio Zadrozny)</author>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse GLSP 2: Elevating Web-based Diagram Editors</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/01/31/eclipse-glsp-2-elevating-web-based-diagram-editors/</guid>
	<link>https://eclipsesource.com/blogs/2024/01/31/eclipse-glsp-2-elevating-web-based-diagram-editors/</link>
	<description>&lt;p&gt;We are excited to announce the recent release of Eclipse GLSP 2! This new major release marks a significant advancement in the domain of web-based diagram editors offering an impressive array of new â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/01/31/eclipse-glsp-2-elevating-web-based-diagram-editors/&quot; rel=&quot;nofollow&quot;&gt; Eclipse GLSP 2: Elevating Web-based Diagram Editors&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: Eclipse and OpenAtom: Pioneering Open Source Innovation</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1762</guid>
	<link>https://eclipse-foundation.blog/2024/01/30/eclipse-and-openatom-pioneering-open-source-innovation/</link>
	<description>&lt;p&gt;We’re thrilled to share that the Eclipse Foundation has signed a collaboration agreement with the OpenAtom Foundation, China’s first open source foundation. Together, we will be driving the development of Oniro, an open source project that builds upon the versatile OpenHarmony operating system. Our aim is to create a modular and globally compatible operating system platform and ecosystem, catering to a wide spectrum of smart devices.&lt;/p&gt;



&lt;p&gt;Oniro is more than an open source project. To our knowledge, this marks the first instance of two open source foundations engaging in such detailed technical collaboration – a significant step towards cultivating a global ecosystem for open intelligent devices. The collaborative approach not only ensures a competitive landscape, but also opens doors for participation by organisations worldwide, affirming the far-reaching impact of open source on technical innovation.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;OpenHarmony: A Robust Platform&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;OpenHarmony shines in its versatility, offering robust support for a wide array of smart devices that not only showcases scalability, but also highlights its adaptability. Designed for scalable management of distributed systems, OpenHarmony stands out as a flexible platform capable of accommodating IoT solutions of varying scale.&lt;/p&gt;



&lt;p&gt;In recent years, OpenHarmony has made some noteworthy advancements. It’s been certified in over 200 devices and now supports more than 40 development boards. With a vibrant community of over 6,200 contributors and over 16 million lines of code, it has fostered 42 distributions and played a pivotal role in launching over 200 devices.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Oniro: Tailoring OpenHarmony for Western Markets&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;The goal of the Oniro Project is to elevate the OpenHarmony platform by developing a suite of Western market-focused modifications and add-ons, while preserving compatibility with the core platform. This dynamic collaboration encompasses advancements in application frameworks, system-level components, software development tools, and a toolchain ensuring adherence to regulatory compliance, intellectual property compliance, and licensing.&lt;/p&gt;



&lt;p&gt;As per &lt;a href=&quot;https://www.statista.com/statistics/1194682/iot-connected-devices-vertically/&quot;&gt;Statista’s 2023 forecast&lt;/a&gt;, the worldwide count of connected devices is anticipated to nearly double by 2030, reaching an impressive 29.42 billion IoT devices. Oniro is well positioned to actively participate in this expansive growth with strong execution of the 3 fundamental principles on which this project is built: seamless interoperability, modularization, and a visually appealing user interface. These principles not only embody the core mission of Oniro, but also position it as the go-to option for a broad range of applications, including consumer electronics, home appliances, industrial IoT devices, smart home devices, and multimedia devices.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Join the Innovation Journey&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;As OpenHarmony and Oniro join forces, exciting times are ahead. We invite you to be part of this journey, contribute your ideas, and participate in the magic that unfolds when open source organisations collaborate. Stay tuned for more updates as we collectively build a future where innovation knows no bounds!&lt;/p&gt;</description>
	<pubDate>Tue, 30 Jan 2024 12:55:00 +0000</pubDate>
</item>
<item>
	<title>InfoQ Eclipse feed: Java News Roundup: WildFly 31, Eclipse Store 1.1, Liberica NIK, Quarkus, JHipster Lite</title>
	<guid isPermaLink="true">https://www.infoq.com/news/2024/01/java-news-roundup-jan22-2024/?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</guid>
	<link>https://www.infoq.com/news/2024/01/java-news-roundup-jan22-2024/?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</link>
	<description>&lt;img src=&quot;https://res.infoq.com/news/2024/01/java-news-roundup-jan22-2024/en/headerimage/java-istock-image-01-1706538485037.jpg&quot; /&gt;&lt;p&gt;This week's Java roundup for January 22nd, 2024 features news highlighting: WildFly 31.0.0, Eclipse Store 1.1.0, BellSoft Liberica Native Image Kit, multiple releases of Quarkus and JHipster Lite, and Jakarta EE 11 updates.&lt;/p&gt; &lt;i&gt;By Michael Redlich&lt;/i&gt;</description>
	<pubDate>Mon, 29 Jan 2024 14:30:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Running Eclipse Theia without a backend</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/01/29/29/</guid>
	<link>https://eclipsesource.com/blogs/2024/01/29/29/</link>
	<description>&lt;p&gt;When hosting cloud-based tools and IDEs, backend efficiency and cost-effectiveness are a key consideration. We are excited to present an ongoing development in the Eclipse Theia project that not only â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/01/29/29/&quot; rel=&quot;nofollow&quot;&gt; Running Eclipse Theia without a backend&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Ditto: Announcing Eclipse Ditto Release 3.5.0</title>
	<guid isPermaLink="true">https://www.eclipse.dev/ditto/2024-01-26-release-announcement-350.html</guid>
	<link>https://www.eclipse.dev/ditto/2024-01-26-release-announcement-350.html</link>
	<description>&lt;p&gt;The Eclipse Ditto team wished you a happy new year and is excited to announce availability of Ditto
&lt;a href=&quot;https://projects.eclipse.org/projects/iot.ditto/releases/3.5.0&quot;&gt;3.5.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In 3.5.0 a lot of UI improvements are contained and several smaller but very useful features were added.&lt;br /&gt;
Thanks a lot to the contributors who contributed to this release, this is really appreciated.&lt;/p&gt;

&lt;h2 id=&quot;adoption&quot;&gt;Adoption&lt;/h2&gt;

&lt;p&gt;Companies are willing to show their adoption of Eclipse Ditto publicly: 
&lt;a href=&quot;https://iot.eclipse.org/adopters/#iot.ditto&quot;&gt;https://iot.eclipse.org/adopters/?#iot.ditto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you use Eclipse Ditto it would be great to support the project by putting your logo there.&lt;/p&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;p&gt;The main improvements and additions of Ditto 3.5.0 are:&lt;/p&gt;

&lt;p&gt;Eclipse Ditto 3.5.0 focuses on the following areas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Search in the history&lt;/strong&gt; of a &lt;strong&gt;single thing&lt;/strong&gt; using an RQL filter&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Configure per namespace&lt;/strong&gt; the &lt;strong&gt;fields to index&lt;/strong&gt; in Ditto’s &lt;strong&gt;search index&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Configure &lt;strong&gt;defined search count queries&lt;/strong&gt; to be &lt;strong&gt;exposed as Prometheus metrics&lt;/strong&gt; by Ditto periodically&lt;/li&gt;
  &lt;li&gt;Providing &lt;strong&gt;new placeholder functionality&lt;/strong&gt; to the &lt;strong&gt;time placeholder&lt;/strong&gt;, being able to &lt;strong&gt;add and subtract to/from
the current time&lt;/strong&gt; and to truncate the time to a given unit&lt;/li&gt;
  &lt;li&gt;Enhance &lt;strong&gt;WoT (Web of Things) JSON skeleton creation&lt;/strong&gt; to be able to &lt;strong&gt;fail with an exception&lt;/strong&gt; on &lt;strong&gt;invalid&lt;/strong&gt; WoT models&lt;/li&gt;
  &lt;li&gt;Provide &lt;strong&gt;negative numbers&lt;/strong&gt; when &lt;strong&gt;querying for the historical events&lt;/strong&gt; of an entity (thing, policy, connection) in order to
&lt;strong&gt;e.g. get “latest 10” events&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;UI enhancements:
    &lt;ul&gt;
      &lt;li&gt;Show &lt;strong&gt;policy imports&lt;/strong&gt; in Ditto explorer UI&lt;/li&gt;
      &lt;li&gt;Enhance UI &lt;strong&gt;Operations&lt;/strong&gt; functionality to be able to &lt;strong&gt;perform devops/piggyback commands&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Allow &lt;strong&gt;editors in UI&lt;/strong&gt; to toggle &lt;strong&gt;full screen mode&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Display attributes in UI&lt;/strong&gt; inside a &lt;strong&gt;JSON editor&lt;/strong&gt; in order to correctly display structured JSON payloads&lt;/li&gt;
      &lt;li&gt;Enhance “&lt;strong&gt;Incoming Thing Updates&lt;/strong&gt;” section by &lt;strong&gt;displaying “Action” and “Path” in the table&lt;/strong&gt; and adding a &lt;strong&gt;dropdown to
select the amount of details&lt;/strong&gt; to show per event&lt;/li&gt;
      &lt;li&gt;Add &lt;strong&gt;client side filter option&lt;/strong&gt; for filtering &lt;strong&gt;Incoming Thing Updates&lt;/strong&gt; and &lt;strong&gt;Connection logs&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following non-functional work is also included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Configured docker-compose to by default retain only the last 50m of log messages per Ditto service&lt;/li&gt;
  &lt;li&gt;Migrated SLF4J to version 2.x and logback to version 1.4.x&lt;/li&gt;
  &lt;li&gt;Benchmark tool improvements and fixes&lt;/li&gt;
  &lt;li&gt;Improve cluster stability when running in Kubernetes, e.g. on updates or k8s node-shutdowns&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following notable fixes are included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix enriching Thing creation events with the inlined &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_policy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Fixed that Ditto’s own calculated “health” was not exposed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/alive&lt;/code&gt; endpoint scraped by Kubernetes to check for
aliveness of single services&lt;/li&gt;
  &lt;li&gt;Fixed that no cache was used when updating the search index when an “imported” policy was modified&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please have a look at the &lt;a href=&quot;https://eclipse.dev/ditto/release_notes_350.html&quot;&gt;3.5.0 release notes&lt;/a&gt; for a more detailed information on the release.&lt;/p&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Ditto JavaScript client release was published on &lt;a href=&quot;https://www.npmjs.com/~eclipse_ditto&quot;&gt;npmjs.com&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/@eclipse-ditto/ditto-javascript-client-dom&quot;&gt;@eclipse-ditto/ditto-javascript-client-dom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/@eclipse-ditto/ditto-javascript-client-node&quot;&gt;@eclipse-ditto/ditto-javascript-client-node&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Ditto Helm chart has been published to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto/&quot;&gt;eclipse/ditto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://eclipse.dev/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Fri, 26 Jan 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Unveiling the Power of Open VSX: An Open Hub for Top VS Code Extensions</title>
	<guid isPermaLink="false">7482 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/unveiling-power-open-vsx-open-hub-top-vs-code-extensions</link>
	<description>&lt;span&gt;Unveiling the Power of Open VSX: An Open Hub for Top VS Code Extensions&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://open-vsx.org/&quot;&gt;Open VSX&lt;/a&gt; is an open source registry for VS Code extensions, providing a decentralized and community-driven alternative to the Visual Studio Code Marketplace. Created to foster collaboration and innovation, Open VSX offers developers a space to share, discover, and contribute to a growing repository of extensions. Open VSX offers a curated selection of extensions that caters to various programming languages and development workflows. It's not about quantity; it's about quality and relevance to the community's needs. &lt;/p&gt;&lt;div class=&quot;align-center&quot;&gt;
  
  
  &lt;div class=&quot;field field--name-field-media-image field--type-image field--label-visually_hidden&quot;&gt;
    &lt;div class=&quot;field--label sr-only&quot;&gt;Image&lt;/div&gt;
              &lt;div class=&quot;field--item&quot;&gt;  &lt;img alt=&quot;open-vsx.org&quot; class=&quot;img-responsive&quot; height=&quot;271&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/styles/large/public/2024-01/Screenshot%202024-01-24%20at%208.23.17%E2%80%AFPM.png?itok=TWbfpddT&quot; width=&quot;480&quot; /&gt;


&lt;/div&gt;
          &lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;Open VSX boasts a collection that includes all of the most popular (top 100) VS Code extensions available on the Visual Studio Code Marketplace under open source licenses. These extensions cover a wide range of functionalities, from code formatting and linting to language support, debugging, and version control. For example, you can find extensions for editing and debugging &lt;a href=&quot;https://open-vsx.org/extension/ms-python/python&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;https://open-vsx.org/extension/ms-toolsai/jupyter&quot;&gt;Jupyter notebooks&lt;/a&gt;, editing and debugging &lt;a href=&quot;https://open-vsx.org/extension/redhat/java&quot;&gt;Java&lt;/a&gt;, and &lt;a href=&quot;https://open-vsx.org/extension/eamodio/gitlens&quot;&gt;Gitlens&lt;/a&gt;, a powerful tool for improved collaboration and productivity with Git. &lt;/p&gt;&lt;p&gt;What sets Open VSX apart is its commitment to openness and inclusivity. Anyone can contribute to the platform and its extensions can be used in any compatible IDE, making it a true reflection of the diverse needs and preferences of the developer community. &lt;/p&gt;&lt;p&gt;Open VSX stands as a testament to the collaborative spirit of the developer community. It's not just a registry; it's a thriving ecosystem where developers come together to elevate their coding experience. &lt;/p&gt;&lt;p&gt;If you'd like to become part of the Open VSX community, consider &lt;a href=&quot;https://github.com/eclipse/openvsx/wiki/Publishing-Extensions&quot;&gt;publishing an extension&lt;/a&gt;; contributing to one of the projects that comprise the deployment, &lt;a href=&quot;https://github.com/eclipse/openvsx&quot;&gt;eclipse/openvsx&lt;/a&gt;, &lt;a href=&quot;https://github.com/EclipseFdn/open-vsx.org&quot;&gt;EclipseFdn/open-vsx.org&lt;/a&gt;, and &lt;a href=&quot;https://github.com/open-vsx/publish-extensions&quot;&gt;open-vsx/publish-extensions&lt;/a&gt;; subscribe to our mailing list; or join us as part of the &lt;a href=&quot;https://www.eclipse.org/org/workinggroups/explore.php&quot;&gt;Open VSX Working Group&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-01-22T14:12:02-05:00&quot; title=&quot;Monday, January 22, 2024 - 14:12&quot;&gt;Mon, 2024-01-22 14:12&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Mon, 22 Jan 2024 19:12:02 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Cloud DevTools Contributor Award 2023 goes to EclipseSource and TypeFox</title>
	<guid isPermaLink="false">7481 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-award-2023-goes-eclipsesource-and-typefox</link>
	<description>&lt;span&gt;Eclipse Cloud DevTools Contributor Award 2023 goes to EclipseSource and TypeFox&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The Eclipse Cloud DevTools Contributor Award for the year 2023 is being jointly awarded to two remarkable companies, &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/&quot;&gt;&lt;span&gt;EclipseSource&lt;/span&gt;&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a href=&quot;https://www.typefox.io/&quot;&gt;&lt;span&gt;TypeFox&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, in acknowledgment of their enormous, continuous, strategic, and sustainable contributions to the Eclipse Cloud DevTools ecosystem.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Throughout 2023, EclipseSource and TypeFox have demonstrated exceptional commitment and expertise in various projects within the ecosystem, including &lt;/span&gt;&lt;a href=&quot;https://theia-ide.org/&quot;&gt;&lt;span&gt;Eclipse Theia&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;https://eclipse.dev/cdt-cloud/&quot;&gt;&lt;span&gt;CDT Cloud&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;https://eclipse.dev/glsp/&quot;&gt;&lt;span&gt;Eclipse GLSP&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;https://sprotty.org/&quot;&gt;&lt;span&gt;Eclipse Sprotty&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;https://eclipse.dev/emfcloud/&quot;&gt;&lt;span&gt;EMF Cloud&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, and &lt;/span&gt;&lt;a href=&quot;https://langium.org/&quot;&gt;&lt;span&gt;Eclipse Langium&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. Their leadership role is evident as they provide project leads and several committers to these open source projects. Their excellence was already recognized in monthly awards in January, July, October, and December, showcasing their consistent and impactful contributions.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Their involvement in the Eclipse Cloud DevTools ecosystem is not just technical; both companies have been pivotal in strategic initiatives, which significantly supported the growth of the community and nurtured the adoption of its open-source technologies sustainably. As active participants and leading architects in the Eclipse Cloud DevTools working group, they have shown foresight in shaping the future of cloud development tools.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://www.typefox.io/&quot;&gt;&lt;span&gt;TypeFox&lt;/span&gt;&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/&quot;&gt;&lt;span&gt;EclipseSource&lt;/span&gt;&lt;/a&gt;&lt;span&gt; play a unique and vital role in the ecosystem. As service providers specializing in building tools and IDEs, they provide an essential resource for companies aiming to develop their own tool offerings. Their investment in the maintenance and evolution of projects in the ecosystem is therefore not only a testament to their dedication but also strategically vital for their operations.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;In addition to their extensive contributions, EclipseSource and TypeFox provide a unique model of sponsored open source development. By contracting a service provider for sponsored development, adopters can directly engage experts who contribute to open source projects on their behalf, enabling a highly tailored and impactful approach to advancing open source initiatives that are of strategic importance for the adopter. This allows other companies to leverage the expertise of EclipseSource and TypeFox for specific fixes, feature developments, and general project maintenance, enabling a broader group of organizations to contribute to and strengthen the open-source ecosystem. The approach also allows for resource pooling, where multiple companies can collectively sponsor a full-time expert committer, thereby enhancing the efficiency and impact of contributions. The model of sponsored development has proven to be highly successful in the Eclipse Cloud DevTools Ecosystem, leading to increased and more sustainable contributions, thereby significantly enriching the ecosystem.&lt;/span&gt;&lt;/p&gt;&lt;img alt=&quot;EclipseSource and TypeFox&quot; class=&quot;align-center&quot; height=&quot;199&quot; src=&quot;https://lh7-eu.googleusercontent.com/MlMVDutUyMyN2PS00FLfVpasCYlkiS4zCKncXiAd9UwNZl85UA4FpgbCE31tTIkzHRoqADzfuvgnLJ1bYb5vL-7eyofsQYMhwe67LViRO9frhGM3I2JFn5p31WS5zfHPM7HjIpOKv2G7MgnWfHtxu7E&quot; width=&quot;624&quot; /&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Project websites contain information about which companies provide support and sponsored development.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Service providers like EclipseSource and TypeFox are cornerstone elements of a thriving open-source ecosystem. They offer important support for custom projects and play a crucial role in fostering sponsored development for open-source components. We congratulate and thank both EclipseSource and TypeFox for being the recipients of the Eclipse Cloud DevTools Contributor Award for the year 2023. Your consistent dedication and impactful contributions have significantly advanced the Eclipse Cloud DevTools landscape, and we are profoundly grateful for your commitment and excellence.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;This Eclipse Cloud DevTools contributor award is sponsored by the &lt;/span&gt;&lt;a href=&quot;https://ecdtools.eclipse.org/&quot;&gt;&lt;span&gt;Eclipse Cloud DevTools Working Group&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. The working group provides a vendor-neutral ecosystem of open source projects focused on defining, implementing and promoting best-in-class web and cloud-based development tools. It is hosted at the Eclipse Foundation, current members of the group include &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=848&quot;&gt;&lt;span&gt;AMD&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=823&quot;&gt;&lt;span&gt;Arm&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=690&quot;&gt;&lt;span&gt;EclipseSource&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;&lt;span&gt;Ericsson&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=863&quot;&gt;&lt;span&gt;Obeo&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=731&quot;&gt;&lt;span&gt;RedHat&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1069&quot;&gt;&lt;span&gt;Renesas&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;&lt;span&gt;STMicroelectronics&lt;/span&gt;&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1194&quot;&gt;&lt;span&gt;TypeFox&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-01-22T09:45:34-05:00&quot; title=&quot;Monday, January 22, 2024 - 09:45&quot;&gt;Mon, 2024-01-22 09:45&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Mon, 22 Jan 2024 14:45:34 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Hosting IDEs and tools online - lessons learned</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/01/22/hosting-ides-and-tools-online/</guid>
	<link>https://eclipsesource.com/blogs/2024/01/22/hosting-ides-and-tools-online/</link>
	<description>&lt;p&gt;The transition to cloud-based tools and IDEs is reshaping the landscape of software development. However, the details of hosting tools and IDEs online present unique challenges. If you’re considering …&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/01/22/hosting-ides-and-tools-online/&quot; rel=&quot;nofollow&quot;&gt; Hosting IDEs and tools online - lessons learned&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: CDT Cloud Blueprint: Tracing with TraceCompass Cloud</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/01/18/cdt-cloud-blueprint-tracing/</guid>
	<link>https://eclipsesource.com/blogs/2024/01/18/cdt-cloud-blueprint-tracing/</link>
	<description>&lt;p&gt;In the world of C/C++ development, especially when doing performance tuning, tracing plays a pivotal role. CDT Cloud Blueprint, the web-based C/C++ development environment, provides advanced Tracing â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/01/18/cdt-cloud-blueprint-tracing/&quot; rel=&quot;nofollow&quot;&gt; CDT Cloud Blueprint: Tracing with TraceCompass Cloud&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Cloud DevTools Digest - November and December 2023</title>
	<guid isPermaLink="false">7479 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-digest-november-and-december-2023</link>
	<description>&lt;span&gt;Eclipse Cloud DevTools Digest - November and December 2023&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;Theia Announces Full Compatibility with VS Code Extension API&lt;/h3&gt;&lt;img alt=&quot;Theia IDE&quot; src=&quot;https://theia-ide.org/static/theia-screenshot-6feea3c00c8e1ee681e38a48d927f51b.png&quot; width=&quot;49.44%&quot; /&gt;&lt;p dir=&quot;ltr&quot;&gt;In his &lt;a href=&quot;https://eclipse-foundation.blog/2023/12/18/celebrating-eclipse-theias-milestone-full-compatibility-with-vs-code-extension-api/&quot;&gt;blog&lt;/a&gt;, Mike Milinkovich announced a significant achievement in the development of &lt;a href=&quot;https://theia-ide.org/&quot;&gt;Theia&lt;/a&gt;: to wit, full compatibility with the Visual Studio Code (VS Code) extension API. This is a  major milestone in the evolution of Theia toward a universally adaptable development environment.&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;Contributor Awards to Tobias Ortmayr and Dominik Bork&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;The Cloud Dev Tools Working Group presented Contributor of the Month awards to &lt;a href=&quot;https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-awardtobias-ortmayr-improving-performance&quot;&gt;Tobias Ortmayr&lt;/a&gt; for his continued work improving the performance of Theia and to &lt;a href=&quot;https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-award-dominik-bork-bridging-academia-open&quot;&gt;Dominik Bork&lt;/a&gt; bringing academia, industry and open source closer together. &lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;On Building Cloud Native Modeling Tools&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;Jonas, Maximilian &amp;amp; Philip, in this &lt;a href=&quot;https://eclipsesource.com/blogs/2023/12/18/building-cloud-native-modeling-tools/&quot;&gt;article&lt;/a&gt;, wrote about a talk they gave at &lt;a href=&quot;https://www.eclipsecon.org/2023&quot;&gt;EclipseCon 2023&lt;/a&gt; on building cloud native modeling tools using modern web-based open source technologies like  &lt;a href=&quot;https://eclipse.dev/emfcloud/&quot;&gt;EMF Cloud&lt;/a&gt;, &lt;a href=&quot;https://langium.org/&quot;&gt;Langium&lt;/a&gt; and &lt;a href=&quot;https://eclipse.dev/glsp/&quot;&gt;GLSP.&lt;/a&gt;&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;On Building Diagrams with GLSP&lt;/h3&gt;&lt;img src=&quot;https://eclipse.dev/glsp/images/diagramanimated_compact.gif&quot; width=&quot;52.79%&quot; /&gt;&lt;p dir=&quot;ltr&quot;&gt;In another &lt;a href=&quot;https://eclipsesource.com/blogs/2023/12/11/collaborative-diagrams-glsp/&quot;&gt;article&lt;/a&gt;, Jonas, Maximilian &amp;amp; Philip also write about another talk they gave at EclipseCon 2023 about building diagramming tools using GLSP that are more testable, collaborative, and accessible (through improved keyboard navigation and metadata annotations).&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;Theia Releases 1.44 and 1.45&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;Theia released &lt;a href=&quot;https://eclipsesource.com/blogs/2023/12/05/eclipse-theia-1-44-release-news-and-noteworthy/&quot;&gt;1.44&lt;/a&gt; and &lt;a href=&quot;https://eclipsesource.com/blogs/2023/12/29/eclipse-theia-1-45-release-news-and-noteworthy/&quot;&gt;1.45&lt;/a&gt; adding support for a &quot;portable mode&quot; keeping user data with the Theia application, language icons, improvements for secondary windows, search history, and saving untitled files.&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;Theia Community Release 2023-11&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;Theia also released their Community Release 2023-11 based on Theia 1.43. Community releases are provided once a quarter with a dedicated release branch that allows contributors to further harden and even hotfix a community release.  To learn more about the &lt;a href=&quot;https://eclipsesource.com/blogs/2022/08/16/introducing-the-eclipse-theia-community-release/&quot;&gt;advantages of the Theia community release&lt;/a&gt;, visit the &lt;a href=&quot;https://theia-ide.org/releases/&quot;&gt;Theia release page&lt;/a&gt;.&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;Other Recent Releases&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/ecd.jkube/releases/1.15.0&quot;&gt;JKube 1.15.0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/ecd.langium/releases/2.1.3&quot;&gt;Langium 2.1.3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Cloud Tool Time Webinars&lt;/h3&gt;&lt;p&gt;We are now scheduling Cloud Tool Time webinars for 2023. Be sure to &lt;a href=&quot;https://forms.gle/K8ZuJ26YqoyMC9dD7&quot;&gt;Sign up&lt;/a&gt; now to get on the calendar and let us help tell your story. You can see past sessions on our &lt;a href=&quot;https://www.youtube.com/playlist?list=PLy7t4z5SYNaSBxx8gLh0i9LlN2bZW6H1L&quot;&gt;Youtube channel&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Eclipse Cloud DevTools Projects&lt;/h3&gt;&lt;img alt=&quot;Eclipse Cloud DevTools&quot; class=&quot;align-center&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2023-07/Cloud%20DevTools.png&quot; /&gt;&lt;p&gt;Explore the &lt;a href=&quot;https://ecdtools.eclipse.org/projects/&quot;&gt;Eclipse Cloud DevTools ecosystem&lt;/a&gt;! Check out our projects page to find out more about open source innovation for cloud IDEs, extension marketplaces, frameworks and more.&lt;/p&gt;&lt;h3&gt;Getting Listed on the Cloud DevTools Blog&lt;/h3&gt;&lt;p&gt;If you are working with, or on, anything in the Cloud DevTools space, &lt;a href=&quot;https://blogs.eclipse.org/post/brian-king/getting-listed-cloud-devtools-blog&quot;&gt;learn how to get your writings posted&lt;/a&gt; in our &lt;a href=&quot;https://ecdtools.eclipse.org/resources/blogs/&quot;&gt;blog section&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2024-01-17T14:57:26-05:00&quot; title=&quot;Wednesday, January 17, 2024 - 14:57&quot;&gt;Wed, 2024-01-17 14:57&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Wed, 17 Jan 2024 19:57:26 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: What if Java had no for?</title>
	<guid isPermaLink="false">https://medium.com/p/85302ab7e484</guid>
	<link>https://donraab.medium.com/what-if-java-had-no-for-85302ab7e484?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;These loops look like objects to me!&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*POh-3yEQwQSXdrJg&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@etiennegirardet?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Etienne Girardet&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Where for art thou?&lt;/h3&gt;&lt;p&gt;This blog is intended to make you think about and discover alternatives to modeling for loops in an object-oriented (OO) programming language. It is convenient to have a versatile and performant &lt;em&gt;eager&lt;/em&gt; for statement built in the Java language. It is also convenient to have &lt;em&gt;lazy&lt;/em&gt; versions of numeric range based for loops in the form of IntStream and LongStream.&lt;/p&gt;&lt;p&gt;In my &lt;a href=&quot;https://donraab.medium.com/what-if-java-had-no-if-ea88d90b76c3?source=friends_link&amp;amp;sk=7b8f510b439b8599a806093783917216&quot;&gt;previous blog&lt;/a&gt;, I introduced a new &lt;em&gt;lazy&lt;/em&gt; abstraction for an int range based for loop, without giving much of an explanation. This is the quote in the previous blog where I introduced the concept.&lt;/p&gt;&lt;blockquote&gt;In the active Boolean version of the the code, I use an IntInterval from &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; to represent an OO version of the for loop.&lt;/blockquote&gt;&lt;p&gt;I will explain what an IntInterval from Eclipse Collections is later in the blog.&lt;/p&gt;&lt;p&gt;The following are the topics I will cover in this blog.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/feed/@donraab#e4c9&quot;&gt;For Loops in Java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/feed/@donraab#aa4d&quot;&gt;OO For Loops in Smalltalk&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/feed/@donraab#536c&quot;&gt;OO For Loops in Java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/feed/@donraab#878b&quot;&gt;OO For Loops in Eclipse Collections&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In this blog, I explain some of the versatility of for statements in Java with examples. I explain how some of the language (lambdas) and library (Streams) work including in Java 8 release have improved the level of abstraction of looping constructs for Java developers. Java does not go as far as Smalltalk does on the OO abstraction level for looping constructs. I show and explain how Smalltalk makes some things amazingly simple in its pure object-oriented approach to looping. Finally, I explain some features that Eclipse Collections provides that enables additional levels of abstraction for Java developers to enhance their productivity.&lt;/p&gt;&lt;p&gt;This blog does not include anything about parallelism.&lt;/p&gt;&lt;h3&gt;1. For Loops in Java&lt;/h3&gt;&lt;h4&gt;Three parts of the for&lt;/h4&gt;&lt;p&gt;Looping is part of control flow in a programming language. For loops are used to do things until a condition is met, or infinitely if no condition is specified. There is a for statement in Java that is well structured and extremely useful for executing a block of code a number of times. The example I used in the previous blog was to output a String parameter a specified number of times.&lt;/p&gt;&lt;pre&gt;public static void main(String[] args)&lt;br /&gt;{&lt;br /&gt;    int numberOfTimes = Integer.parseInt(args[0]);&lt;br /&gt;    for (int i = 0; i &amp;lt; numberOfTimes; i++)&lt;br /&gt;    {&lt;br /&gt;        System.out.println(args[1]);&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The code will throw an exception if less than two arguments are passed in. This code will output the String at args[1] the number of times specifed at args[0]. The String at args[0] is converted to an int and stored in the variable numberOfTimes.&lt;/p&gt;&lt;p&gt;The structure of a for loop in Java includes three statements inside of parentheses after the for keyword, each separated by a semi-colon. The statements are as follows.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;Initialization&lt;/em&gt;&lt;/strong&gt;— executed once to initialize one or more variables&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;Continue Condition&lt;/em&gt;&lt;/strong&gt; — a boolean expression that when true will continue to loop and when false will cause the loop to exit&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;Advancement&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;Expression&lt;/em&gt;&lt;/strong&gt;— an expression that may cause a change in the result of the &lt;em&gt;Continue Condition&lt;/em&gt;, like incrementing or decrementing a counter or calling next on an Iterator.&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;For example — Summing numbers 1 to 10&lt;/h4&gt;&lt;p&gt;A very simple example of a for loop in Java is summing the numbers from 1 to 10. The following test is an example of this.&lt;/p&gt;&lt;pre&gt;    @Test&lt;br /&gt;    public void sumNumbersFromOneToTen()&lt;br /&gt;    {&lt;br /&gt;        int sum = 0;&lt;br /&gt;        for (&lt;br /&gt;            int i = 1; // Intialization&lt;br /&gt;            i &amp;lt;= 10;   // Continue Condition&lt;br /&gt;            i++)       // Advancement Expression&lt;br /&gt;        {&lt;br /&gt;             sum += i;&lt;br /&gt;        }&lt;br /&gt;        Assertions.assertEquals(55, sum);&lt;br /&gt;    }&lt;/pre&gt;&lt;h4&gt;For example — Summing numbers 10 to 1&lt;/h4&gt;&lt;p&gt;This code could also be written as summing the numbers from 10 to 1. The following test is an example of this.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumNumbersFromTenToOne()&lt;br /&gt;{&lt;br /&gt;    int sum = 0;&lt;br /&gt;    for (&lt;br /&gt;        int i = 10; // Intialization&lt;br /&gt;        i &amp;gt; 0;      // Continue Condition&lt;br /&gt;        i--)        // Advancement Expression&lt;br /&gt;    {&lt;br /&gt;        sum += i;&lt;br /&gt;    }&lt;br /&gt;    Assertions.assertEquals(55, sum);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Inlining the three statements&lt;/h4&gt;&lt;p&gt;I previously broke the three expressions over multiple lines so they are easy to parse and read. Normally, the expressions will all be on the same line, as follows:&lt;/p&gt;&lt;pre&gt;// For loop from 1 to 10 incrementing by 1&lt;br /&gt;for (int i = 1; i &amp;lt;= 10; i++)&lt;br /&gt;&lt;br /&gt;// For loop from 10 to 1 decrementing by 1&lt;br /&gt;for (int i = 10; i &amp;gt; 0; i--)&lt;/pre&gt;&lt;p&gt;The for loop in Java is very versatile. Before the Java language had lambdas, the for loop was the preferred mechanism for iterating over an array or Collection.&lt;/p&gt;&lt;h4&gt;Sum Array of ints —Indexed Access&lt;/h4&gt;&lt;p&gt;The following for loop uses indices for summing up elements of an int array.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumArrayOfIntsUsingIndexedAccess()&lt;br /&gt;{&lt;br /&gt;    int sum = 0;&lt;br /&gt;    int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};&lt;br /&gt;    for (&lt;br /&gt;        int i = 0;         // Intialization&lt;br /&gt;        i &amp;lt; array.length;  // Continue Condition&lt;br /&gt;        i++)               // Advancement Expression&lt;br /&gt;    {&lt;br /&gt;        sum += array[i];&lt;br /&gt;    }&lt;br /&gt;    Assertions.assertEquals(55, sum);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Sum Array of ints — Java 5 for loop&lt;/h4&gt;&lt;p&gt;The following for loop uses the simplified version of the for loop introduced in Java 5 for iterating over each element of a an int array.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumArrayOfIntsUsingForEachLoop()&lt;br /&gt;{&lt;br /&gt;    int sum = 0;&lt;br /&gt;    int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};&lt;br /&gt;    for (int each : array)&lt;br /&gt;    {&lt;br /&gt;        sum += each;&lt;br /&gt;    }&lt;br /&gt;    Assertions.assertEquals(55, sum);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The first part of the for loop includes the type and name of a varaible for each element in the array. In this case, I use int each.The second part, separated by a :, is the array to loop over.&lt;/p&gt;&lt;h4&gt;Sum List of Integers — Indexed Access&lt;/h4&gt;&lt;p&gt;If we have a List of Integer objects, we have a few ways we can write a for loop to calculate the sum. We can loop using indexed access.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumListOfIntegersUsingIndexedAccess()&lt;br /&gt;{&lt;br /&gt;    int sum = 0;&lt;br /&gt;    List&amp;lt;Integer&amp;gt; list = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);&lt;br /&gt;    for (&lt;br /&gt;        int i = 0;       // Intialization&lt;br /&gt;        i &amp;lt; list.size(); // Continue Condition&lt;br /&gt;        i++)             // Advancement Expression&lt;br /&gt;    {&lt;br /&gt;        sum += list.get(i).intValue();&lt;br /&gt;    }&lt;br /&gt;    Assertions.assertEquals(55, sum);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Sum List of Integers — Iterator&lt;/h4&gt;&lt;p&gt;We can loop using an explicit iterator.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumListOfIntegersUsingIterator()&lt;br /&gt;{&lt;br /&gt;    int sum = 0;&lt;br /&gt;    List&amp;lt;Integer&amp;gt; list = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);&lt;br /&gt;    for (&lt;br /&gt;        Iterator&amp;lt;Integer&amp;gt; it = list.iterator(); // Intialization&lt;br /&gt;        it.hasNext();                           // Continue Condition&lt;br /&gt;        // No Advancement Expression&lt;br /&gt;    )&lt;br /&gt;    {&lt;br /&gt;        sum += it.next().intValue(); // Advancement in statement via next()&lt;br /&gt;    }&lt;br /&gt;    Assertions.assertEquals(55, sum);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Sum List of Integers — Java 5 for loop&lt;/h4&gt;&lt;p&gt;We can loop using the enhanced for loop available since Java 5, which is really a shorthand for using the iterator approach above.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumListOfIntegersUsingJava5ForLoop()&lt;br /&gt;{&lt;br /&gt;    int sum = 0;&lt;br /&gt;    List&amp;lt;Integer&amp;gt; list = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);&lt;br /&gt;    for (Integer each : list)&lt;br /&gt;    {&lt;br /&gt;        sum += each.intValue();&lt;br /&gt;    }&lt;br /&gt;    Assertions.assertEquals(55, sum);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;All for one, and for for all&lt;/h4&gt;&lt;p&gt;The versatile nature of a for loop makes it a tough competitor for looping. Oleg Pliss commented on my post of this article in &lt;a href=&quot;https://www.linkedin.com/posts/activity-7152770316321058816-ITKE/&quot;&gt;LinkedIn&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;A few important features of ‘for’ loops are missing in the article: access to the locals outside the loop; ‘continue’ and ‘break’ statements (potentially with a label); and ‘return’ (from the method).&lt;/blockquote&gt;&lt;p&gt;This is some of what I was alluding to by the versatility of the for statement, and Oleg did a masterful job of identifying the functionality I did not cover in a single sentence. Here are links to further tutorials on &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html&quot;&gt;for&lt;/a&gt; and the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/branch.html&quot;&gt;branching statements&lt;/a&gt; I didn’t cover here for those interested in learning more.&lt;/p&gt;&lt;p&gt;In the rest of the blog I will demonstrate how for loops are implemented in Smalltalk, and show how in Java 8 and with Eclipse Collections, Java has advanced towards a more object-oriented and functional model of for loops. I have been working on replacing unnecessary for loops in Java applications for the past 20 years as I explain in the following blog. Usually there is a higher level algorithm like filter, map, or reduce that is implemented imperatively with a for loop. It’s more readable if you can hide the implementation details of a for loop behind a higher level abstraction that explains what you are doing with an intention revealing name. It’s also potentially better for performance for different types to optimize for specific iteration patterns, instead of requiring developers to write different for loops for different types because one is faster with indexed access vs. being faster with an iterator.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://betterprogramming.pub/my-ten-year-quest-for-concise-lambda-expressions-in-java-39fde576b950&quot;&gt;My ten year quest for concise lambda expressions in Java&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;2. OO For Loops in Smalltalk&lt;/h3&gt;&lt;p&gt;The following is a quote from my last blog about Smalltalk and control flow.&lt;/p&gt;&lt;blockquote&gt;Smalltalk is a programming language that models control flow in its class library, instead of the language. There are no if statements, for loops, while statements in Smalltalk. There are instead methods on classes that make control flow possible. Methods are the abstraction that are used to model all control flow, along with code blocks, which are also known as lambdas or closures.&lt;/blockquote&gt;&lt;p&gt;An object-oriented version of a for loop will result in looping behavior distributed across many classes. The behavior of different kinds of for loops are aligned with the object that makes the most sense to be responsible for that behavior.&lt;/p&gt;&lt;p&gt;There are both &lt;em&gt;eager&lt;/em&gt; and &lt;em&gt;lazy&lt;/em&gt; forms of a for loop in an object-oriented model. The statement version of a for loop in Java is always &lt;em&gt;eager&lt;/em&gt;.&lt;/p&gt;&lt;h4&gt;Smalltalk Interval — sum&lt;/h4&gt;&lt;p&gt;I will start by showing how to sum the numbers from 1 to 10 using Smalltalk’s Interval type. Interval is a &lt;em&gt;lazy&lt;/em&gt; for loop. Interval is also a &lt;em&gt;lazy &lt;/em&gt;SequqencedCollection.&lt;/p&gt;&lt;pre&gt;testSumNumbersFromOneToTen&lt;br /&gt; |sum|&lt;br /&gt; &lt;br /&gt; sum := (1 to: 10) sum.&lt;br /&gt; &lt;br /&gt; self assert: sum equals: 55.&lt;/pre&gt;&lt;p&gt;In my two previous “What if…” blogs, I explained that “everything is an object” in Smalltalk. I will explain one step at a time what all the objects are in the code above, and which are receiving the messages that are accomplishing the task at hand.&lt;/p&gt;&lt;p&gt;The first object instance encountered in the code is the literal 1. The object instance represented by the literal 1 is of type SmallInteger. The message to: is sent to the object 1 with the parameter 10, which is also an instance of SmallInteger. If I inspect the result of the code (1 to: 10) in Pharo Smalltalk, the result is an instance of an Interval. The following is a screen capture of the result.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/699/1*mjt98JF-ZoI0CmwRbilpkw.png&quot; /&gt;&lt;figcaption&gt;The Code (1 to: 10) returns an Interval in Smalltalk&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Interval is &lt;em&gt;lazy&lt;/em&gt; because it knows about the range of data (1 to 10 by 1) but has yet to do anything with that data. The Interval class in Smalltalk is designed as follows.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/697/1*XsoeJxpnVuy59sWC2KQH9A.png&quot; /&gt;&lt;figcaption&gt;Interval in the Smalltalk Class Hierarchy&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The decision to make Interval a SequencedCollection brings a lot of convenience. The internal iterator support for Interval is extensive. There are class methods on Interval which allow for construction. The convenient shorthand I used about calling to: on SmallInteger can be searched in the Smalltalk class library quickly to show how the Interval is constructed.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/854/1*vYtX-stsqxCNwmRqiGPINA.png&quot; /&gt;&lt;figcaption&gt;The to: method defined on the Number class which is a parent class for SmallInteger&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The ^ means return in Smalltalk, so the code 1 to: 10 is going to result in Interval from: 1 to: 10 by: 1. An Interval in Smalltalk is &lt;em&gt;inclusive&lt;/em&gt; for both the start and stop.&lt;/p&gt;&lt;p&gt;The final step to understanding how the loop itself is implemented in the sum of the integers from 1 to 10 example is to look at the sum method.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/862/1*wFDoAyyyDy68FEiLCEEqCw.png&quot; /&gt;&lt;figcaption&gt;The implementation of sum on Interval&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;What we discover here is that sum is optimized for Interval. It uses a formula instead of iteration with a loop. This is one of the benefits of having loops represented by objects. They can provide encapsulate and optimized behaviors.&lt;/p&gt;&lt;h4&gt;Smalltalk Interval — do:&lt;/h4&gt;&lt;p&gt;In the interest of demonstrating the actual loop, I will implement an iterative sum by hand in a test.&lt;/p&gt;&lt;pre&gt;testSumNumbersFromOneToTenWithDo&lt;br /&gt; |sum|&lt;br /&gt; &lt;br /&gt; sum := 0.&lt;br /&gt; (1 to: 10) do: [ :each | sum := sum + each ].&lt;br /&gt; &lt;br /&gt; self assert: sum equals: 55.&lt;/pre&gt;&lt;p&gt;I use the do: method here with a Block (lambda) which updates the sum variable with the value of sum plus the value of each SmallInteger. The implementation of do: on Interval looks as follows.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/921/1*ltFcpg3oBEKD12eUV_NgUQ.png&quot; /&gt;&lt;figcaption&gt;The implementation of do: on Interval class in Pharo Smalltalk&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The implementation of do: uses a Block (&lt;em&gt;Condition Continue Block&lt;/em&gt;) with whileTrue: followed by Block (&lt;em&gt;Execution Block&lt;/em&gt;) to perform the looping. The &lt;em&gt;Condition Continue Block&lt;/em&gt; and &lt;em&gt;Execution Block&lt;/em&gt; both require access to the index variable which is scoped outside of the blocks, and the &lt;em&gt;Execution Block&lt;/em&gt; actually increments the index variable. I will not be implementing whileTrue: for educational purposes in Java as it would require using a final int array or AtomicInteger, LongAdder or equivalent for index to be able to be incremented. There is a &lt;a href=&quot;https://twitter.com/zakhav/status/1744147102660264412&quot;&gt;tweet reply&lt;/a&gt; from &lt;a href=&quot;https://medium.com/u/7db07b72520d&quot;&gt;Vladimir Zakharov&lt;/a&gt; that shows how whileTrue could be implemented on a &lt;em&gt;Functional Interface&lt;/em&gt; if someone wanted.&lt;/p&gt;&lt;h4&gt;Smalltalk Interval — inject:into:&lt;/h4&gt;&lt;p&gt;There is another internal iterator that I can use in Smalltalk that will not require updating a local variable for each element in the Interval. That method is named inject:into:, or as I like to call it, the &lt;a href=&quot;https://donraab.medium.com/ec-by-example-injectinto-923a35c3b0cd?source=friends_link&amp;amp;sk=730f9e02a2622fa8fb9cba009b226ede&quot;&gt;&lt;em&gt;Continuum Transfunctioner&lt;/em&gt;&lt;/a&gt;. Here is a sum implemented using inject:into:.&lt;/p&gt;&lt;pre&gt;testSumNumbersFromOneToTenWithInjectInto&lt;br /&gt; |sum|&lt;br /&gt; &lt;br /&gt; sum := (1 to: 10) inject: 0 into: [ :result :each | result + each ].&lt;br /&gt; &lt;br /&gt; self assert: sum equals: 55.&lt;/pre&gt;&lt;p&gt;The way the above inject:into: code works can be explained as follows as each element is visited in the Interval.&lt;/p&gt;&lt;pre&gt;result := 0&lt;br /&gt;result + each = ?&lt;br /&gt;=================&lt;br /&gt;0 + 1 = 1&lt;br /&gt;1 + 2 = 3&lt;br /&gt;3 + 3 = 6&lt;br /&gt;6 + 4 = 10&lt;br /&gt;10 + 5 = 15&lt;br /&gt;15 + 6 = 21&lt;br /&gt;21 + 7 = 28&lt;br /&gt;28 + 8 = 36&lt;br /&gt;36 + 9 = 45&lt;br /&gt;45 + 10 = 55&lt;/pre&gt;&lt;p&gt;The result of each iteration is “injected” into the block for the next iteration as the first parameter. The implementation of inject:into: for the Interval class in Pharo Smalltalk is as follows.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/795/1*Fpy7xY_0sO5Bd5wS4HNNtg.png&quot; /&gt;&lt;figcaption&gt;The implementation of inject:into: on the Collection class in Pharo Smalltalk&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Smalltalk Interval —in reverse order&lt;/h4&gt;&lt;p&gt;In order to reverse an Interval, I will need to add a negative step value using the to:by: method on SmallInteger as follows.&lt;/p&gt;&lt;pre&gt;testSumNumbersFromTenToOne&lt;br /&gt; |sum|&lt;br /&gt; &lt;br /&gt; sum := (10 to: 1 by: -1) sum.&lt;br /&gt; &lt;br /&gt; self assert: sum equals: 55.&lt;/pre&gt;&lt;p&gt;There are also methods named reverseDo: and reversed on Interval which can take forward Interval and walk through it in reverse. The reversed method will wind up creating an array in reverse, which is why I didn’t demonstrate it here.&lt;/p&gt;&lt;h4&gt;Smalltalk Interval — Any Number&lt;/h4&gt;&lt;p&gt;The abstraction of Interval and the benefits of dynamic typing really become evident when you learn about the existence of Fraction in Smalltalk. Take the code 1/3 in Smalltalk. If you execute this code in Java for an int, you will expect a result of 0. The following is the result in Pharo Smalltalk.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/666/1*5zzW64Cb3BO4z4Ho21orhw.png&quot; /&gt;&lt;figcaption&gt;Dividing Small integer 1 by 3 results in a Fraction of 1/3 in Smalltalk&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;If we want to represent a range from 1 to 10 by 1/4, we can achieve this simply by writing the following code.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/731/1*f6jWmv-EZS-k5u89gGyy3A.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Interval will support &lt;em&gt;any&lt;/em&gt; number, so understanding the types of Number that are provided in Smalltalk is helpful. The following class diagram shows the hierarchy for Number in Pharo Smalltalk.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*w4hFhc46YwjDawYCsh9RKQ.png&quot; /&gt;&lt;figcaption&gt;The class hierarchy for Number in Pharo Smalltalk&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Smalltalk Interval — More than just a loop&lt;/h4&gt;&lt;p&gt;The Interval abstraction provides more than just a &lt;em&gt;lazy&lt;/em&gt; for loop. Interval is a &lt;em&gt;lazy&lt;/em&gt; Collection. All of the algorithms available to SequencedCollection are also available to Interval. For example, it’s possible to collect all of the numbers in an Interval as a collection of String.&lt;/p&gt;&lt;pre&gt;testPrintString&lt;br /&gt; |strings expected|&lt;br /&gt;&lt;br /&gt; strings := (1 to: 5) collect: #printString.&lt;br /&gt;&lt;br /&gt; expected := Array with: '1' with: '2' with: '3' with: '4' with: '5'. &lt;br /&gt;&lt;br /&gt; self assert: strings equals: expected.&lt;/pre&gt;&lt;p&gt;The method named collect: is defined on Collection, and can be used to transform from one type to another. Here I am converting SmallInteger to String by applying the method printString to each element of the Interval.&lt;/p&gt;&lt;p&gt;The following code filters the even values of an Interval using the select: method, and then converts the SmallInteger values to their square values and converts them to an array of String.&lt;/p&gt;&lt;pre&gt;testEvensPrintString&lt;br /&gt; |strings expected|&lt;br /&gt;&lt;br /&gt; strings := ((1 to: 10) select: #even) squared collect: #printString.&lt;br /&gt;&lt;br /&gt; expected := Array with: '4' with: '16' with: '36' with: '64' with: '100'. &lt;br /&gt;&lt;br /&gt; self assert: strings equals: expected.&lt;/pre&gt;&lt;h4&gt;Smalltalk — Number meets Collection&lt;/h4&gt;&lt;p&gt;Looping with a range of values in Interval is useful but somewhat limited. Looping over a collection of arbitrary values is more useful. There are many methods available on the Collection class that provide internal iterators. I am going to show what some of these methods do, and then explain how they do them. The how is where an eager loop provided by the Number class in a method named to:do: arrives.&lt;/p&gt;&lt;p&gt;The following is the method for do: in OrderedCollection, which is one of the most commonly uses collection types in Smalltalk. OrderedCollection in Smalltalk is the equivalent of ArrayList in Java.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/539/1*bi9kM_kSfG-Ws3KqdtGMVA.png&quot; /&gt;&lt;figcaption&gt;The method do: on OrderedCollections calls to:do: on Number&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The method do: is the equivalent of forEach defined on Iterable in Java. In this code, the first part, firstIndex to: lastIndex do: calls the to:do: method on Number. The code for to:do: looks as follows.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/813/1*Xst0Sez8EYNBd0X_SDEr_g.png&quot; /&gt;&lt;figcaption&gt;The method to:do: on the Number class&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;This code uses a Block whileTrue: method to execute another Block the number of times covered by the range from self to stop. If we go back to look at the do: method in Interval, it looks somewhat similar, but requires a bit more math due to Interval having a start, stop and step value.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/869/1*7fCZ94w8xzQuc9EiVav01A.png&quot; /&gt;&lt;figcaption&gt;Again, the method do: on the Interval class&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The following code looks very similar, but winds up taking two different paths. One goes through Number to:do:, and the other goes through Interval do:. See if you can figure out which is which.&lt;/p&gt;&lt;pre&gt;1 to: 10 do: [:each | Transcript show: each].&lt;br /&gt;(1 to: 10) do: [:each | Transcript show: each].&lt;/pre&gt;&lt;p&gt;The code Transcript show: is the equivalent of System.out.print() in Java. If you guessed the first line uses Number to:do: and the second uses Interval do:, then you are correct, and I am finished with the Smalltalk part of the Interval, Number, and Collection looping.&lt;/p&gt;&lt;h3&gt;3. OO For Loops in Java&lt;/h3&gt;&lt;p&gt;Since Java 8, we have IntStream and LongStream, both which can represent &lt;em&gt;lazy&lt;/em&gt; for loops over a range of int or long values.&lt;/p&gt;&lt;h4&gt;Java IntStream — range sum&lt;/h4&gt;&lt;p&gt;The method range on IntStream is &lt;em&gt;inclusive&lt;/em&gt; on the from and &lt;em&gt;exclusive&lt;/em&gt; on the to.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumIntStreamRangeOneToElevenExclusive()&lt;br /&gt;{&lt;br /&gt;    int sum = IntStream.range(1, 11).sum();&lt;br /&gt;    Assertions.assertEquals(55, sum);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Java IntStream — rangeClosed sum&lt;/h4&gt;&lt;p&gt;The method rangeClosed on IntStream is &lt;em&gt;inclusive&lt;/em&gt; on both the from and the to.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumIntStreamRangeClosedOneToTenInclusive()&lt;br /&gt;{&lt;br /&gt;    int sum = IntStream.rangeClosed(1, 10).sum();&lt;br /&gt;    Assertions.assertEquals(55, sum);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Both calls to sum on IntStream have a potential silent overflow issue to be aware of. It would have been better if IntStream sum returned a long value. So long as your sum result is less than Integer.MAX_VALUE you will be ok. If it is greater than Integer.MAX_VALUE, the int value sum could wind up negative or some other unexpected positive value.&lt;/p&gt;&lt;h4&gt;Java IntStream — forEach sum&lt;/h4&gt;&lt;p&gt;IntStream is &lt;em&gt;lazy&lt;/em&gt;, so you have to call a terminal method like sum or forEach to force iteration to happen. If we want to calculate a sum by hand, we can use the forEach method. With this version of sum, we can widen the result ourselves to long by using LongAdder.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumIntStreamRangeClosedForEach()&lt;br /&gt;{&lt;br /&gt;    LongAdder sum = new LongAdder();&lt;br /&gt;    IntStream.rangeClosed(1, 10).forEach(sum::add);&lt;br /&gt;    Assertions.assertEquals(55, sum.intValue());&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;I use the LongAdder class to create an instance of an object that will be &lt;em&gt;effectively final&lt;/em&gt; and can be used as a method reference in the forEach. LongAdder internally keeps a long value. To illustrate how LongAdder handles larger numbers and avoids int overflow, where sum does not, I will create a small range in the billions.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumIntStreamRangeClosedInBillions()&lt;br /&gt;{&lt;br /&gt;    LongAdder sum = new LongAdder();&lt;br /&gt;    IntStream.rangeClosed(2_000_000_000, 2_000_000_001).forEach(sum::add);&lt;br /&gt;    Assertions.assertEquals(4_000_000_001L, sum.longValue());&lt;br /&gt;&lt;br /&gt;    // Overflow happened silently here with IntStream.sum&lt;br /&gt;    int intSum = IntStream.rangeClosed(2_000_000_000, 2_000_000_001).sum();&lt;br /&gt;    Assertions.assertEquals(-294_967_295, intSum);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Java LongStream — sum&lt;/h4&gt;&lt;p&gt;Another alternative to IntStream.sum that is almost always safe from overflow is LongStream.sum. The following is an example of sum on LongStream.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumLongStreamRangeClosedOneToTenInclusive()&lt;br /&gt;{&lt;br /&gt;    long sum = LongStream.rangeClosed(1L, 10L).sum();&lt;br /&gt;    Assertions.assertEquals(55L, sum);&lt;br /&gt;&lt;br /&gt;    long bigSum = LongStream.rangeClosed(2_000_000_001L, 2_000_000_010L).sum();&lt;br /&gt;    Assertions.assertEquals(20_000_000_055L, bigSum);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Java IntStream — toList&lt;/h4&gt;&lt;p&gt;If we want the elements of an IntStream to be represented in a List, we have to use the IntStream API to box the stream and convert it to a List&amp;lt;Integer&amp;gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void filterIntStreamRangeClosedEvensToList()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; list = IntStream.rangeClosed(1, 10)&lt;br /&gt;            .filter(i -&amp;gt; i % 2 == 0)&lt;br /&gt;            .boxed()&lt;br /&gt;            .toList();&lt;br /&gt;&lt;br /&gt;    List&amp;lt;Integer&amp;gt; expected = List.of(2, 4, 6, 8, 10);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(expected, list);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Java Iterable — forEach&lt;/h4&gt;&lt;p&gt;In Java 8, we got support for concise lambda expressions and the Java Stream API. We also got a forEach method on the Iterable interface, which allows all Collection types in Java to provide internal iterators that are optimized for each type.&lt;/p&gt;&lt;p&gt;The following code can be used to sum the List&amp;lt;Integer&amp;gt; of &lt;em&gt;even&lt;/em&gt; numbers from 1 to 10 that I created above.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumListOfEvensUsingForEach()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; list = List.of(2, 4, 6, 8, 10);&lt;br /&gt;    LongAdder sum = new LongAdder();&lt;br /&gt;    list.forEach(sum::add);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(30L, sum.longValue());&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;4. OO For Loops in Eclipse Collections&lt;/h3&gt;&lt;p&gt;One of the first custom Collection types I created in Eclipse Collections was the Interval class. I though it would be very useful to have a List&amp;lt;Integer&amp;gt; that you could create simply by specifying a range. I also thought it would be useful to have a full complement of rich internal iterators on Interval, so I had it also implement LazyIterable&amp;lt;Integer&amp;gt;. We have used Interval extensively in unit tests in Eclipse Collections. It is often the fastest way to create a List, Set, Bag, Stack or any other type where having some Collection of Integer is all we need. The following image shows the number of usages on Interval in the Eclipse Collections project.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/940/1*2LPVc3qsc7RobOeNXetMgQ.png&quot; /&gt;&lt;figcaption&gt;Interval usages in Eclipse Collections Project&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;There are ~1,900 usages in the tests module alone. The Interval class has proven itself very useful in Eclipse Collections unit tests.&lt;/p&gt;&lt;h4&gt;Eclipse Collections Interval — sum&lt;/h4&gt;&lt;p&gt;The following code will create an Interval from 1 to 10 and return a sum using sumOfInt. The method sumOfInt knows to widen the sum to a long.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumIntervalOneToTen()&lt;br /&gt;{&lt;br /&gt;    long sum = Interval.oneTo(10).sumOfInt(Integer::intValue);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(55L, sum);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Eclipse Collections Interval — sum evens&lt;/h4&gt;&lt;p&gt;The following code will include only the &lt;em&gt;even&lt;/em&gt; numbers from 1 to 10 and sum them.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumIntervalEvensOneToTen()&lt;br /&gt;{&lt;br /&gt;    long sum = Interval.evensFromTo(1, 10).sumOfInt(Integer::intValue);&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(30L, sum);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Eclipse Collections Interval — as a List and as a LazyIterable&lt;/h4&gt;&lt;p&gt;There are three possible types that Interval can be used as — Interval, List, LazyIterable.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void intervalIsListAndLazyIterable()&lt;br /&gt;{&lt;br /&gt;    Interval interval = Interval.oneTo(5);&lt;br /&gt;    List&amp;lt;Integer&amp;gt; list = interval;&lt;br /&gt;    LazyIterable&amp;lt;Integer&amp;gt; lazyIterable = interval;&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(List.of(1, 2, 3, 4, 5), list);&lt;br /&gt;    Assertions.assertEquals(Set.of(1, 2, 3, 4, 5), interval.toSet());&lt;br /&gt;    Assertions.assertEquals(&lt;br /&gt;            Interval.oneTo(10),&lt;br /&gt;            lazyIterable.concatenate(Interval.fromTo(6, 10)).toList());&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The following diagram shows the design of the Interval class in Eclipse Collections.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/914/1*hKzsPIpNY54bnyKBCFxxTg.png&quot; /&gt;&lt;figcaption&gt;Class diagram for Interval class in Eclipse Collections&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Eclipse Collections IntInterval — sum&lt;/h4&gt;&lt;p&gt;Interval has proved itself extremely useful for quickly creating List&amp;lt;Integer&amp;gt; instances, especially in test code. For production use cases, where memory and performance matter, IntInterval may be a better alternative. IntInterval is an ImmutableIntList. The internal iterators on IntInterval are not lazy by default like Interval, but IntInterval does support lazy iteration via an explicit call to asLazy.&lt;/p&gt;&lt;p&gt;The following code shows how to calculate a sum using IntInterval using both &lt;em&gt;eager&lt;/em&gt; and &lt;em&gt;lazy &lt;/em&gt;approaches.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumIntIntervalOneToTen()&lt;br /&gt;{&lt;br /&gt;    IntInterval intInterval = IntInterval.oneTo(10);&lt;br /&gt;&lt;br /&gt;    long eagerSum = intInterval.sum();&lt;br /&gt;&lt;br /&gt;    LazyIntIterable lazy = intInterval.asLazy();&lt;br /&gt;    long lazySum = lazy.sum();&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(55L, eagerSum);&lt;br /&gt;    Assertions.assertEquals(55L, lazySum);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;I reuse the instance of IntInterval to create the LazyIntIterable, after already calculating the &lt;em&gt;eager&lt;/em&gt; sum. I did this to illustrate that an IntInterval can be reused, unlike an IntStream from Java, which may only be used once.&lt;/p&gt;&lt;h4&gt;Eclipse Collections IntInterval — usage&lt;/h4&gt;&lt;p&gt;The usage of IntInterval in Eclipse Collections is more modest than Interval, but still quite good.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/937/1*zmpYhoXYT-ULXztnf0-neA.png&quot; /&gt;&lt;figcaption&gt;Usages of IntInterval in Eclipse Collections&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Eclipse Collections LongInterval — sum&lt;/h4&gt;&lt;p&gt;Eclipse Collections provides primitive Interval support for both int and long. The long support is provided by LongInterval.&lt;/p&gt;&lt;p&gt;The following code shows how to calculate a sum using LongInterval using both &lt;em&gt;eager&lt;/em&gt; and &lt;em&gt;lazy &lt;/em&gt;approaches.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void sumLongIntervalBillionOneToBillionTen()&lt;br /&gt;{&lt;br /&gt;    LongInterval longInterval =&lt;br /&gt;            LongInterval.fromTo(1_000_000_001L, 1_000_000_010L);&lt;br /&gt;&lt;br /&gt;    long eagerSum = longInterval.sum();&lt;br /&gt;&lt;br /&gt;    LazyLongIterable lazy = longInterval.asLazy();&lt;br /&gt;    long lazySum = lazy.sum();&lt;br /&gt;&lt;br /&gt;    Assertions.assertEquals(10_000_000_055L, eagerSum);&lt;br /&gt;    Assertions.assertEquals(10_000_000_055L, lazySum);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;I reuse the instance of LongInterval to create the LazyLongIterable, after already calculating the &lt;em&gt;eager&lt;/em&gt; sum. I did this to illustrate that a LongInterval can be reused, unlike a LongStream from Java, which may only be used once.&lt;/p&gt;&lt;h4&gt;Eclipse Collections LongInterval — usage&lt;/h4&gt;&lt;p&gt;The usage of LongInterval in Eclipse Collections is more modest than both Interval and IntInterval.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/939/1*tfRet3_zGX0w1CIH2Fyl_Q.png&quot; /&gt;&lt;figcaption&gt;Usages of LongInterval in Eclipse Collections&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Eclipse Collections IntInterval and LongInterval Class Hierarchy&lt;/h4&gt;&lt;p&gt;I have included both hierarchies for IntInterval and LongInterval in this diagram to show that they do ultimately share a root parent interface named PrimitiveIterable. The following is the UML class hierarchy for both IntInterval and LongInterval.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*G_GyK1ZJruFyden8r9SwAQ.png&quot; /&gt;&lt;figcaption&gt;Class hierarchies for IntInterval and LongInterval in Eclipse Collections&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;There was an evolution in design approach from Interval to IntInterval and LongInterval. Interval was one of the earliest containers in Eclipse Collections, and was created before immutable and primitive types were added to the framework. Interval is heavily used already so it is too late to revisit its design as it would cause too much pain to convert it to an ImmutableList&amp;lt;Integer&amp;gt; just for consistency sake. This ship has sailed, and this is now just a historical implementation decision. There are things I continue to like about both design approaches.&lt;/p&gt;&lt;h3&gt;Final Thoughts&lt;/h3&gt;&lt;p&gt;I hope this blog helped you learn about different approaches and levels of abstraction for looping in an object-oriented language. I believe it is useful to have both language and library constructs available in Java to enhance the productivity of developers when it comes to looping.&lt;/p&gt;&lt;p&gt;Smalltalk takes a novel approach to implementing control flow that I found extremely insightful when I first learned about it in 1994. I hope the Smalltalk examples and explanations helped you learn something insightful about this venerable programming language. I believe there is still so much we can learn from the past in programming languages, and only by learning this storied past can we hope to create a better future for programmers.&lt;/p&gt;&lt;p&gt;I intentionally did not explain either &lt;em&gt;eager parallel&lt;/em&gt; or &lt;em&gt;lazy parallel&lt;/em&gt; looping in this blog. This can be a natural progression once you have understood how &lt;em&gt;eager serial&lt;/em&gt; and &lt;em&gt;lazy serial&lt;/em&gt; looping works using lambdas. The inclusion of lambdas in Java 8 has opened up many new possibilities for productivity enhancements for Java developers. I expect that we will continue to see improvements in the language and libraries of Java further leveraging this critical feature.&lt;/p&gt;&lt;p&gt;Thank you for reading!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=85302ab7e484&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 17 Jan 2024 03:10:46 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: The Choice of an IDE and Tool Platform: Eclipse Theia vs. Code OSS</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/01/15/eclipse-theia-vs-code-oss/</guid>
	<link>https://eclipsesource.com/blogs/2024/01/15/eclipse-theia-vs-code-oss/</link>
	<description>&lt;p&gt;Building custom tools and IDEs are strategic and long term investments. Choosing the right platform for building custom tools and IDEs is a critical decision for stakeholders.
To aid in this crucial â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/01/15/eclipse-theia-vs-code-oss/&quot; rel=&quot;nofollow&quot;&gt; The Choice of an IDE and Tool Platform: Eclipse Theia vs. Code OSS&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Collaborative Specification Development</title>
	<guid isPermaLink="true">http://blog.waynebeaton.ca/posts/efsp/collaborative-specification-development/</guid>
	<link>http://blog.waynebeaton.ca/posts/efsp/collaborative-specification-development/</link>
	<description>Originally posted in the the February 2019 Eclipse Foundation Newsletter.
The Eclipse Foundation Specification Process (EFSP), which extends the Eclipse Foundation Development Process (EDP), defines a blueprint for collaborating on specification development in open source.
Committers are the ones who tend to develop most of the content. Committers have the ability to push their own contributions into their projectâ€™s source code repositories and decide whether or not to accept contributions from others.</description>
	<pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: What if Java had no if?</title>
	<guid isPermaLink="false">https://medium.com/p/ea88d90b76c3</guid>
	<link>https://donraab.medium.com/what-if-java-had-no-if-ea88d90b76c3?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;What would you do?&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*VCH2KffHssN2KYB6&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@jontyson?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Jon Tyson&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Where art thou Control Flow?&lt;/h3&gt;&lt;p&gt;Programming in Java would be pretty hard in Java if we didn’t have if statements, for loops, while statements. These are convenient language artifacts that help us determine if, how, and when the code in our programs execute. This is the essence of control flow in a program. All programming languages have mechanisms that enable control flow to occur. Most programming languages provide control flow mechanisms in the language itself, via built-in statements.&lt;/p&gt;&lt;p&gt;The following code shows some basic control flow statements in Java.&lt;/p&gt;&lt;pre&gt;public static void main(String[] args)&lt;br /&gt;{&lt;br /&gt;    if (args.length &amp;gt; 1)&lt;br /&gt;    {&lt;br /&gt;        int i = Integer.parseInt(args[1]);&lt;br /&gt;        for (int j = 0; j &amp;lt; i; j++)&lt;br /&gt;        {&lt;br /&gt;            System.out.println(args[0]);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    else if (args.length &amp;gt; 0)&lt;br /&gt;    {&lt;br /&gt;        System.out.println(args[0]);&lt;br /&gt;    }&lt;br /&gt;    else&lt;br /&gt;    {&lt;br /&gt;        System.out.println(&quot;Hello World!&quot;);&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;This code checks the args String array length to see if zero, one, or two arguments are supplied to the program. If zero arguments are passed, the program outputs “Hello World!”. If one argument is passed, the program outputs the argument which is arg[0]. If two arguments are passed, the program outputs the first argument (arg[0]) the number of times specified in the second argument (arg[1]). There is no safety check in this code to make sure the second parameter is actually a number.&lt;/p&gt;&lt;blockquote&gt;What would you do if you didn’t have an if statement in Java?&lt;/blockquote&gt;&lt;h3&gt;Modeling Control Flow with Objects and Methods&lt;/h3&gt;&lt;p&gt;Smalltalk is a programming language that models control flow in its class library, instead of the language. There are no if statements, for loops, while statements in Smalltalk. There are instead methods on classes that make control flow possible. Methods are the abstraction that are used to model all control flow, along with code blocks, which are also known as lambdas or closures. When I was first learning Smalltalk, I had to learn where these control flow methods were and how to use them with lambdas. I believe this enabled me to become familiar with lambdas very quickly, as I had to use them everywhere I needed control structures in my Smalltalk programs.&lt;/p&gt;&lt;p&gt;The place I first learned to look for control structures in Smalltalk was the class hierarchy for Boolean. The following is a UML class diagram showing how the Boolean type is modeled in Smalltalk.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/601/1*v9w6rwYTWDt6ASNvulLMtw.png&quot; /&gt;&lt;figcaption&gt;The class hierarchy for Boolean in Smalltalk and literal instances of true and false&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The Boolean class in Smalltalk defines methods and:, or:, ifTrue:, ifFalse:, ifTrue:ifFalse:, and ifFalse:ifTrue. Each of these methods take one or two Block parameters. A Block in Smalltalk is a type that can be represented with a literal lambda syntax. The basic syntax for a Block is square brackets with a pipe that separates parameters on the left, with expression on the right. If there are zero parameters in the Block, there will be no pipe. The following are examples of literal blocks, also known as lambdas or closures.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;[] — An empty Block which returns nil when evaluated.&lt;/li&gt;&lt;li&gt;[true] — Zero argument Block which returns true when evaluated&lt;/li&gt;&lt;li&gt;[:a | a] — One argument Block which returns a when evaluated&lt;/li&gt;&lt;li&gt;[:a :b | a + b] — Two argument Block which returns a + b&lt;/li&gt;&lt;li&gt;[:a :b :c | a + b + c] — Three argument Block which returns a + b + c when evaluated.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Evaluating Conditionals in Smalltalk&lt;/h3&gt;&lt;p&gt;Without an if statement in Smalltalk, you learn to use the instances (true and false) of the two subclasses of Boolean (True and False) with lambdas (via Block) to perform conditional logic.&lt;/p&gt;&lt;p&gt;The following tests in Smalltalk show how conditional logic can be accomplished using the methods on the True and False classes that I documented in the diagram above.&lt;/p&gt;&lt;p&gt;Here is a test demonstrating various results for True.&lt;/p&gt;&lt;pre&gt;testTrue&lt;br /&gt;&lt;br /&gt; self assert: (true and: [ true ]).&lt;br /&gt; self assert: (true or: [ true ]).&lt;br /&gt;&lt;br /&gt; self deny: (true and: [ false ]).&lt;br /&gt; self assert: (true or: [ false ]).&lt;br /&gt;&lt;br /&gt; self assert: (true ifTrue: [ true ]).&lt;br /&gt; self assert: (true ifTrue: [ true ] ifFalse: [ false ]).&lt;br /&gt; self deny: (true ifFalse: [ true ] ifTrue: [ false ]).&lt;br /&gt;&lt;br /&gt; self assert: (6 &amp;gt; 5 ifTrue: [ true ]).&lt;br /&gt; self assert: (4 &amp;gt; 5 ifTrue: [ true ]) equals: nil.&lt;/pre&gt;&lt;p&gt;Here is a test demonstrating various results for False.&lt;/p&gt;&lt;pre&gt;testFalse&lt;br /&gt;&lt;br /&gt; self deny: (false and: [ true ]).&lt;br /&gt; self assert: (false or: [ true ]).&lt;br /&gt;&lt;br /&gt; self deny: (false and: [ false ]).&lt;br /&gt; self deny: (false or: [ false ]).&lt;br /&gt;&lt;br /&gt; self assert: (false ifFalse: [ true ]).&lt;br /&gt; self assert: (false ifTrue: [ false ] ifFalse: [ true ]).&lt;br /&gt; self deny: (false ifFalse: [ false ] ifTrue: [ true ]).&lt;br /&gt;&lt;br /&gt; self assert: (6 &amp;gt; 5 ifFalse: [ true ]) equals: nil.&lt;br /&gt; self assert: (4 &amp;gt; 5 ifFalse: [ true ]).&lt;/pre&gt;&lt;h3&gt;Passive vs. Active Boolean Class&lt;/h3&gt;&lt;p&gt;Java has both a primitive and Object form of boolean. The primitive version is named boolean. The object version is named Boolean. The Boolean class acts as a wrapper for the primitive boolean type in Java so that the primitive values can be used in generic collections like List, Set, and Map. The Boolean class only defines six instance methods as of Java 21. The methods are toString, hashCode, equals, compareTo, describeConstable, and booleanValue. This class contains no active methods that do anything. Most of the methods return a different type representation of the booleanValue contained in the wrapper. The current Boolean class in Java is what I would refer to as a passive class. It is merely an object data holder for primitive boolean.&lt;/p&gt;&lt;p&gt;It is possible to make Boolean an active class in Java. As an experiment I defined a new Boolean sealed interface and defined True and False implementations.&lt;/p&gt;&lt;pre&gt;public sealed interface Boolean permits Boolean.True, Boolean.False&lt;br /&gt;{&lt;br /&gt;    Boolean TRUE = new True();&lt;br /&gt;    Boolean FALSE = new False();&lt;br /&gt;&lt;br /&gt;    static Boolean valueOf(boolean value)&lt;br /&gt;    {&lt;br /&gt;        return value ? TRUE : FALSE;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    default Boolean and(Supplier&amp;lt;Boolean&amp;gt; block)&lt;br /&gt;    {&lt;br /&gt;        return null;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    default Boolean or(Supplier&amp;lt;Boolean&amp;gt; block)&lt;br /&gt;    {&lt;br /&gt;        return null;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    default &amp;lt;R&amp;gt; R ifTrue(Supplier&amp;lt;R&amp;gt; trueBlock)&lt;br /&gt;    {&lt;br /&gt;        return null;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    default &amp;lt;R&amp;gt; R ifFalse(Supplier&amp;lt;R&amp;gt; falseBlock)&lt;br /&gt;    {&lt;br /&gt;        return null;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    default &amp;lt;R&amp;gt; R ifTrueIfFalse(&lt;br /&gt;            Supplier&amp;lt;R&amp;gt; trueBlock, &lt;br /&gt;            Supplier&amp;lt;R&amp;gt; falseBlock)&lt;br /&gt;    {&lt;br /&gt;        return null;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    default &amp;lt;R&amp;gt; R ifFalseIfTrue(&lt;br /&gt;            Supplier&amp;lt;R&amp;gt; falseBlock, &lt;br /&gt;            Supplier&amp;lt;R&amp;gt; trueBlock)&lt;br /&gt;    {&lt;br /&gt;        return null;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    final class True implements Boolean {}&lt;br /&gt;&lt;br /&gt;    final class False implements Boolean {}&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;I had to provide a static method to convert a primitive boolean to the Boolean interface for this to work. I will leave it to your imagination how I overrode the default implementations of the parent Boolean interface in the True and False classes.&lt;/p&gt;&lt;p&gt;When I had completed the implementation, I rewrote the Control Flow Java example in the first section of this blog using the new Boolean interface. This is what the code looks like with Supplier and Boolean instances in variables to provide clarity.&lt;/p&gt;&lt;pre&gt;public static void main(final String[] args)&lt;br /&gt;{&lt;br /&gt;    Supplier&amp;lt;Object&amp;gt; moreThanOneSupplier = () -&amp;gt;&lt;br /&gt;    {&lt;br /&gt;        IntInterval.oneTo(Integer.parseInt(args[1]))&lt;br /&gt;                .forEach(j -&amp;gt; System.out.println(args[0]));&lt;br /&gt;        return null;&lt;br /&gt;    };&lt;br /&gt;&lt;br /&gt;    Supplier&amp;lt;Object&amp;gt; moreThanZeroSupplier = () -&amp;gt;&lt;br /&gt;    {&lt;br /&gt;        System.out.println(args[0]);&lt;br /&gt;        return null;&lt;br /&gt;    };&lt;br /&gt;&lt;br /&gt;    Supplier&amp;lt;Object&amp;gt; noArgumentSupplier = () -&amp;gt;&lt;br /&gt;    {&lt;br /&gt;        System.out.println(&quot;Hello World!&quot;);&lt;br /&gt;        return null;&lt;br /&gt;    };&lt;br /&gt;&lt;br /&gt;    Boolean argsGreaterThanOne = Boolean.valueOf(args.length &amp;gt; 1);&lt;br /&gt;    Boolean argsGreaterThanZero = Boolean.valueOf(args.length &amp;gt; 0);&lt;br /&gt;&lt;br /&gt;    argsGreaterThanOne.ifTrueIfFalse(&lt;br /&gt;            moreThanOneSupplier,&lt;br /&gt;            () -&amp;gt; argsGreaterThanZero.ifTrueIfFalse(&lt;br /&gt;                    moreThanZeroSupplier, &lt;br /&gt;                    noArgumentSupplier));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;In the active Boolean version of the the code, I use an IntInterval from Eclipse Collections to represent an OO version of the for loop. The active Boolean version of the code is composable and easier to move logic around with everything clearly compartmentalized. If I inline the Supplier instances, the code looks as follows.&lt;/p&gt;&lt;pre&gt;public static void main(final String[] args)&lt;br /&gt;{&lt;br /&gt;&lt;br /&gt;    Boolean argsGreaterThanOne = Boolean.valueOf(args.length &amp;gt; 1);&lt;br /&gt;    Boolean argsGreaterThanZero = Boolean.valueOf(args.length &amp;gt; 0);&lt;br /&gt;&lt;br /&gt;    argsGreaterThanOne.ifTrueIfFalse(&lt;br /&gt;            () -&amp;gt;&lt;br /&gt;            {&lt;br /&gt;                IntInterval.oneTo(Integer.parseInt(args[1]))&lt;br /&gt;                        .forEach(j -&amp;gt; System.out.println(args[0]));&lt;br /&gt;                return null;&lt;br /&gt;            },&lt;br /&gt;            () -&amp;gt; argsGreaterThanZero.ifTrueIfFalse(&lt;br /&gt;                    () -&amp;gt;&lt;br /&gt;                    {&lt;br /&gt;                        System.out.println(args[0]);&lt;br /&gt;                        return null;&lt;br /&gt;                    },&lt;br /&gt;                    () -&amp;gt;&lt;br /&gt;                    {&lt;br /&gt;                        System.out.println(&quot;Hello World!&quot;);&lt;br /&gt;                        return null;&lt;br /&gt;                    }));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;For less scrolling and easier comparison, this was the original Java code from above with if statements and the for loop.&lt;/p&gt;&lt;pre&gt;public static void main(String[] args)&lt;br /&gt;{&lt;br /&gt;    if (args.length &amp;gt; 1)&lt;br /&gt;    {&lt;br /&gt;        int i = Integer.parseInt(args[1]);&lt;br /&gt;        for (int j = 0; j &amp;lt; i; j++)&lt;br /&gt;        {&lt;br /&gt;            System.out.println(args[0]);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    else if (args.length &amp;gt; 0)&lt;br /&gt;    {&lt;br /&gt;        System.out.println(args[0]);&lt;br /&gt;    }&lt;br /&gt;    else&lt;br /&gt;    {&lt;br /&gt;        System.out.println(&quot;Hello World!&quot;);&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The code in the primitive boolean example with if statements is less verbose, but would require more copying and pasting to move logic around.&lt;/p&gt;&lt;p&gt;The verbosity using the active Boolean interface is caused partially because I chose to use Supplier, which more closely models how Smalltalk uses its Block with Boolean. Smalltalk Boolean methods with Block allow for Boolean expressions to be formed as results from methods. If I don’t care about returning a value from a Boolean expression, I could model the methods using Runnable.&lt;/p&gt;&lt;p&gt;The following code shows how code would look if I used Runnable instead.&lt;/p&gt;&lt;pre&gt;public static void main(final String[] args)&lt;br /&gt;{&lt;br /&gt;&lt;br /&gt;    Boolean argsGreaterThanOne = Boolean.valueOf(args.length &amp;gt; 1);&lt;br /&gt;    Boolean argsGreaterThanZero = Boolean.valueOf(args.length &amp;gt; 0);&lt;br /&gt;&lt;br /&gt;    argsGreaterThanOne.ifTrueIfFalse(&lt;br /&gt;            () -&amp;gt; IntInterval.oneTo(Integer.parseInt(args[1]))&lt;br /&gt;                    .forEach(j -&amp;gt; System.out.println(args[0])),&lt;br /&gt;            () -&amp;gt; argsGreaterThanZero.ifTrueIfFalse(&lt;br /&gt;                    () -&amp;gt; System.out.println(args[0]),&lt;br /&gt;                    () -&amp;gt; System.out.println(&quot;Hello World!&quot;)));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The curly braces all disappear because each branch of the if statement can be covered by a single line of code. Lambdas in Java allow me to remove the curly braces for single line lambda expressions. This removes a bunch of unnecessary lines of code, at the cost of some potential readability due to text compression and loss of natural whitespace.&lt;/p&gt;&lt;p&gt;If I extract the Runnable instances into their own variables, the code will look as follows.&lt;/p&gt;&lt;pre&gt;public static void main(final String[] args)&lt;br /&gt;{&lt;br /&gt;    Boolean argsGreaterThanOne = Boolean.valueOf(args.length &amp;gt; 1);&lt;br /&gt;    Boolean argsGreaterThanZero = Boolean.valueOf(args.length &amp;gt; 0);&lt;br /&gt;&lt;br /&gt;    Runnable moreThanOneRunnable = () -&amp;gt; &lt;br /&gt;            IntInterval.oneTo(Integer.parseInt(args[1]))&lt;br /&gt;                .forEach(j -&amp;gt; System.out.println(args[0]));&lt;br /&gt;&lt;br /&gt;    Runnable moreThanZeroRunnable = () -&amp;gt; System.out.println(args[0]);&lt;br /&gt;&lt;br /&gt;    Runnable noArgumentRunnable = () -&amp;gt; System.out.println(&quot;Hello World!&quot;);&lt;br /&gt;&lt;br /&gt;    argsGreaterThanOne.ifTrueIfFalse(&lt;br /&gt;            moreThanOneRunnable,&lt;br /&gt;            () -&amp;gt; argsGreaterThanZero.ifTrueIfFalse(&lt;br /&gt;                    moreThanZeroRunnable,&lt;br /&gt;                    noArgumentRunnable));&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Final thoughts&lt;/h3&gt;&lt;p&gt;This blog was intended to explain in simple terms the differences between true and false in Java, and true and false in Smalltalk. Java uses statements provided by the language for user management of program control flow. Smalltalk uses Objects, Methods and Lambdas to accomplish the same. Both approaches have pros and cons. Composability and verbosity are sometimes at odds with each other. If we extract methods in the branches of logic, we can achieve better composability and less verbosity with both approaches.&lt;/p&gt;&lt;p&gt;The active Boolean approach I demonstrated and described here could be added to the Boolean class in Java to make it an active Boolean object. This would enable the Boolean class to manage control flow through methods. The benefit of this approach would be to enable more complex if expressions which may be hard to emulate and make readable with the current Java mechanism of ternary expressions.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: One downside that makes the active Boolean object approach impractical in Java is if you need access to any local variables outside of the lambdas used in the conditionals. This would require messy tricks using final arrays to potentially allow for updates to local variables outside of the lambda scopes. The if statement approach has access to any variables defined outside of its conditional scopes. Another downside is that Java lambdas do not have support for non-local returns, which would limit returning out of the method from the conditionals. Thanks to Oleg Pliss for pointing out these important difference between Java Lambdas and Smalltalk blocks on &lt;a href=&quot;https://www.linkedin.com/posts/activity-7149869989288636416-wLvz/&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Learning multiple languages that use different strategies to address the same problems is useful. Learning a whole new language takes time. My hope is that this bitesize comparison of basic control flow in Java and Smalltalk is useful for you to be able to understand the pros and cons different approaches.&lt;/p&gt;&lt;p&gt;Thanks for reading!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=ea88d90b76c3&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 08 Jan 2024 02:34:37 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: The Eclipse Theia Project Update 2023</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2024/01/08/theia-project-update-2023/</guid>
	<link>https://eclipsesource.com/blogs/2024/01/08/theia-project-update-2023/</link>
	<description>&lt;p&gt;2023 has been an extraordinary year for the Eclipse Theia project, marked by significant community advancements and key feature enhancements such as the improved startup performance, the introduction â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2024/01/08/theia-project-update-2023/&quot; rel=&quot;nofollow&quot;&gt; The Eclipse Theia Project Update 2023&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: What if null was an Object in Java?</title>
	<guid isPermaLink="false">https://medium.com/p/3f1974954be2</guid>
	<link>https://donraab.medium.com/what-if-null-was-an-object-in-java-3f1974954be2?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Brace yourself and get ready to try the red pill.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*9g0ruViNF2_mcdeD&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@brett_jordan?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Brett Jordan&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;Object-oriented purity&lt;/h3&gt;&lt;p&gt;Smalltalk is often referred to as a pure object-oriented programming language. Smalltalk was created by Alan Kay, who was also the person who coined the term “object-oriented.&quot; Part of the pure object-oriented nature of Smalltalk is that “everything is an object” in Smalltalk. Because everything is an object, you accomplish programming tasks by sending messages to objects.&lt;/p&gt;&lt;p&gt;Java is also object-oriented, but is not a pure object-oriented programming language. Java has things in it that are not objects (e.g. primitives), that require special mechanisms for handling them. Java also has a special case for handling null.&lt;/p&gt;&lt;p&gt;In this blog, I will demonstrate and explain how Java and Smalltalk deal with &lt;em&gt;absent&lt;/em&gt; values, referred to as null in Java, and nil in Smalltalk. This blog will not provide a full explanation of Java or Smalltalk syntax. There are resources available on the internet for both if you want to learn more. The blog will only cover what is necessary to explain the code examples I share. I will do my best to explain the examples in detail so that syntax is not a barrier to understanding. This blog is intended to make you ponder larger possibilities, not struggle with minutiae of language syntax.&lt;/p&gt;&lt;p&gt;In the sections that follow, I will compare solutions to the same simple problems using both Java and Smalltalk. I will be using Java 21 with IntelliJ IDEA CE 2023.3.2 for the Java code examples. I will be using &lt;a href=&quot;https://pharo.org/&quot;&gt;Pharo Smalltalk&lt;/a&gt; 11.0 for the Smalltalk code examples.&lt;/p&gt;&lt;h3&gt;Null vs. Nil&lt;/h3&gt;&lt;h4&gt;The literal null in Java&lt;/h4&gt;&lt;p&gt;In Java, there is a literal named null. You can assign null to any variable that has an Object type, but the reference the variable points to is not an instance of an Object. I like to think of null as an instance of the Spoon in the movie, “The Matrix”. There is no Spoon.&lt;/p&gt;&lt;p&gt;The following test code illustrates some of the properties of null in Java.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void nullIsNotAnObject()&lt;br /&gt;{&lt;br /&gt;    // Assert things about null&lt;br /&gt;    Assertions.assertFalse(null instanceof Object);&lt;br /&gt;    final Set&amp;lt;?&amp;gt; set = null;&lt;br /&gt;    Assertions.assertFalse(set instanceof Set);&lt;br /&gt;&lt;br /&gt;    // Assert things about exceptions thrown when calling methods on null&lt;br /&gt;    Assertions.assertThrows(&lt;br /&gt;            NullPointerException.class,&lt;br /&gt;            () -&amp;gt; set.getClass());&lt;br /&gt;    Assertions.assertThrows(&lt;br /&gt;            NullPointerException.class,&lt;br /&gt;            () -&amp;gt; set.toString());&lt;br /&gt;&lt;br /&gt;    // Assert things about a non-null variable named set2&lt;br /&gt;    final Set&amp;lt;?&amp;gt; set2 = new HashSet&amp;lt;&amp;gt;(Set.of(1, 2, 3));&lt;br /&gt;    set2.add(null);&lt;br /&gt;    Assertions.assertNotNull(set2);&lt;br /&gt;    Assertions.assertNotNull(set2.getClass());&lt;br /&gt;    Assertions.assertTrue(set2 instanceof Set);&lt;br /&gt;&lt;br /&gt;    // Filter all of the non-null values from set2 in the Set named set3&lt;br /&gt;    // Uses a static method refererence from the Objects class&lt;br /&gt;    final Set&amp;lt;?&amp;gt; set3 = set2.stream()&lt;br /&gt;            .filter(Objects::nonNull)&lt;br /&gt;            .collect(Collectors.toUnmodifiableSet());&lt;br /&gt;    Assertions.assertEquals(Set.of(1, 2, 3), set3);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;In this test, I assert that null is not an instance of Object. I initialize a final variable of type Set&amp;lt;?&amp;gt; named set to null, and further assert that set , which is null, is not an instance of Set. I assert that when I call getClass() or toString() on set, which is still null, a NullPointerException is thrown. This happens because null is not an Object. Note, I made the first declaration of the set variable final here, in order to reference the variable set in the two lambdas in the first section where I assert that NullPointerException is thrown. I could have left it as “effectively final” by not trying to reset the value, but thought I would just go with having it be explicitly final.&lt;/p&gt;&lt;p&gt;In the second section, I create a mutable Set and store it in a variable named set2. I add null to the set. Set.of() will not accept null values, so I had to convert the immutable Set to a HashSet, which does accept null values. I add null manually to set2. I assert that set2 is not null, that its class is not null, and that set2 is in fact an instance of a Set as the compiler says it is.&lt;/p&gt;&lt;p&gt;Finally, I filter the instances contained in set2 into a new set3 as long as they respond true to the method reference Objects::nonNull, which references a static method on Objects that returns a Predicate that checks that object != null. Once again, since null is not an object, you cannot call any methods on it that could be used to construct a valid method reference as a Predicate.&lt;/p&gt;&lt;p&gt;This is the null in Java that we are all used to. It is not an Object. We’ve all learned to deal with null when coding in Java. Former Smalltalkers will know there is a different way.&lt;/p&gt;&lt;h4&gt;The literal nil in Smalltalk&lt;/h4&gt;&lt;p&gt;In Smalltalk, there is a singleton object instance named nil. The literal nil, is an instance of the class UndefinedObject. UndefinedObject is a subclass of Object. The Object class is a subclass of… nil. This circular definition has melted many programmers brains, including mine. Somehow, this all just works. It is one of the magical aspects of Smalltalk. There’s a turtle at the top, sitting on top of another turtle, and it’s just turtles all the way down.&lt;/p&gt;&lt;p&gt;The following test code passes using &lt;a href=&quot;https://pharo.org/&quot;&gt;Pharo Smalltalk&lt;/a&gt; 11.0.&lt;/p&gt;&lt;pre&gt;testNilIsAnObject&lt;br /&gt; |set setNoNils|&lt;br /&gt; &lt;br /&gt; # Assert things about nil&lt;br /&gt; self assert: nil isNil.&lt;br /&gt; self assert: 'nil' equals: nil printString.&lt;br /&gt; &lt;br /&gt; # Assert things about the set variable which is nil&lt;br /&gt; set := nil.&lt;br /&gt; self assert: set isNil.&lt;br /&gt; self assert: set equals: nil.&lt;br /&gt; self assert: set class equals: UndefinedObject.&lt;br /&gt; self assert: (set ifNil: [ true ]).&lt;br /&gt; self assert: set isEmptyOrNil.&lt;br /&gt; &lt;br /&gt; # Assert things about the set variable which is not nil&lt;br /&gt; set := Set with: 1 with: 2 with: 3 with: nil.&lt;br /&gt; self deny: set isNil.&lt;br /&gt; self assert: set isNotNil.&lt;br /&gt; self deny: set equals: nil.&lt;br /&gt; self deny: set isEmptyOrNil.&lt;br /&gt; self assert: set class equals: Set.&lt;br /&gt;&lt;br /&gt; # Select all the non-nil values into a new Set name setNoNils&lt;br /&gt; setNoNils := set select: #isNotNil.&lt;br /&gt; self assert: (Set with: 1 with: 2 with: 3) equals: setNoNils.&lt;/pre&gt;&lt;p&gt;Above is what a method definition looks like in Smalltalk. I wrote a unit test method named testNilIsAnObject. I define two temporary variables named set and setNoNils by declaring them between the two vertical pipes after the method name like this |set setNoNils|. In the first section of code I assert a few things about nil, in order to demonstrate it is in fact an instance of an Object. The literal self is the equivalent of this in Java, and refers to the instance of the class that testNilIsAnObject is defined on, which has methods it inherits named assert:, deny:, and assert:equals:. I assert that nil can respond to messages like any other object in Smalltalk. I assert that nil responds true to isNil. I also assert that calling printString on nil results in the String ‘nil’ being returned.&lt;/p&gt;&lt;p&gt;The := operator is used for variable assignment in Smalltalk. I assign the instance referenced by the literal nil to the variable named set. I assert that set responds true when sent the message isNil. I assert that the object reference contained in the set variable is an instance of UndefinedObject. I assert that calling the ifNil: message on set returns true. The code [ true ] is a zero argument block or lambda. In Java, the equivalent would be the a lambda typed as a Supplier. Finally, I assert that set responds to true when sent the message isEmptyOrNil.&lt;/p&gt;&lt;p&gt;In the second section of code, I create an instance of a Set by using the class method named with:with:with:with: which takes four parameters. I then deny that the set isNil. I assert that that the set isNotNil. I assert the set is not equal to nil. I deny the set isEmptyOrNil, since it it neither nil or isEmpty. I then assert that the class of set is Set.&lt;/p&gt;&lt;p&gt;In the third section of code, I select all instances contained in set into a new Set named setNoNils, if the instance returns true to the message isNotNil. The important thing here is that every subclass of Object in Smalltalk responds true or false to the message isNotNil.&lt;/p&gt;&lt;p&gt;Here’s a final example of one of the methods available to all objects in Smalltalk, including nil. The method name is ifNil:ifNotNil:. It is a control structure method which takes two block (aka lambda) parameters. The result is determined polymorphically by the type. The set here knows it is not nil, so it will automatically execute the second block and return the result which here is the String, ‘not nil’. The literal nil will know it is nil, so it will automatically execute the first block and return the result which here is the String, ‘nil’.&lt;/p&gt;&lt;pre&gt;# Use the built in control structures around nil on all objects&lt;br /&gt;self assert: (set ifNil: [ 'nil' ] ifNotNil: [ 'not nil']) equals: 'not nil'. &lt;br /&gt;self assert: (nil ifNil: [ 'nil' ] ifNotNil: [ 'not nil']) equals: 'nil'.&lt;/pre&gt;&lt;h4&gt;What if null was an Object in Java?&lt;/h4&gt;&lt;p&gt;The following code is speculative, won’t compile, is untested, and unproven by Java language experts. But perhaps if null were an instance of some class named Null, the following code &lt;em&gt;might&lt;/em&gt; be possible.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;// NOTE THIS CODE WILL NOT COMPILE AND IS PURELY SPECULATIVE!!!&lt;br /&gt;public void nullIsNotAnObject()&lt;br /&gt;{&lt;br /&gt;    // Assert things about null&lt;br /&gt;    Assertions.assertTrue(null instanceof Object);&lt;br /&gt;    final Set&amp;lt;?&amp;gt; set = null;&lt;br /&gt;    Assertions.assertFalse(set instanceof Set);&lt;br /&gt;&lt;br /&gt;    // Assert things about calling methods on null as an object&lt;br /&gt;    Assertions.assertTrue(set.isNull());&lt;br /&gt;    Assertions.assertEquals(Null.class, set.getClass());&lt;br /&gt;    Assertions.assertEquals(&quot;null&quot;, set.toString());&lt;br /&gt;&lt;br /&gt;    // Assert things about a non-null variable&lt;br /&gt;    final Set&amp;lt;?&amp;gt; set2 = Set.of(1, 2, 3);&lt;br /&gt;    Assertions.assertNotNull(set2);&lt;br /&gt;    Assertions.assertNotNull(set2.getClass());&lt;br /&gt;    Assertions.assertTrue(set2 instanceof Set);&lt;br /&gt;&lt;br /&gt;    // Filter all of the non-null values from set2 in the Set named set3&lt;br /&gt;    // Uses an instance method refererence from the Object class&lt;br /&gt;    final Set&amp;lt;?&amp;gt; set3 = set2.stream()&lt;br /&gt;            .filter(Object::isNotNull)&lt;br /&gt;            .collect(Collectors.toUnmodifiableSet());&lt;br /&gt;&lt;br /&gt;    // Calling methods defined on Object, that would be overridden in Null&lt;br /&gt;    Assertions.assertEquals(&quot;null&quot;, null.ifNull(() -&amp;gt; &quot;null&quot;)); &lt;br /&gt;    Assertions.assertNull(null.ifNotNull(() -&amp;gt; &quot;notNull&quot;));&lt;br /&gt;    Assertions.assertEquals(&quot;not null&quot;, set3.ifNotNull(() -&amp;gt; &quot; not null&quot;));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;If null were an instance of a class named Null, it would also be possible to add methods like ifNull, isNotNull, ifNotNull, isEmptyOrNull to both Object and Null as Smalltalk does. The ifNull and ifNotNull methods would take some functional interface type like Supplier, Consumer, or Function and then work with lambdas and method references. In the example above, I changed the filter code to use a Predicate formed from a method reference using the method named isNotNull which would be defined on Object.&lt;/p&gt;&lt;p&gt;The tricky part would be how to make null capable of representing any interface and class, and dispatching calls to a method named doesNotUnderstand for any methods from those interfaces that null wouldn’t understand. The Null class would have to behave like a Proxy for any type it is stored in, and forward methods sent to a class like Set, to a single method that could handle the “I’m not a Set” response appropriately.&lt;/p&gt;&lt;p&gt;Perhaps with null as an Object in Java, it would be possible to do away with a whole variety of NullPointerExceptions.&lt;/p&gt;&lt;h4&gt;Why is nil being an Object useful?&lt;/h4&gt;&lt;p&gt;The fact nil is an instance of the UndefinedObject class in Smalltalk allows it to be treated like all other objects in Smalltalk. It can respond to basic methods that are supported on all objects. The instance nil has first class treatment in the Object hierarchy in that every object knows that it is or isn’t nil. This brings a nice symmetry to the language and libraries. This does not remove the need to handle nil by avoiding or excluding it, but nil handling is done using the same mechanisms that you would use to handle or exclude other types, by calling methods like isNil, isNotNil, ifNil:,ifNotNil:, ifNil:ifNotNil:.&lt;/p&gt;&lt;p&gt;In a language like Smalltalk where controls structures are not defined as statements in the language, but as methods in the libraries, having nil exist like everything else, as an object, leads to a an amazing level of consistency and clarity. In my next blog I will delve more into how some other control structures in Smalltalk are defined in the class library.&lt;/p&gt;&lt;h3&gt;Final thoughts&lt;/h3&gt;&lt;p&gt;I’m not looking to change Java, as the null ship sailed a very long time ago. What I am hoping is that I can help illuminate the possibilities for Java developers who may not have seen another way of handling null in a different object-oriented programming language.&lt;/p&gt;&lt;p&gt;This blog was intended to explain in simple terms the differences between null in Java, and nil in Smalltalk. Learning multiple languages that use different strategies to address the same problems is useful. Learning a whole new language takes time. My hope is that this bitesize comparison is useful for you to be able to understand the pros and cons of a different approach.&lt;/p&gt;&lt;p&gt;In my next blog, I plan to include two other literal objects in Smalltalk named true and false., and compare them to their primitive Java equivalent also named true and false. I will also compare them to the Java Object equivalent named Boolean. I will also look to explain how control structures can be defined effectively in a library, and not require special syntax and reserved words for if, for, while statements.&lt;/p&gt;&lt;p&gt;Stay tuned, and thanks for reading!&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am the creator of and committer for the &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; OSS project, which is managed at the &lt;/em&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections&quot;&gt;&lt;em&gt;Eclipse Foundation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Eclipse Collections is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=3f1974954be2&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 05 Jan 2024 18:54:37 +0000</pubDate>
</item>
<item>
	<title>TypeFox: Add views to a Langium-powered VS Code extension</title>
	<guid isPermaLink="true">https://www.typefox.io/blog/langium-powered-view-extension</guid>
	<link>https://www.typefox.io/blog/langium-powered-view-extension</link>
	<description>Markus gives a simple introduction about webviews in VS Code and how to interact with Langium.</description>
	<pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse Theia 1.45 Release: News and Noteworthy</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/12/29/eclipse-theia-1-45-release-news-and-noteworthy/</guid>
	<link>https://eclipsesource.com/blogs/2023/12/29/eclipse-theia-1-45-release-news-and-noteworthy/</link>
	<description>&lt;p&gt;We are happy to announce the Eclipse Theia 1.45 release! The release contains 28 merged pull requests and we welcome four new contributors. In this article we will highlight some selected improvements â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/12/29/eclipse-theia-1-45-release-news-and-noteworthy/&quot; rel=&quot;nofollow&quot;&gt; Eclipse Theia 1.45 Release: News and Noteworthy&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Mikael Barbero: Understanding Software Provenance Attestation: The Roles of SLSA and in-toto</title>
	<guid isPermaLink="true">https://mikael.barbero.tech/blog/post/2023-12-28-slsa-and-in-toto/</guid>
	<link>https://mikael.barbero.tech/blog/post/2023-12-28-slsa-and-in-toto/</link>
	<description>&lt;p&gt;A &lt;a href=&quot;https://mikael.barbero.tech/blog/post/2023-12-26-understanding-software-provenance/&quot;&gt;software provenance attestation&lt;/a&gt; is a signed document that associates metadata with an artifact, encompassing details like the artifact’s origin, build steps, and dependencies. This information is critical for verifying the artifact’s authenticity and integrity. Featuring a cryptographic signature, provenance attestation ensures the document remains unaltered, playing a vital role in mitigating supply chain attacks. By scrutinizing the provenance of binaries, users can thwart the execution of malicious code on their systems. Let’s delve into some concrete examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Case of Compromised Package Manager&lt;/strong&gt;: Imagine a scenario where an attacker gains access to a developer’s package manager account for a widely-used open-source software library. The attacker injects malicious code, builds, and publishes an updated library version. As users update the library, the malicious code spreads. With provenance attestation, users would have noticed discrepancies in the attestation, revealing the code did not originate from the official source. This proactive measure could have averted incidents like the &lt;a href=&quot;https://therecord.media/malware-found-in-npm-package-with-millions-of-weekly-downloads&quot;&gt;UAParser.js library hijacking&lt;/a&gt; in 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Software Supplier Compromise Example&lt;/strong&gt;: Consider an attacker targeting a software supplier and tampering with their product. When customers use this compromised product, it could lead to further software breaches or data exfiltration. The &lt;a href=&quot;https://blog.gitguardian.com/codecov-supply-chain-breach/&quot;&gt;CodeCov attack&lt;/a&gt; serves as a pertinent example. Here, a malicious &lt;code&gt;bash uploader&lt;/code&gt; artifact was uploaded to CodeCov’s repository. Unknowingly downloaded and used this artifact by users resulted in stolen Git credentials and amplified the supply chain attack. Provenance attestation would have enabled users to detect the anomaly and prevent the execution of the malicious code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;exploring-slsa&quot;&gt;Exploring SLSA&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://slsa.dev&quot;&gt;SLSA (Supply chain Levels for Software Artifacts)&lt;/a&gt; is a framework that enhances the security of software supply chains by defining levels for software projects to aspire to. It emphasizes the generation, distribution, and verification of provenance information.&lt;/p&gt;
&lt;p&gt;The framework currently offers three &lt;em&gt;Levels&lt;/em&gt; under the &lt;em&gt;Build&lt;/em&gt; track in its 1.0 version. However, it’s beneficial to revisit the initial v0.1 draft for a broader understanding of SLSA’s scope and future direction.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;figure&gt;
&lt;img alt=&quot;Supply Chain Threats&quot; src=&quot;https://mikael.barbero.tech/blog/post/2023-12-28-slsa-and-in-toto/supply-chain-threats.svg&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;SLSA aims to shield against tampering at various stages of the software supply chain. The initial levels presented a progressive approach to mitigating these &lt;a href=&quot;https://slsa.dev/spec/v1.0/threats&quot;&gt;threats&lt;/a&gt;. The higher the level, the more robust the supply chain security. The requirements for each level were comprehensive and provided a clear progression path.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;figure&gt;
&lt;img alt=&quot;SLSA v0.1 Requirements&quot; src=&quot;https://mikael.barbero.tech/blog/post/2023-12-28-slsa-and-in-toto/slsa-v0.1-requirements.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The 1.0 version narrowed its focus to the Build and Provenance requirements. The introduction of “tracks” allows for future expansion, with the newly created Build track being the sole focus in this version. Each track’s levels will eventually measure different aspects of supply chain security.&lt;/p&gt;
&lt;p&gt;SLSA 1.0 refined the division of requirements between the project and the build platform. Achieving a higher Level in the Build Track implies greater trust in the Provenance information, thereby offering better protection against threats. The project requirements in the build track are now more straightforward, largely depending on the build platform’s ability to produce provenance that meets the level’s criteria.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;figure&gt;
&lt;img alt=&quot;SLSA v1.0 Build Track Requirements&quot; src=&quot;https://mikael.barbero.tech/blog/post/2023-12-28-slsa-and-in-toto/slsa-v1.0-build-track-requirements.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;introducing-in-toto&quot;&gt;Introducing in-toto&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://in-toto.io&quot;&gt;in-toto&lt;/a&gt; is a framework centered around software attestations, focusing on the generation and verification of metadata of the software supply chain. Developers and stakeholders generate metadata reflecting actions like coding and testing. The project owner creates a layout, a critical document that defines the supply chain’s expected steps and corresponding metadata.&lt;/p&gt;
&lt;p&gt;Key components of in-toto include the layout (a JSON document outlining expected the supply chain), functionaries (individuals or automated processes executing steps), and inspections (operations that need to be performed on the final product at the time of verification).&lt;/p&gt;
&lt;p&gt;While similar to SLSA, in-toto offers broader attestation capabilities than just about provenance information and without specific guidance against a threat model, as seen in SLSA. It provides a standard format for outlining supply chain expectations and realities.&lt;/p&gt;
&lt;h2 id=&quot;slsa-and-in-toto-hand-in-hand&quot;&gt;SLSA and in-toto: hand in hand&lt;/h2&gt;
&lt;p&gt;Given in-toto’s role in software attestation and SLSA’s focus on trustable provenance, their combination is logical. SLSA recommends (but does not mandate) the use of the in-toto format for provenance information, defining the necessary information for each Build Level as a &lt;a href=&quot;https://slsa.dev/spec/v1.0/provenance#schema&quot;&gt;custom in-toto predicate type&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This Provenance predicate aligns with in-toto’s framework: it models the supply chain as a series of steps, with each step generating attestations. These attestations are then verified against a supply chain layout, a signed metadata document defining the expected steps and their outcomes.&lt;/p&gt;
&lt;p&gt;In-toto’s ability to define use-case-specific predicates complements SLSA by providing a flexible means to capture a wide array of contextual supply chain information. This includes code reviews, test results, and runtime traces, all of which can be tailored to the specific needs of a project.&lt;/p&gt;
&lt;p&gt;By integrating SLSA Provenance with in-toto attestations, software supply chains can achieve a comprehensive verification process. This integration allows for detailed tracking and verification of each step in the supply chain, from code development to the final build, ensuring that all components meet the specified security and integrity standards.&lt;/p&gt;
&lt;p&gt;In practice, this means that when a build service performs a build, it not only records the SLSA Provenance of the resulting artifact but also integrates this with the broader set of in-toto attestations, encompassing various aspects of the build process. These attestations, when combined, offer a more detailed and trustworthy view of the software’s development and build process, enhancing the overall security posture.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Software provenance attestation is crucial for mitigating a multitude of security threats. Frameworks like SLSA and in-toto play a significant role in enabling these attestations, ensuring the integrity and security of software supply chains. In a forthcoming blog post, we’ll explore in detail the process of creating SLSA provenance attestations specifically for Java/Maven projects. This deep dive will provide valuable insights and practical steps for developers looking to enhance the security of their Java applications. Keep an eye out for this upcoming post for a comprehensive guide on implementing these security measures.&lt;/p&gt;</description>
	<pubDate>Thu, 28 Dec 2023 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Mikael Barbero: Understanding Software Provenance</title>
	<guid isPermaLink="true">https://mikael.barbero.tech/blog/post/2023-12-26-understanding-software-provenance/</guid>
	<link>https://mikael.barbero.tech/blog/post/2023-12-26-understanding-software-provenance/</link>
	<description>&lt;p&gt;In the ever-evolving landscape of open-source software development, the creation and distribution of artifacts—such as compiled binaries, libraries, and documentation—represent the tangible results of a multifaceted process. These artifacts are more than just a collection of code; they are the final product of myriad decisions, alterations, and contributions, each with its unique narrative. It’s essential to grasp these narratives or the &lt;strong&gt;provenance of these artifacts&lt;/strong&gt;, to secure the supply chain effectively. Moreover, the integrity and security of these artifacts are paramount, as they underpin the trust and reliability users expect. This post aims to demystify the concept of provenance for these released artifacts. We will delve into why a comprehensive understanding of their origins and the path they take—examined through the lens of the journalistic 5W1H (Who, What, When, Where, Why, and How)—is crucial for enhancing the security posture of an open source project’s supply chain.&lt;/p&gt;
&lt;h2 id=&quot;understanding-artifact-provenance&quot;&gt;Understanding Artifact Provenance&lt;/h2&gt;
&lt;p&gt;Provenance in the context of released artifacts is a narrative of origin and evolution. It’s a detailed account of an artifact’s lifecycle from its inception in the developer’s mind to its final form when it is released to the world. This lineage includes every modification, every build, and every individual who has interacted with the artifact. A well-documented provenance is not just an academic record; it’s a testament to the artifact’s integrity, a shield ensuring that what users download and interact with is precisely what was intended, untainted by tampering or malicious alterations.&lt;/p&gt;
&lt;h2 id=&quot;challenges-in-tracking-artifact-provenance&quot;&gt;Challenges in Tracking Artifact Provenance&lt;/h2&gt;
&lt;p&gt;However, maintaining a comprehensive provenance is fraught with challenges. The complexity of dependencies where each layer has its own story, the sheer volume of artifacts and the speed at which they are updated, and the diverse sources they are compiled from, all contribute to a labyrinth of information that needs to be meticulously managed. Add to this the lack of standardized tools and practices for documenting and verifying provenance, and the task can seem Herculean. Yet, these challenges are not insurmountable barriers but rallying calls for robust solutions, for the security and reliability of the software supply chain hinge on this very capability.&lt;/p&gt;
&lt;h2 id=&quot;provenance-information&quot;&gt;Provenance information&lt;/h2&gt;
&lt;p&gt;If we consider what the provenance information of released artifacts should comprise, it’s akin to the outcome of any solid journalistic work: it should address the 5W1H (What, Who, Why, When, Where, and How) questions. At a fundamental level, the answers to these questions should be as follows.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;What&lt;/strong&gt; concerns identifying the released artifacts themselves, giving them an identity through an unambiguous identifier (e.g., using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Platform_Enumeration&quot;&gt;Common Platform Enumeration (CPE)&lt;/a&gt; scheme or a &lt;a href=&quot;https://github.com/package-url/purl-spec&quot;&gt;Package URL&lt;/a&gt;). It can also cover the licenses of the artifacts, a list of the artifact’s dependencies, their respective licenses, and how they have been retrieved, among other things. This is more commonly known as a Software Bill of Materials (SBOM) and can be considered a part of the provenance information to be released with an artifact. Understanding the ‘What’ means having a clear, auditable trail of the components that form the backbone of your software, enabling you to assess, manage, and secure your software supply chain effectively.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Who&lt;/strong&gt; can be as straightforward as identifying who triggered the release (or the build of the release) of the artifacts. It might also extend to include additional information about who contributed to the code included in this release, whether from the project’s inception or since the last release. Details regarding any signed &lt;a href=&quot;https://en.wikipedia.org/wiki/Contributor_License_Agreement&quot;&gt;Contributor License Agreement&lt;/a&gt; (CLA) or accepted &lt;a href=&quot;https://en.wikipedia.org/wiki/Developer_Certificate_of_Origin&quot;&gt;Developer Certificate of Origin&lt;/a&gt; (DCO) by contributors can also be incorporated. Knowing who contributed what aids in tracking changes, auditing contributions, and most importantly, ensuring that only trustworthy code is incorporated into your projects.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Why&lt;/strong&gt; pertains to understanding the reason behind the release: is it to fix a security vulnerability? Is it a scheduled release following the regular cadence? It might also involve tracking why a particular library was updated. As such, the release notes can be considered a (non-structured) part of the provenance information in this context. This aspect of provenance is about context and rationale, which is crucial for assessing the impact of changes on the overall security and functionality of your software.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;When&lt;/strong&gt; is straightforwardly about keeping track of the time of the release, to anchor it in a broader historical context. It can also involve recording the timing of the various contributions made prior to the release.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Where&lt;/strong&gt; concerns tracing the locations of the various components that led to the released artifact. Where was the code developed and stored? Was it in a secure, trusted repository, or did it come from a less reliable source? Where was it built? Knowing these details can be the difference between a secure application and a vulnerable one. Coupled with the answer to the &lt;em&gt;When&lt;/em&gt;, this mirrors the journalistic approach of establishing timelines and locations, helping you create a more comprehensive narrative of your software’s development and enhancing security and control over your project’s lifecycle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How&lt;/strong&gt; relates to the methods, tools, and practices used to track and verify the origins of your code. It encompasses the mechanisms you implement to ensure that every line of code can be traced back to its source, thus ensuring integrity and reliability. This not only refers to the build pipelines and toolchains used to build and release the artifacts but also includes information about software development best practices such as code review, branch protections, secret scanning, and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;/p&gt;&lt;figure&gt;
&lt;img alt=&quot;5w1h&quot; src=&quot;https://mikael.barbero.tech/blog/post/2023-12-26-understanding-software-provenance/5w1h.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;While the full details of implementing software provenance attestation will be covered in a future post, all this information can already be delivered to downstream users of your project in a simple text file, for example, in the form of &lt;code&gt;buildinfo&lt;/code&gt; files. Although not exhaustive, &lt;code&gt;buildinfo&lt;/code&gt; files are a testament to the commitment to transparency and security, serving as a foundational element for more advanced tools and practices.&lt;/p&gt;
&lt;h2 id=&quot;the-importance-of-artifact-provenance-for-security&quot;&gt;The Importance of Artifact Provenance for Security&lt;/h2&gt;
&lt;p&gt;The narrative of provenance is critical for security. In a world where the threat landscape is as vast as it is vicious, the lack of provenance can lead to severe breaches. Compromised artifacts, malicious code insertions, and other vulnerabilities are not just theoretical risks; they are stark realities. A robust provenance framework is not just a defensive mechanism; it’s a foundational pillar in building a secure, trustworthy supply chain. To enhance the security posture of its projects, understanding and implementing provenance practices is not an option; it’s an imperative.&lt;/p&gt;
&lt;h2 id=&quot;how-to-trust-provenance-data&quot;&gt;How to trust provenance data?&lt;/h2&gt;
&lt;p&gt;Trusting provenance data generated during the build process is a commendable start. However, recognizing its limitations is crucial for establishing a more robust system of trust&lt;/p&gt;
&lt;h3 id=&quot;integrity-of-build-generated-provenance&quot;&gt;Integrity of Build-Generated Provenance&lt;/h3&gt;
&lt;p&gt;The integrity of build-generated provenance is inherently fragile. It’s as secure as the environment in which it’s stored and the transport methods used to deliver it. Imagine if a malicious actor gains access to the storage backend or intercepts the transport protocols; they could alter the provenance data, rendering it unreliable. A common countermeasure involves signing the provenance files or data. Digital signatures provide an additional layer of trust by making any tampering with the provenance data after its creation detectable. However, this step, while beneficial, is not a complete solution.&lt;/p&gt;
&lt;h3 id=&quot;vulnerability-of-the-build-script&quot;&gt;Vulnerability of the Build Script&lt;/h3&gt;
&lt;p&gt;Another critical aspect to consider is the vulnerability of the build script itself. If the build pipeline is compromised, then so is the provenance it generates, whether signed or not. A compromised script might produce misleading information, feeding false data into what should be a trusted record. This scenario underscores a crucial realization: to genuinely trust the provenance data, the responsibility for generating it should shift away from the build pipeline to the build platform.&lt;/p&gt;
&lt;h3 id=&quot;the-shift-in-responsibility&quot;&gt;The Shift in Responsibility&lt;/h3&gt;
&lt;p&gt;By making the build platform responsible for this task and having it sign the generated data, we create a system where the provenance is not only more resistant to tampering but also inherently more trustworthy. The build platform, ideally, is indeed in a unique position to observe and record the build process. It has access to all the information needed to generate accurate provenance data. This shift doesn’t eliminate the risk of compromise, but it does mean that any tampering with the build pipeline won’t affect the integrity of the provenance data we rely on.&lt;/p&gt;
&lt;h3 id=&quot;securing-the-build-platform&quot;&gt;Securing the Build Platform&lt;/h3&gt;
&lt;p&gt;It’s important to note that this approach is not a silver bullet. The build platform itself can be compromised, and securing it is a complex task that goes beyond the scope of this discussion. However, it’s an essential consideration for a truly trustworthy system. Even with a secured build platform, the environment generating the provenance data must also be secure to genuinely trust the data’s integrity.&lt;/p&gt;
&lt;p&gt;In conclusion, while build-generated provenance is a valuable first step, it’s essential to be aware of its limitations. Shifting the responsibility to the build platform and securing that platform are critical moves towards a more trustworthy and resilient system. However, remember that in the realm of security, no solution is absolute. Each layer of trust we add is a step towards a more secure ecosystem, but vigilance and ongoing improvement are always necessary.&lt;/p&gt;
&lt;h2 id=&quot;closing-notes&quot;&gt;Closing notes&lt;/h2&gt;
&lt;p&gt;As we conclude our exploration of software provenance through the detailed lens of the 5W1H framework, it’s clear that this is not merely an exercise in compliance or best practices. It’s a fundamental shift in how we approach software development and security. Understanding the ‘Who,’ ‘What,’ ‘When,’ ‘Where,’ ‘Why,’ and ‘How’ of your artifacts isn’t just about enhancing security—it’s about instilling a culture of transparency and excellence.&lt;/p&gt;
&lt;p&gt;The journey we’ve outlined is challenging, with numerous complexities and hurdles. However, the path to a secure and reliable software supply chain is not only necessary but also attainable with the right mindset and tools. Adopting a provenance-first approach is a paradigm shift. It means engraining the tracking and verification of the origin and journey of artifacts into the very fabric of the development and release process. It’s about integrating provenance tracking into the build process, adopting tools that automate and standardize provenance documentation, and fostering a community culture where knowledge, tools, and best practices are shared freely and openly.&lt;/p&gt;
&lt;p&gt;As we look forward to diving into the practicalities of implementing a robust software provenance strategy in our next installment, remember that your engagement and continuous learning are vital. The principles and practices discussed here are just the beginning. With a blog post about the &lt;a href=&quot;https://slsa.dev/&quot;&gt;Supply-chain Levels for Software Artifacts (SLSA) framework&lt;/a&gt; on the horizon, we will have the guidelines and tools at our disposal to prevent tampering, improve integrity, and secure our packages and infrastructure.&lt;/p&gt;
&lt;p&gt;We invite you to not just read but actively participate in shaping the future of software provenance. Join us and the Eclipse Foundation community in &lt;a href=&quot;https://accounts.eclipse.org/mailing-list/eclipse-cyber-risk-initiative&quot;&gt;discussing&lt;/a&gt; and advancing these crucial topics. Your insights, experiences, and commitment are key to driving change and fostering a more secure digital world.&lt;/p&gt;
&lt;p&gt;Together, let’s embrace the provenance-first mindset and lead the charge towards a future where software development is synonymous with security, transparency, and trust.&lt;/p&gt;</description>
	<pubDate>Tue, 26 Dec 2023 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Mikael Barbero: Eclipse Foundation Embraces Sigstore</title>
	<guid isPermaLink="true">https://mikael.barbero.tech/blog/post/2023-12-23-eclipse-foundation-embraces-sigstore/</guid>
	<link>https://mikael.barbero.tech/blog/post/2023-12-23-eclipse-foundation-embraces-sigstore/</link>
	<description>&lt;p&gt;As part of our ongoing commitment to fortifying the security of our software development processes, we’re excited to announce a significant enhancement for all Eclipse Foundation projects utilizing our Jenkins infrastructure. This advancement comes with the integration of &lt;a href=&quot;https://www.sigstore.dev&quot;&gt;Sigstore&lt;/a&gt;, a cutting-edge solution designed to bolster the security and integrity of software supply chains. By exploring the integration of Sigstore within the Eclipse Foundation’s Jenkins setup, this article sets out to demonstrate how this advancement is reshaping secure software development and deployment for Eclipse Foundation projects.&lt;/p&gt;
&lt;h3 id=&quot;what-is-sigstore&quot;&gt;What is Sigstore?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sigstore.dev&quot;&gt;Sigstore&lt;/a&gt; represents a shift in the way we secure software artifacts. This open-source tool offers a transparent and secure method for both signing and verifying software artifacts, including binaries and container images. It’s designed to make digital signing simpler for developers by eliminating the complex management of keys. This allows users to confidently verify the artifacts’ origins and integrity. At its core, Sigstore’s “keyless” signing associates a signature with the signer’s identity, rather than a fixed set of keys.&lt;/p&gt;
&lt;p&gt;The process begins when a developer obtains an identity token from an identity provider and creates a temporary public/private key pair in memory. This token, along with the public key, is sent to Sigstore’s certificate authority, which verifies the information against the token issuer. If the identity provider is recognized and the token is valid, Sigstore’s authority issues a short-lived certificate that binds the public key to the developer’s identity. This binding is crucial as it securely attaches the identity of the signer to the artifact being signed, ensuring traceability and accountability.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;figure&gt;
&lt;img alt=&quot;sigstore&quot; src=&quot;https://mikael.barbero.tech/blog/post/2023-12-23-eclipse-foundation-embraces-sigstore/sigstore_text.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;During the signing phase, a transparency log entry is created. This entry is part of a public, tamper-evident ledger that records the artifact’s hash, the public key used, and the signature, all with a timestamp to validate the software’s integrity and origin at the time of signing. Once the signing is complete, the private key is discarded, and the short-lived certificate soon expires.&lt;/p&gt;
&lt;p&gt;The trust in the verification process comes from this transparency log, not from the signer’s ability to safeguard a private key. Users can validate the logged details against the artifact to confirm its integrity and origin. This verification can occur online, with real-time access to the transparency log for the most up-to-date information. For environments where the transparency log is not accessible, such as air-gapped systems, offline verification is also possible. In these scenarios, the signed artifacts should be accompanied by the certificate and public key, allowing verification against these components without needing access to the transparency log. This method relies on the trust established by the Sigstore-issued certificate, ensuring the authenticity of the artifact as confirmed by a trusted CA.&lt;/p&gt;
&lt;p&gt;This methodology goes beyond improving convenience; it serves as a strategic defense against a range of cyber threats, particularly those targeting software supply chains. By eliminating the need for developers to manage long-lived keys and by providing a transparent log of signed artifacts, Sigstore mitigates risks like code tampering (e.g., when used to sign commits) and unauthorized access, which are prevalent in supply chain attacks.&lt;/p&gt;
&lt;h3 id=&quot;using-sigstore-on-eclipse-foundations-jenkins-instances&quot;&gt;Using Sigstore on Eclipse Foundation’s Jenkins instances&lt;/h3&gt;
&lt;p&gt;The Eclipse Foundation has &lt;a href=&quot;https://github.com/sigstore/fulcio/pull/1472&quot;&gt;recently become&lt;/a&gt; a recognized identity provider for Sigstore’s certificate authority. This development is a game-changer for projects within the Foundation for several reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Managed Identity Verification&lt;/strong&gt;: With this status, the Eclipse Foundation can issue tokens for projects’ bot accounts. These tokens are recognized and verified by Sigstore, which then issues certificates based on the Eclipse Foundation’s managed identity. This process ensures a trusted link between the artifact and the Foundation, further bolstering trust and security.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Streamlined Artifact Signing&lt;/strong&gt;: Initially focusing on bot accounts, this setup is tailored for automated processes, like those running on Jenkins instances. Projects can seamlessly sign artifacts during the build and release process, integrating security into the CI/CD pipeline without added complexity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Extended Trust and Compliance&lt;/strong&gt;: Having the Eclipse Foundation as a recognized identity provider means that artifacts signed through this process are backed by a trusted entity, meeting higher standards of security.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s worth noting that Sigstore can be used by all of Eclipse Foundation projects hosted on GitHub and using GitHub Actions, as detailed in &lt;a href=&quot;https://github.blog/2022-10-25-why-were-excited-about-the-sigstore-general-availability/&quot;&gt;GitHub’s blog post&lt;/a&gt;. For Eclipse Foundation projects that utilize both Jenkins and GitHub, this creates a cohesive and secure workflow for signing artifacts across platforms.&lt;/p&gt;
&lt;h3 id=&quot;implementing-sigstore-in-your-jenkins-workflow&quot;&gt;Implementing Sigstore in Your Jenkins Workflow&lt;/h3&gt;
&lt;p&gt;If you want to start signing artifacts with Sigstore’s keyless process in your Jenkins workflow, it’s very easy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The very first step is to open a help desk ticket to ask us to allow our identity provider to issue tokens that would be verifiable by Sigstore. We also configure your Jenkins instance with some new credentials.&lt;/li&gt;
&lt;li&gt;Adapt the workflow below to your use case and profit.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-groovy&quot;&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;pipeline &lt;span style=&quot;color: #f92672;&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; agent any
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; stages &lt;span style=&quot;color: #f92672;&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; stage&lt;span style=&quot;color: #f92672;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;'Prepare'&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; steps &lt;span style=&quot;color: #f92672;&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; sh &lt;span style=&quot;color: #e6db74;&quot;&gt;'''
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; echo &quot;Hello World&quot; &amp;gt; README
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; curl -sSL -o cosign https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; chmod u+x cosign
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; '''&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; stage&lt;span style=&quot;color: #f92672;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;'Sign'&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; steps &lt;span style=&quot;color: #f92672;&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; withCredentials&lt;span style=&quot;color: #f92672;&quot;&gt;([&lt;/span&gt;usernamePassword&lt;span style=&quot;color: #f92672;&quot;&gt;(&lt;/span&gt;credentialsId: &lt;span style=&quot;color: #e6db74;&quot;&gt;'cbi-dev-sigstore'&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;,&lt;/span&gt; passwordVariable: &lt;span style=&quot;color: #e6db74;&quot;&gt;'_BOT__PASSWORD'&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;,&lt;/span&gt; usernameVariable: &lt;span style=&quot;color: #e6db74;&quot;&gt;'_BOT__USERNAME'&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;)])&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; sh &lt;span style=&quot;color: #e6db74;&quot;&gt;'''
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; IDP_DATA=$(mktemp)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; OID_TOKEN=$(mktemp)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; chmod 600 &quot;${IDP_DATA}&quot; &quot;${OID_TOKEN}&quot;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; trap 'rm -vf &quot;${IDP_DATA}&quot; &quot;${OID_TOKEN}&quot;' EXIT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; cat &amp;lt;&amp;lt;EOF &amp;gt; &quot;${IDP_DATA}&quot;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;username=${_BOT__USERNAME}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;amp;password=${_BOT__PASSWORD}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;amp;grant_type=password
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;amp;client_id=sigstore
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; curl -sSL -X POST \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; --url https://auth.eclipse.org/auth/realms/sigstore/protocol/openid-connect/token \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; --header &quot;Content-Type: application/x-www-form-urlencoded&quot; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; --data @&quot;${IDP_DATA}&quot; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; | jq -r &quot;.access_token&quot; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; | head -c -1 &amp;gt; &quot;${OID_TOKEN}&quot;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; ./cosign sign-blob README -y --bundle README.bundle --oidc-issuer=https://auth.eclipse.org/auth/realms/sigstore --identity-token=&quot;${OID_TOKEN}&quot;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; '''&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; sh &lt;span style=&quot;color: #e6db74;&quot;&gt;'''
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; ./cosign verify-blob README --bundle README.bundle --certificate-oidc-issuer=https://auth.eclipse.org/auth/realms/sigstore --certificate-identity=cbi-dev@eclipse.org
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt; '''&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;display: flex;&quot;&gt;&lt;span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;During the &lt;code&gt;Prepare&lt;/code&gt; phase, we just download the &lt;code&gt;cosign&lt;/code&gt; tool, which is a CLI client to sigstore. We could also go the hard way and only communicate with Sigstore via its REST API with curl, but &lt;code&gt;cosign&lt;/code&gt; make is much simpler.&lt;/p&gt;
&lt;p&gt;During the &lt;code&gt;Sign&lt;/code&gt; phase, we start by retrieving the project’s bot credentials and use &lt;code&gt;curl&lt;/code&gt; to retrieve a token from the Eclipse Foundation identity provider. We aim at making this phase transparent to projects in the future and create the token automatically on each workflow startup, à la &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;. We then pass this token to the cosign tool to sign the &lt;code&gt;README&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Note that we save the file what &lt;code&gt;cosign&lt;/code&gt; call a &lt;code&gt;--bundle&lt;/code&gt;. This bundle is just an aggregate of the signature and the certificate of the signature. This avoids having to distribute 2 files along with the signed artifacts, simplifying the transfer and the verification.&lt;/p&gt;
&lt;p&gt;At the end of the signing process, the &lt;code&gt;cosign&lt;/code&gt; tool prints the index of the transparency log entry that has been created:&lt;/p&gt;
&lt;pre tabindex=&quot;0&quot;&gt;&lt;code&gt;tlog entry created with index: 58260299
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One can then check the information relative to this operation by going on the transparency log web interface at &lt;a href=&quot;https://search.sigstore.dev/?logIndex=58260299&quot;&gt;https://search.sigstore.dev/?logIndex=58260299&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;figure&gt;
&lt;img alt=&quot;rekor&quot; src=&quot;https://mikael.barbero.tech/blog/post/2023-12-23-eclipse-foundation-embraces-sigstore/rekor.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Finally, for testing purpose, we verify the signature during the &lt;code&gt;Verify&lt;/code&gt; phase. We reuse the bundle we just introduced, and ask the &lt;code&gt;cosign&lt;/code&gt; tool to verify that the file has been signed with a certificate for the identity &lt;code&gt;cbi-dev@eclipse.org&lt;/code&gt; as issued by the identity provider &lt;code&gt;https://auth.eclipse.org/auth/realms/sigstore&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&quot;0&quot;&gt;&lt;code&gt;+ ./cosign verify-blob README --bundle README.bundle --certificate-oidc-issuer=https://auth.eclipse.org/auth/realms/sigstore --certificate-identity=cbi-dev@eclipse.org
Verified OK
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;We encourage all project teams within the Eclipse Foundation to adopt this new capability. The integration is straightforward and offers significant benefits in securing your software artifacts. By doing so, you’ll be taking a proactive stance in securing your projects and contributing to a safer software supply chain.&lt;/p&gt;
&lt;p&gt;In conclusion, the adoption of Sigstore within our Jenkins infrastructure is more than just a technical update; it’s a commitment to the security and integrity of the Eclipse Foundation projets. We look forward to seeing its positive impact on our community.&lt;/p&gt;
&lt;p&gt;We welcome &lt;a href=&quot;https://accounts.eclipse.org/mailing-list/eclipse-cyber-risk-initiative&quot;&gt;feedback and questions&lt;/a&gt; from the Eclipse Foundation community on this journey together towards a more secure software future.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This work was made possible thanks to the funding the Foundation received from the &lt;a href=&quot;https://openssf.org/community/alpha-omega/&quot;&gt;Alpha-Omega&lt;/a&gt; Project. &lt;/p&gt;</description>
	<pubDate>Sat, 23 Dec 2023 10:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: Good News on the Cyber Resilience Act</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1758</guid>
	<link>https://eclipse-foundation.blog/2023/12/19/good-news-on-the-cyber-resilience-act/</link>
	<description>&lt;p&gt;As the title says, there is good news to share on the progress of the European Union’s proposed Cyber Resilience Act (“CRA”) as the final revisions agreed to in the trilogue negotiations appear to largely exclude the open source community from its scope.&lt;/p&gt;



&lt;p&gt;I have written (&lt;a href=&quot;https://eclipse-foundation.blog/2023/01/15/european-cyber-resiliency-act-potential-impact-on-the-eclipse-foundation/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://eclipse-foundation.blog/2023/02/23/cyber-resilience-act-good-intentions-and-unintended-consequences/&quot;&gt;here&lt;/a&gt;) and &lt;a href=&quot;https://www.youtube.com/watch?v=AmsM5_5QO5A&quot;&gt;spoken&lt;/a&gt; extensively about our concerns with the European Union’s proposed Cyber Resilience Act (“CRA”) in the past. As originally drafted, the CRA would have had an enormous negative impact on both the open source community and the EU’s innovation economy. In short, it would have required most open source projects (and every open source project that matters) made available in Europe to meet unrealistic regulatory requirements related to their secure software development and maintenance. OSS projects would have also been required to affix the CE Mark on their releases certifying that these regulatory requirements had been met, which additionally would have required outside audits performed for critical infrastructure projects such as operating systems. You can read the links above if you want to get a full understanding of the dire implications of the original draft of the CRA.&lt;/p&gt;



&lt;p&gt;While the Eclipse Foundation has always shared the goals of the CRA to improve the state of security in the software industry, we have been very vocal in expressing our concerns with how unrealistic requirements could damage the open source community and Europe’s innovation economy. We have been very active in raising community awareness of the issues over the past year. For example, we helped facilitate two open letters co-signed with many of our peer organizations detailing the issues (&lt;a href=&quot;https://newsroom.eclipse.org/news/announcements/cra-should-support-open-practices-open-source-and-development-european-open&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://newsroom.eclipse.org/news/announcements/open-letter-european-commission-cyber-resilience-act&quot;&gt;here&lt;/a&gt;). &lt;/p&gt;



&lt;p&gt;But we also invested a great deal of time and energy in constructively engaging with policymakers by providing explanations of the functioning of our ecosystems and technologies. The European Commission, the European Parliament, the Council through the Spanish Presidency, as well as numerous policy makers at the national level have all been open to our contributions and recognise our efforts to protect European open innovation. I would like to thank my colleagues Gesine Freund, Enzo Ribagnac, Mikaël Barbero, and Gaël Blondelle for their many contributions to this process. &lt;/p&gt;



&lt;p&gt;We were not alone in these efforts. An assuredly incomplete list of other open source organizations that contributed to raising awareness includes: Apache Software Foundation, Internet Society, Free Software Foundation Europe, Linux Foundation, Mozilla Foundation, NLNet Labs, Open Source Initiative, Python Software Foundation, The Document Foundation, and many others. OpenForum Europe played a pivotal role in facilitating communication between these groups, and Ciarán O’Riordan at the OFE deserves recognition for his yeoman’s effort in coordinating the community’s input throughout the discussions on the CRA. &lt;/p&gt;



&lt;p&gt;On December 1st it was &lt;a href=&quot;https://ec.europa.eu/commission/presscorner/detail/en/IP_23_6168&quot;&gt;announced&lt;/a&gt; that the EU co-legislators had reached political agreement on the CRA. Although the final text is still being worked on, we are happy to report the open source community has been listened to. The revised legislation has vastly improved its exclusion of open source projects, communities, foundations, and their development and package distribution platforms. It also creates a new form of economic actor, the “open source steward,” which acknowledges the role played by foundations and platforms in the open source ecosystem. This is the first time this has appeared in a regulation, and it will be interesting to see how this evolves. The Eclipse Foundation will be investing a great deal of effort into helping refine this concept and its implementation to ensure it aligns with the norms of the open source community. The final revisions also extended the implementation phase to three years, which means full compliance with the CRA will likely start in early 2027. OpenForum Europe’s &lt;a href=&quot;https://openforumeurope.org/eu-cyber-resilience-act-takes-a-leap-forward/&quot;&gt;recent press release&lt;/a&gt; on the CRA is certainly worth a read for additional context. &lt;/p&gt;



&lt;p&gt;It is important to recognize and thank the many people that were involved in achieving this significantly better outcome. Both those who were involved from the side of the co-legislators who genuinely listened and made extensive improvements, and the many people from the open source community who invested their time and energy into explaining the unique requirements of the open source community. &lt;/p&gt;



&lt;p&gt;But this journey is only beginning. &lt;/p&gt;



&lt;p&gt;It is important to note that while the CRA has been revised to largely exclude the open source community from its scope, this legislation will still have an enormous impact on the software industry as a whole. &lt;/p&gt;



&lt;p&gt;Open source projects will not be required to directly implement the mandated processes described in the CRA. But every commercial product made available in the EU which is built on top of those open source projects &lt;em&gt;will&lt;/em&gt;. For the first time in the software industry’s history, it will soon have regulatory requirements for secure software development and maintenance&lt;em&gt;. &lt;/em&gt;I predict this will put pressure on projects and communities to enhance their processes to assist in downstream commercialization. &lt;/p&gt;



&lt;p&gt;After all, if a project is used in hundreds of products, doing the bulk of the CE Mark conformance work in the project rather than repeating the effort hundreds of times makes enormous sense. But as we all know, OSS projects at the moment simply do not have the resources to do this. It is impossible to know how all of this will play out, but an optimistic hypothesis is that once companies are required by law to meet secure software development practices they will be incented to invest in the upstream projects they rely upon. The Eclipse Foundation will be working hard to ensure that we evolve to support the needs of our committers, projects, and members in order to support the implementation of these new regulatory requirements. We will be discussing this early in the new year. &lt;/p&gt;



&lt;p&gt;Interesting times!&lt;/p&gt;</description>
	<pubDate>Tue, 19 Dec 2023 09:01:00 +0000</pubDate>
</item>
<item>
	<title>Sharon Corbett: Industry Collaboration in Action: Eclipse SDV, OpenMobility and ThreadX</title>
	<guid isPermaLink="false">7466 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/sharon-corbett/industry-collaboration-action-eclipse-sdv-openmobility-and-threadx</link>
	<description>&lt;span&gt;Industry Collaboration in Action: Eclipse SDV, OpenMobility and ThreadX&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;If you’ve read my two previous blog posts, you already have an understanding of how interest groups and working groups provide &lt;/span&gt;&lt;a href=&quot;https://blogs.eclipse.org/post/sharon-corbett/which-eclipse-foundation-collaboration-model-best-you-three-questions-ask&quot;&gt;&lt;span&gt;two different mechanisms&lt;/span&gt;&lt;/a&gt;&lt;span&gt; for industry collaboration, how your organisation can &lt;/span&gt;&lt;a href=&quot;https://blogs.eclipse.org/post/sharon-corbett/starting-your-collaboration-journey-eclipse-foundation&quot;&gt;&lt;span&gt;get started&lt;/span&gt;&lt;/a&gt;&lt;span&gt; on its own collaboration journey, and the numerous benefits that come from collaborating on open source software at the Eclipse Foundation.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;But the best way to understand what joining an industry collaboration can do for your organisation is by taking a look at some of our &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/org/workinggroups/explore.php&quot;&gt;&lt;span&gt;current collaborations&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The Eclipse Foundation currently hosts 21 Industry Collaborations focused on various technologies and domains, from developer tools to cloud native Java, IoT and beyond. One working group that has experienced considerable momentum recently is &lt;/span&gt;&lt;a href=&quot;https://sdv.eclipse.org/&quot;&gt;&lt;span&gt;Eclipse Software Defined Vehicle&lt;/span&gt;&lt;/a&gt;&lt;span&gt; (SDV).&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;img alt=&quot;Eclipse SDV Logo&quot; height=&quot;137&quot; src=&quot;https://lh7-eu.googleusercontent.com/Tco295tIT5b6fHEuyot6Zyl3hBcUgKGZfyHVXJMB7iBjUlklqTRypdO_wy44R50g0WSeV_2bHQqAN8e_pMinJuPhwX4yxXY_1zHIiWTfs2qw_K_YDPC2dFHS4DIW6p_VO1BffJLe_k9nV5z80DMuRmg&quot; width=&quot;368&quot; /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Over 40 organisations have joined Eclipse SDV since the working group’s launch in 2022. Members range from automotive OEMs and Tier-1’s, to enterprise software companies, to the cloud hyperscalers. This is driven by the fact that the software defined vehicles of the future will be highly connected, and the systems engineering requirements will span deeply embedded and safety critical components all the way to connectivity to cloud-based IT systems.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Eclipse SDV members collaborate on non-differentiating technologies and share best practices, which decreases their time to market and makes things easier for their developers. The move to open source software is a significant departure from the norm for the automotive industry, which has historically embraced proprietary solutions where common building blocks are often replicated. &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Visit the &lt;/span&gt;&lt;a href=&quot;https://sdv.eclipse.org/projects/&quot;&gt;&lt;span&gt;Eclipse SDV project page&lt;/span&gt;&lt;/a&gt;&lt;span&gt; to see the code first approach across more than 20 projects.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;While interest groups are fairly new to the Eclipse Foundation, there are a few active collaborations that are benefiting from the foundation’s governance structure, like &lt;/span&gt;&lt;a href=&quot;https://projects.eclipse.org/interest-groups/models-privacy-engineering&quot;&gt;&lt;span&gt;Models for Privacy Engineering&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;https://openmobility.eclipse.org/&quot;&gt;&lt;span&gt;OpenMobility&lt;/span&gt;&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a href=&quot;https://projects.eclipse.org/interest-groups/threadx-interest-group&quot;&gt;&lt;span&gt;Eclipse ThreadX&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;img alt=&quot;openMobility Logo&quot; height=&quot;123&quot; src=&quot;https://lh7-eu.googleusercontent.com/aLSCuq0n-Dhfh36t5EYQq7ZkjMluI7mn_wW7Waf5P8MezVOCP2Iw0xlgfRubz3DneezJrPOh80PlnQ2r3E-BDV_tE9OQgHD3qBfO_zGju13Rw_lKZvbwevdnFdoL_Xa6xZ8eqE2-dZQg3Zp7_GzaQ9w&quot; width=&quot;415&quot; /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;In the case of OpenMobility, a group of four members came together to work on evolving and driving adoption of mobility modelling and simulation technologies.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Its &lt;/span&gt;&lt;a href=&quot;https://openmobility.eclipse.org/members/&quot;&gt;&lt;span&gt;members&lt;/span&gt;&lt;/a&gt;&lt;span&gt; are interested in delivering a methodology and a framework of tools that are based on validated models. These tools are intended to be recognised as “standard tools” in industry applications and academia for mobility modelling and simulation. OpenMobility has declared interest in &lt;/span&gt;&lt;a href=&quot;https://eclipse.dev/mosaic/&quot;&gt;&lt;span&gt;Eclipse MOSAIC&lt;/span&gt;&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a href=&quot;https://eclipse.dev/sumo/&quot;&gt;&lt;span&gt;Eclipse SUMO&lt;/span&gt;&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/automotive.openmcx&quot;&gt;&lt;span&gt;Eclipse openMCx&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;Eclipse ThreadX: A New Era for Embedded RTOS Technology&lt;/span&gt;&lt;/h3&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The Eclipse Foundation’s newest interest group is a unique case. With Microsoft contributing Azure RTOS to the Eclipse Foundation under the &lt;/span&gt;&lt;a href=&quot;http://www.threadx.io/&quot;&gt;&lt;span&gt;Eclipse ThreadX&lt;/span&gt;&lt;/a&gt;&lt;span&gt; project last month, plans are underway to establish a working group that will consolidate the project, preserve its certifications, promote the brand, and grow the technology’s ecosystem and community.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;However, this cannot be done without first establishing an industry-supported, sustainable funding model for Eclipse ThreadX. This will be the focus of the new ThreadX Interest Group. The founding members of this interest group intend to form a working group dedicated to the project after investigating key topics around the potential working group’s funding and goals. Any company with an interest in embedded technology is welcome to &lt;/span&gt;&lt;a href=&quot;mailto:collaborations@eclipse-foundation.org&quot;&gt;&lt;span&gt;join the interest group&lt;/span&gt;&lt;/a&gt;&lt;span&gt; to define ThreadX’s future.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;While interest groups are not necessarily intended to serve as a jumping off point for new working groups, ThreadX shows just how flexible this collaboration model can be. With interest groups, members can come together to share a common interest in a topic or domain in a vendor-neutral manner. What members choose to collaborate on is up to them.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;To learn more about our industry collaborations and our current showcase, please visit  &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/collaborations&quot;&gt;&lt;span&gt;eclipse.org/collaborations&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, and &lt;/span&gt;&lt;a href=&quot;mailto:collaborations@eclipse-foundation.org&quot;&gt;&lt;span&gt;contact us&lt;/span&gt;&lt;/a&gt;&lt;span&gt; if you are interested in joining and/or forming a new collaboration!&lt;/span&gt;&lt;br /&gt; &lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;Sharon Corbett&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2023-12-18T11:21:16-05:00&quot; title=&quot;Monday, December 18, 2023 - 11:21&quot;&gt;Mon, 2023-12-18 11:21&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Mon, 18 Dec 2023 16:21:16 +0000</pubDate>
</item>
<item>
	<title>Mikael Barbero: Elevating Software Supply Chain Security: Eclipse Foundation's 2FA Milestone</title>
	<guid isPermaLink="true">https://mikael.barbero.tech/blog/post/2023-12-18-2fa-at-eclipse-foundation/</guid>
	<link>https://mikael.barbero.tech/blog/post/2023-12-18-2fa-at-eclipse-foundation/</link>
	<description>&lt;p&gt;In the realm of open-source software, security of the supply chain is not just a concern—it’s a crucial battleground. The Eclipse Foundation, at the forefront of this fight, has taken a decisive step with its 2023 initiative to enforce two-factor authentication (2FA) across its platforms. This move is more than a security upgrade; it’s a testament to the Foundation’s commitment to safeguarding the open-source software supply chain against escalating threats.&lt;/p&gt;
&lt;p&gt;The traditional reliance on password-based authentication poses a significant risk, especially in open-source software development. As highlighted in a &lt;a href=&quot;https://mikael.barbero.tech/blog/post/2022-11-22-2fa-for-developers/&quot;&gt;previous article&lt;/a&gt;, compromised developer accounts can become conduits for malicious code, affecting not only the developers themselves but also downstream users. The &lt;strong&gt;alarming 742% average annual increase in software supply chain attacks&lt;/strong&gt; in recent years underscores the urgency of robust security measures. Recognizing this threat, the Eclipse Foundation has championed the shift to more secure authentication methods with 2FA.&lt;/p&gt;
&lt;p&gt;The road to comprehensive 2FA implementation was not without its challenges. One of the main hurdles was addressing misunderstandings about what 2FA entails. For example, there was confusion about &lt;a href=&quot;https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/1251#note_896310&quot;&gt;whether 2FA required hardware tokens&lt;/a&gt;. Additionally, concerns arose about what actions to take in case of a loss of the second factor. The Foundation tackled these issues head-on through &lt;a href=&quot;https://www.eclipse.org/lists/eclipse.org-committers/msg01389.html&quot;&gt;repeated&lt;/a&gt; &lt;a href=&quot;https://www.eclipse.org/lists/eclipse.org-committers/msg01397.html&quot;&gt;communication&lt;/a&gt; and education, providing clear, accessible information to demystify 2FA and allay fears.&lt;/p&gt;
&lt;p&gt;Feedback and insights from the Eclipse community were invaluable in shaping the 2FA initiative. A particularly unique challenge came from members who were &lt;a href=&quot;https://gitlab.eclipse.org/eclipsefdn/helpdesk/-/issues/4012&quot;&gt;unable to use mobile phones or hardware tokens at their workplaces&lt;/a&gt; due to internal policies. To address this, the Foundation helped identify software solutions that facilitated TOTP-based 2FA, aligning with the IT requirements of these members: we were committed committed to help everybody and find practical solutions to all problems.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;figure&gt;
&lt;img alt=&quot;2FA Bird&quot; src=&quot;https://mikael.barbero.tech/blog/post/2023-12-18-2fa-at-eclipse-foundation/2fa.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;For the Eclipse Foundation, 2FA is just one aspect of a broader vision to harden software supply chain security. Recognizing that the &lt;a href=&quot;https://mikael.barbero.tech/blog/post/2022-11-22-2fa-for-developers/&quot;&gt;first line of defense starts with developers&lt;/a&gt;, the Foundation has positioned itself as a role model in software supply chain security. Beyond 2FA, it is actively helping its projects to better understand and communicate their dependencies through Software Bill of Materials (SBOMs), manage vulnerabilities in these dependencies, and secure their build pipelines against potential threats. These initiatives are set to continue throughout 2024.&lt;/p&gt;
&lt;p&gt;The impact of the 2FA enforcement initiative is clearly demonstrated by the significant adoption rates within the Eclipse community. On GitHub, &lt;strong&gt;91% of our committers have now enabled 2FA&lt;/strong&gt;, with 63% of organizations achieving complete member compliance. In 2024, we will take the final steps to fully enforce 2FA for committers on GitHub, ensuring that all organizations will exclusively have members with 2FA enabled. For projects hosted on &lt;a href=&quot;http://gitlab.eclipse.org/eclipse&quot;&gt;gitlab.eclipse.org&lt;/a&gt;, &lt;strong&gt;63% of committers have enabled 2FA&lt;/strong&gt;. Since December 11th, committers are required to enable 2FA upon signing in—if they haven’t already—before they can proceed with any other actions.&lt;/p&gt;
&lt;p&gt;The 2FA enforcement initiative of the Eclipse Foundation represents an essential measure in hardening the security of the open-source software supply chain of its projects. This initiative underscores the significance of shared responsibility and vigilance in cybersecurity.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This work was made possible thanks to the funding the Foundation received from the &lt;a href=&quot;https://openssf.org/community/alpha-omega/&quot;&gt;Alpha-Omega&lt;/a&gt; Project. &lt;/p&gt;</description>
	<pubDate>Mon, 18 Dec 2023 16:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: Celebrating Eclipse Theia’s Milestone: Full Compatibility with VS Code Extension API</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1751</guid>
	<link>https://eclipse-foundation.blog/2023/12/18/celebrating-eclipse-theias-milestone-full-compatibility-with-vs-code-extension-api/</link>
	<description>&lt;p&gt;We are thrilled to announce a landmark achievement in the evolution of &lt;a href=&quot;https://theia-ide.org/&quot;&gt;Theia&lt;/a&gt;: full compatibility with the Visual Studio Code (VS Code) extension API, marking a significant milestone in the journey of Theia towards becoming a universally adaptable development environment.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Unleashing a World of Features with VS Code Extensions&lt;/h2&gt;



&lt;p&gt;Theia has supported &lt;a href=&quot;https://eclipsesource.com/blogs/2019/10/31/using-vs-code-extensions-in-eclipse-theia-and-che/&quot;&gt;hosting VS Code extensions&lt;/a&gt; for many years. The integration of the VS Code extension API unlocked an unprecedented array of features for Theia-based applications. This compatibility means that users can leverage the extensive ecosystem of VS Code extensions, bringing thousands of new capabilities to Theia. With the completion of a recent initiative, Theia now is fully compatible with the VS Code API allowing the vast majority of VS Code extensions to be used in any Theia-based application. Of particular note is the recent addition of &lt;a href=&quot;https://eclipsesource.com/blogs/2023/09/05/eclipse-theia-1-41-release-news-and-noteworthy/&quot;&gt;support for notebook editors&lt;/a&gt;, a game-changer that opens Theia to new audiences, such as data scientists, who rely heavily on notebook interfaces for languages like Python.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;A Symphony of Collaboration&lt;/h2&gt;



&lt;p&gt;This achievement is not just a technical milestone; it is a testament to the power of collaborative open-source development. The original VS Code API compatibility implementation was contributed by Red Hat. The journey to full compatibility, initiated by STMicroelectronics and crafted through the concerted efforts of EclipseSource, Ericsson, Typefox, and other contributors, has been one of shared vision and united effort. STMicroelectronics and EclipseSource played a pivotal role in establishing an open, structured process for regular API comparison and issue tracking. This approach facilitated a broad-based contribution, allowing various organizations to contribute effectively to the project.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Empowering the Developer Community&lt;/h2&gt;



&lt;p&gt;The compatibility with the VS Code API multiplies Theia’s effectiveness as a development platform. For developers, this means access to the latest and most advanced tools available in the VS Code ecosystem, significantly enhancing both the adopter and user experience with Theia.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Overcoming Challenges through Open Source Collaboration&lt;/h2&gt;



&lt;p&gt;The journey to this point wasn’t without challenges. Initially, contributions were focused only on specific missing API features needed for particular extensions used by contributors. However, the structured process initiated by STMicroelectronics set a new direction – aiming for complete compatibility. This approach significantly simplified the distribution and parallelization of work. As a result, this process galvanized the open-source community, leading to a surge in contributions and exemplifying the true spirit of collaborative innovation.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Maintaining the Pace: The Future Roadmap&lt;/h2&gt;



&lt;p&gt;For nearly half a year, Theia has maintained full compatibility with the VS Code extension API. The commitment to this standard is unwavering. With regular scans of new VS Code API updates, contributors that Theia stays in lockstep with the latest advancements, continually integrating new features and capabilities.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Join Us in this Continual Journey&lt;/h2&gt;



&lt;p&gt;As we celebrate this milestone, we also look to the future. Theia’s journey is ongoing, and the path ahead is as exciting as the accomplishments behind us. We invite the developer community, contributors, and enthusiasts to join us in this vibrant and continually evolving project. Together, we will keep pushing the boundaries of what’s possible in open-source development environments.&lt;/p&gt;



&lt;p&gt;Let’s continue to shape the future of software development tools with Theia. Your contributions, feedback, and engagement are not just welcome – they are essential to our shared success.&lt;/p&gt;



&lt;p&gt;Here are a couple of links to get you started in your journey with Eclipse Theia:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;Theia’s &lt;a href=&quot;https://theia-ide.org/&quot;&gt;website&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;Project &lt;a href=&quot;https://projects.eclipse.org/projects/ecd.theia/&quot;&gt;overview page&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;Github &lt;a href=&quot;https://github.com/eclipse-theia&quot;&gt;organization&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Project &lt;a href=&quot;https://github.com/eclipse-theia/theia#readme&quot;&gt;readme&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://theia-ide.org/docs/getting_started&quot;&gt;Getting started&lt;/a&gt; with Theia&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse-theia/theia/blob/master/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt; to Theia&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Mon, 18 Dec 2023 12:09:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Building cloud-native (modeling) tools</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/12/18/building-cloud-native-modeling-tools/</guid>
	<link>https://eclipsesource.com/blogs/2023/12/18/building-cloud-native-modeling-tools/</link>
	<description>&lt;p&gt;Are you on the journey to develop a domain-specific (modeling) tool based on modern web technologies? Curious about the latest tech innovations and their seamless integration for cloud efficiency? â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/12/18/building-cloud-native-modeling-tools/&quot; rel=&quot;nofollow&quot;&gt; Building cloud-native (modeling) tools&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Lorenzo Bettini: Eclipse fonts in Windows 11</title>
	<guid isPermaLink="false">https://www.lorenzobettini.it/?p=3032</guid>
	<link>https://www.lorenzobettini.it/2023/12/eclipse-fonts-in-windows-11/</link>
	<description>This is a quick post about having nice fonts in Eclipse in Windows 11, based on my experience (maybe I had bad luck with the default configurations of Eclipse and/or Windows). When I bought my Acer Aspire Vero, I found Windows 11 installed, and now and then, I’m using Windows 11 (though I’m using Linux […]</description>
	<pubDate>Thu, 14 Dec 2023 09:06:22 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: The Eclipse Theia Community Release 2023-11</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/12/14/the-eclipse-theia-community-release-2023-11/</guid>
	<link>https://eclipsesource.com/blogs/2023/12/14/the-eclipse-theia-community-release-2023-11/</link>
	<description>&lt;p&gt;We are happy to announce the fourth Eclipse Theia community release “2023-11”, version 1.43.x!
Don’t know about Eclipse Theia, yet? It is the next-generation platform for building IDEs and tools for …&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/12/14/the-eclipse-theia-community-release-2023-11/&quot; rel=&quot;nofollow&quot;&gt; The Eclipse Theia Community Release 2023-11&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Collaborative, Testable and Accessible diagrams with Eclipse GLSP</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/12/11/collaborative-diagrams-glsp/</guid>
	<link>https://eclipsesource.com/blogs/2023/12/11/collaborative-diagrams-glsp/</link>
	<description>&lt;p&gt;Modern web-based diagram editors are not only about shapes and edges; they’re about creating an interactive, collaborative environment that elevates user experience and productivity. With technologies …&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/12/11/collaborative-diagrams-glsp/&quot; rel=&quot;nofollow&quot;&gt; Collaborative, Testable and Accessible diagrams with Eclipse GLSP&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>TypeFox: Visualizing large hierarchical data</title>
	<guid isPermaLink="true">https://www.typefox.io/blog/visualizing-large-hierarchical-data</guid>
	<link>https://www.typefox.io/blog/visualizing-large-hierarchical-data</link>
	<description>Creating an intuitive diagram with a large amount of data is not always easy. Let's see what we can do in the case of hierarchical data.</description>
	<pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.32 Released!</title>
	<guid isPermaLink="false">http://eclipse.dev/webtools/news.php#permalink206</guid>
	<link>https://eclipse.org/webtools/releases/3.32</link>
	<description>&lt;div&gt;
      The Eclipse Web Tools Platform 3.32 has been released!
      &lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt;
      and updates can be performed using the Eclipse IDE 2023-12
      &lt;a href=&quot;https://download.eclipse.org/releases/2023-12/&quot;&gt;Update Site&lt;/a&gt;
      or through any of the related
      &lt;a href=&quot;https://marketplace.eclipse.org/user/nitind/listings&quot;&gt;Eclipse Marketplace&lt;/a&gt;
      .
      Release 3.32 is included in the 2023-12
      &lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2023-12/r/eclipse-ide-enterprise-java-and-web-developers&quot;&gt;
        Eclipse IDE for Enterprise Java and Web Developers
      &lt;/a&gt;
      , with selected portions also included in several
      &lt;a href=&quot;https://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;
      . Adopters can download
      &lt;a href=&quot;https://download.eclipse.org/webtools/downloads/drops/R3.32.0/R-3.32.0-20231114230950/&quot;&gt;the R3.32 p2 repository&lt;/a&gt;
      directly and combine it with the necessary dependencies, as well as check the &lt;a href=&quot;https://wiki.eclipse.org/WTP_3.32_(2023-12)_-_New_Help_for_Old_Friends&quot;&gt;New Help for Old Friends&lt;/a&gt; document as a high number of bundles have updated their BREEs in this release, in part due to a large amount of third party bundles seeing their own updates.&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://eclipse.dev/webtools/news.php#permalink206&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 06 Dec 2023 23:59:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Eclipse Theia 1.44 Release: News and Noteworthy</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/12/05/eclipse-theia-1-44-release-news-and-noteworthy/</guid>
	<link>https://eclipsesource.com/blogs/2023/12/05/eclipse-theia-1-44-release-news-and-noteworthy/</link>
	<description>&lt;p&gt;We are happy to announce the Eclipse Theia 1.44 release! The release contains 37 merged pull requests and we welcome three new contributors. In this article we will highlight some selected â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/12/05/eclipse-theia-1-44-release-news-and-noteworthy/&quot; rel=&quot;nofollow&quot;&gt; Eclipse Theia 1.44 Release: News and Noteworthy&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Sharon Corbett: Starting Your Collaboration Journey at the Eclipse Foundation</title>
	<guid isPermaLink="false">7457 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/sharon-corbett/starting-your-collaboration-journey-eclipse-foundation</link>
	<description>&lt;span&gt;Starting Your Collaboration Journey at the Eclipse Foundation&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Whether you intend on contributing to Eclipse technologies that are important to your product strategy, or simply want to explore a specific innovation area with like-minded organisations, the Eclipse Foundation is the open source home for industry collaboration.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;But how do you get started? The first step is to identify your goals and areas of interest. Which Eclipse technologies does your organisation find valuable? What kinds of organisations are you looking to collaborate with? &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;After answering these questions, you can determine the scope of your intended collaboration. Once you’ve decided &lt;/span&gt;&lt;a href=&quot;https://blogs.eclipse.org/post/sharon-corbett/which-eclipse-foundation-collaboration-model-best-you-three-questions-ask&quot;&gt;&lt;span&gt;which of our two collaboration models is right for you&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, it’s time to explore your options. The Eclipse Foundation hosts 19 working groups and 3 interest groups focused on runtimes, tools, and frameworks for cloud and edge applications, IoT, AI, automotive, and beyond. Members are encouraged to explore our current &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/org/workinggroups/explore.php&quot;&gt;&lt;span&gt;showcase&lt;/span&gt;&lt;/a&gt;&lt;span&gt; and see which existing collaborations align with their goals. &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;All Eclipse Foundation members are eligible to participate in industry collaborations. To contact us about joining a working group, you can complete the membership form on the website of your working group of interest, or the general &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/membership/join-us/&quot;&gt;&lt;span&gt;Eclipse Foundation membership form&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. From there, our membership team will guide you through the process. &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;For interest groups, the process is simpler. Members can simply announce their intention to join on the interest group’s mailing list.&lt;/span&gt;&lt;/p&gt;&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;Starting Your Own Collaboration&lt;/span&gt;&lt;/h2&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;To begin the process of establishing a working group, you first need to &lt;/span&gt;&lt;a href=&quot;mailto:membership@eclipse.org&quot;&gt;&lt;span&gt;contact our business development team&lt;/span&gt;&lt;/a&gt;&lt;span&gt; to determine the feasibility of establishing a formal working group. Upon determination, the Eclipse Foundation will work with the lead organisation(s) to define the working group's vision and scope, formalise agreements, and identify potential members. A key outcome of this stage is the draft Working Group Charter, a framework outlining the vision, scope, technical roadmap, and leadership structure of the working group.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;All five stages of the working group lifecycle are visualised below: &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;img alt=&quot;working group lifecycle&quot; height=&quot;204&quot; src=&quot;https://lh7-eu.googleusercontent.com/Y_uGAxil_morYdpvJt9NIQqop0KMH5rvR2Jwk1SifLzSJIj4GY5K0_6Q2gYXXgbcOg4uzRdc6AJR6cdNT6yJjxqgJrW2BcXiRsZsoqFcJAXwbf0L5JK5bRnwPT8UlxvklwVHNm--0M34w-wqN8J2A78&quot; width=&quot;624&quot; /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;To learn more about the different stages of creating a new working group, review the &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/org/workinggroups/process.php#wg-lifecycle&quot;&gt;&lt;span&gt;Eclipse Foundation Working Group Process&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;To create a new interest group, existing members can &lt;/span&gt;&lt;a href=&quot;https://projects.eclipse.org/node/add/interest-group&quot;&gt;&lt;span&gt;submit a proposal&lt;/span&gt;&lt;/a&gt;&lt;span&gt; on our website. If your organisation is not already a member, you must first join the Eclipse Foundation, and then follow the &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/org/collaborations/interest-groups/process.php&quot;&gt;&lt;span&gt;Eclipse Foundation Interest Group Process&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. There must be at least three member organisations participating, and members must designate at least one interest group lead. Unlike formal working groups, no additional fees are required to participate.&lt;/span&gt;&lt;br /&gt; &lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;img alt=&quot;interest group life cycle&quot; height=&quot;206&quot; src=&quot;https://lh7-eu.googleusercontent.com/OKiISA4mhFxlVzyfyiLhHJoFgn7pHOUl1Eq0LG_nr6yhws6-zb5ZNY3VUXyyrOCs5RHcSzQa0-g-rICRipohhUHmsOG-fPkcKJA37LiiUvf-08-gEAlF2yYvI8zKif91ex6E2mAyWpAM5iE_L7L_zls&quot; width=&quot;538&quot; /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Once your collaboration is underway, you’ll be able to benefit from the vendor-neutral governance and collaboration management provided by the Eclipse Foundation. Visit &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/collaborations/&quot;&gt;&lt;span&gt;eclipse.org/collaborations&lt;/span&gt;&lt;/a&gt;&lt;span&gt; to learn more about starting your collaboration journey. &lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;Sharon Corbett&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2023-12-04T13:38:32-05:00&quot; title=&quot;Monday, December 4, 2023 - 13:38&quot;&gt;Mon, 2023-12-04 13:38&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Mon, 04 Dec 2023 18:38:32 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Discover the Real-World Power of Open Source and Collaboration</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/12/04/open-source-collaboration/</guid>
	<link>https://eclipsesource.com/blogs/2023/12/04/open-source-collaboration/</link>
	<description>&lt;p&gt;Open source and collaboration are buzzwords in every industry, but what does it mean in the real world? Who are the people behind these projects, and how are they funded? What motivates stakeholders â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/12/04/open-source-collaboration/&quot; rel=&quot;nofollow&quot;&gt; Discover the Real-World Power of Open Source and Collaboration&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: CDT Cloud Blueprint: Memory Inspector</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/11/30/cdt-cloud-blueprint-memory-inspector/</guid>
	<link>https://eclipsesource.com/blogs/2023/11/30/cdt-cloud-blueprint-memory-inspector/</link>
	<description>&lt;p&gt;When it comes to C/C++ development, especially in the world of embedded development, in-depth memory analysis is often key to efficient and effective programming. CDT Cloud Blueprint, an open and â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/11/30/cdt-cloud-blueprint-memory-inspector/&quot; rel=&quot;nofollow&quot;&gt; CDT Cloud Blueprint: Memory Inspector&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate>
</item>
<item>
	<title>John Kellerman: Eclipse Cloud DevTools Contributor Award:Tobias Ortmayr for improving the performance of Theia</title>
	<guid isPermaLink="false">7454 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/john-kellerman/eclipse-cloud-devtools-contributor-awardtobias-ortmayr-improving-performance</link>
	<description>&lt;span&gt;Eclipse Cloud DevTools Contributor Award:Tobias Ortmayr for improving the performance of Theia&lt;/span&gt;

            &lt;div class=&quot;field field--name-body field--type-text-with-summary field--label-hidden field--item&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;The Eclipse Cloud Developer Tools contributor award for December goes to Tobias Ortmayr at &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=690&quot;&gt;&lt;span&gt;EclipseSource&lt;/span&gt;&lt;/a&gt;&lt;span&gt; for his outstanding and transformative contributions to improving the performance of Eclipse Theia.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Tobias Ortmayr continues to exemplify exceptional proficiency and commitment in his instrumental work on Eclipse Theia. His work on significant performance enhancements is remarkable for its immediate effects. However, it  also enables observability of the ongoing progress:. &lt;/span&gt;&lt;a href=&quot;https://eclipse-theia.github.io/theia-e2e-test-suite/performance/&quot;&gt;&lt;span&gt;https://eclipse-theia.github.io/theia-e2e-test-suite/performance/&lt;/span&gt;&lt;/a&gt;&lt;span&gt; (see also screenshot below). This work and progress resonates and is appreciated by the Eclipse Theia community.&lt;/span&gt;&lt;/p&gt;&lt;img class=&quot;align-center&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/2023-11/Theia%20performance%20graph.png&quot; width=&quot;74.86%&quot; /&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;Furthermore, Tobias, along with Philip Langer, has led  community discussions on performance, bringing four different vendors to address this critical issue: STMicroelectronics, Ericsson, EclipseSource, and Typefox. See also Matthew Khouzam’s talk at TheiaCon about “&lt;/span&gt;&lt;a href=&quot;https://youtu.be/ZlAZy7GjXRE?si=2BdGhaqg7nzCMUwx&quot;&gt;&lt;span&gt;Theia Observability and Lessons Learned for your App&lt;/span&gt;&lt;/a&gt;&lt;span&gt;” for more details. &lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;A notable achievement under Tobias's leadership is the optimization of the frontend-backend communication by a factor of 30 and the reduction of start-up times for Theia-based IDEs by an impressive 60%. In a cloud-centric design like Theia, even marginal reductions in docker spin-up times and communication improvements, when scaled over thousands of instances, translate into substantial savings in developer time. In the words of Will Rogers, &quot;you never get a second chance to make a first impression.&quot; In this vein, Tobias has not only enhanced the initial experience of Theia, but continues to refine it persistently.&lt;/span&gt;&lt;/p&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;For these reasons and more, we congratulate Tobias Ortmayr. His contributions have significantly improved the performance of Eclipse Theia and, equally as important, enable transparency and continued progress. Well done Tobias!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;This Eclipse Cloud DevTools contributor award is sponsored by&lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/a&gt;&lt;span&gt;the Eclipse Cloud DevTools Working Group. The working group provides a vendor-neutral ecosystem of open source projects focused on defining, implementing and promoting best-in-class web and cloud-based development tools. It is hosted at the Eclipse Foundation, current members of the group include &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=848&quot;&gt;&lt;span&gt;AMD&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=823&quot;&gt;&lt;span&gt;Arm&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=690&quot;&gt;&lt;span&gt;EclipseSource&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=682&quot;&gt;&lt;span&gt;Ericsson&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=863&quot;&gt;&lt;span&gt;Obeo&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=731&quot;&gt;&lt;span&gt;RedHat&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1069&quot;&gt;&lt;span&gt;Renesas&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=800&quot;&gt;&lt;span&gt;STMicroelectronics&lt;/span&gt;&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/membership/showMember.php?member_id=1194&quot;&gt;&lt;span&gt;TypeFox&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;
      
&lt;span&gt;&lt;span&gt;John Kellerman&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;time datetime=&quot;2023-11-28T16:07:51-05:00&quot; title=&quot;Tuesday, November 28, 2023 - 16:07&quot;&gt;Tue, 2023-11-28 16:07&lt;/time&gt;
&lt;/span&gt;</description>
	<pubDate>Tue, 28 Nov 2023 21:07:51 +0000</pubDate>
</item>
<item>
	<title>Mikael Barbero: Eclipse Mosquitto Security Audit Has Been Completed</title>
	<guid isPermaLink="true">https://mikael.barbero.tech/blog/post/2023-11-28-eclipse-mosquitto-security-audit-results/</guid>
	<link>https://mikael.barbero.tech/blog/post/2023-11-28-eclipse-mosquitto-security-audit-results/</link>
	<description>&lt;p&gt;We’re excited to announce that the Eclipse Foundation has successfully conducted a security audit for &lt;a href=&quot;https://mosquitto.org/&quot;&gt;Eclipse Mosquitto&lt;/a&gt;, marking our fourth project audit this year. To enhance security, all Mosquitto users are urged to upgrade to the latest available version. All issues identified by the audit have been fixed in the source code.&lt;/p&gt;
&lt;p&gt;An &lt;a href=&quot;https://iot.eclipse.org/&quot;&gt;Eclipse IoT&lt;/a&gt; project, Eclipse Mosquitto provides a lightweight server implementation of the &lt;a href=&quot;https://mqtt.org/mqtt-specification/&quot;&gt;MQTT protocol&lt;/a&gt; that is suitable for all situations, from powerful servers to embedded and low power machines. Highly portable and compatible with numerous platforms, Mosquitto is a popular choice for embedded products.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/trailofbits/publications/blob/master/reviews/2023-02-eclipse-mosquitto-lightweight-threatmodel.pdf&quot;&gt;
&lt;/a&gt;&lt;/p&gt;&lt;figure&gt;&lt;a href=&quot;https://github.com/trailofbits/publications/blob/master/reviews/2023-02-eclipse-mosquitto-lightweight-threatmodel.pdf&quot;&gt;
&lt;img alt=&quot;&amp;gt;&amp;gt;Threat Model&quot; src=&quot;https://mikael.barbero.tech/blog/post/2023-11-28-eclipse-mosquitto-security-audit-results/mosquitto_threat_model.jpg&quot; /&gt;
&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/trailofbits/publications/blob/master/reviews/2023-02-eclipse-mosquitto-lightweight-threatmodel.pdf&quot;&gt;Threat Model&lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Since the MQTT network could potentially be accessible to attackers, correct handling of messages in a broker and correct cryptographic operations are important to the security of the entire network.&lt;/p&gt;
&lt;p&gt;The audit revealed a few issues in the password implementation and Dynamic Security plugin. This shows that independent review can be useful for all projects, even mature ones.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/trailofbits/publications/blob/master/reviews/2023-03-eclipse-mosquitto-securityreview.pdf&quot;&gt;
&lt;/a&gt;&lt;/p&gt;&lt;figure&gt;&lt;a href=&quot;https://github.com/trailofbits/publications/blob/master/reviews/2023-03-eclipse-mosquitto-securityreview.pdf&quot;&gt;
&lt;img alt=&quot;&amp;gt;&amp;gt;Full Report&quot; src=&quot;https://mikael.barbero.tech/blog/post/2023-11-28-eclipse-mosquitto-security-audit-results/mosquitto_report.jpg&quot; /&gt;
&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/trailofbits/publications/blob/master/reviews/2023-03-eclipse-mosquitto-securityreview.pdf&quot;&gt;Full Report&lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This open source project security audit was completed by &lt;a href=&quot;https://www.trailofbits.com/&quot;&gt;Trail of Bits&lt;/a&gt;, an independent auditor. Like our previous three audits, this initiative was done in collaboration with the &lt;a href=&quot;https://ostif.org/&quot;&gt;Open Source Technology Improvement Fund&lt;/a&gt; (OSTIF) and was made possible thanks to the funding the Foundation received from the &lt;a href=&quot;https://openssf.org/community/alpha-omega/&quot;&gt;Alpha-Omega&lt;/a&gt; Project. &lt;/p&gt;
&lt;h2 id=&quot;get-involved&quot;&gt;Get Involved&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Download &lt;a href=&quot;https://mosquitto.org/&quot;&gt;Eclipse Mosquitto&lt;/a&gt;, learn how you can contribute to the project, and review their &lt;a href=&quot;https://mosquitto.org/security/&quot;&gt;security page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Learn more about the &lt;a href=&quot;https://www.eclipse.org/org/workinggroups/eclipse-cyber-risk-concept.php&quot;&gt;Eclipse Cyber Risk Initiative&lt;/a&gt;, and how your organization can join the effort to strengthen the open source supply chain. Please subscribe to the &lt;a href=&quot;https://accounts.eclipse.org/mailing-list/eclipse-cyber-risk-initiative&quot;&gt;ECRI mailing list&lt;/a&gt; to join the initiative, or to follow its progress.&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Tue, 28 Nov 2023 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Jonas, Maximilian and Philip: Web-based Tools and IDEs: Accomplishments and Opportunities</title>
	<guid isPermaLink="true">https://eclipsesource.com/blogs/2023/11/27/web-based-tools-accomplishments-opportunities/</guid>
	<link>https://eclipsesource.com/blogs/2023/11/27/web-based-tools-accomplishments-opportunities/</link>
	<description>&lt;p&gt;The landscape of tool creation projects has been significantly reshaped by the advent and rise of web-based tools and integrated development environments (IDEs). This field, though relatively new, has â€¦&lt;/p&gt;
                &lt;p&gt;The post
                    &lt;a href=&quot;https://eclipsesource.com/blogs/2023/11/27/web-based-tools-accomplishments-opportunities/&quot; rel=&quot;nofollow&quot;&gt; Web-based Tools and IDEs: Accomplishments and Opportunities&lt;/a&gt;
                    appeared first on
                    &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt; EclipseSource&lt;/a&gt;.
                &lt;/p&gt;</description>
	<pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
</item>

</channel>
</rss>
